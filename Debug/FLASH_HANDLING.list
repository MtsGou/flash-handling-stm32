
FLASH_HANDLING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a80c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800a9a0  0800a9a0  0001a9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af18  0800af18  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800af18  0800af18  0001af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af20  0800af20  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af20  0800af20  0001af20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af24  0800af24  0001af24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800af28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000220  0800b148  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  0800b148  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014da2  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1a  00000000  00000000  00034ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00037f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e2d  00000000  00000000  0003a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160aa  00000000  00000000  00062ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6761  00000000  00000000  000790a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006204  00000000  00000000  0016f858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a984 	.word	0x0800a984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800a984 	.word	0x0800a984

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <write_UART>:
  *
  * @param  *data:  data to send TX.
  *
  * @retval void
  */
void write_UART(char *data){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart4, data, strlen(data),100);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <write_UART+0x24>)
 8000fc0:	f004 fb58 	bl	8005674 <HAL_UART_Transmit>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000320 	.word	0x20000320

08000fd0 <reverse>:
  * @param  len:  string length.
  *
  * @retval void
  */
void reverse(char* str, int len)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000fe4:	e018      	b.n	8001018 <reverse+0x48>
        temp = str[i];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	440b      	add	r3, r1
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
        i++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
        j--;
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	3b01      	subs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbe2      	blt.n	8000fe6 <reverse+0x16>
    }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <intToStr>:
  * @param  d:  number of digits required in the output.
  *
  * @retval i
  */
int intToStr(int x, char str[], int d)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
    while (x) {
 8001040:	e01d      	b.n	800107e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <intToStr+0x8c>)
 8001046:	fb83 1302 	smull	r1, r3, r3, r2
 800104a:	1099      	asrs	r1, r3, #2
 800104c:	17d3      	asrs	r3, r2, #31
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	460b      	mov	r3, r1
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	1ad1      	subs	r1, r2, r3
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1c59      	adds	r1, r3, #1
 8001060:	6179      	str	r1, [r7, #20]
 8001062:	4619      	mov	r1, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	440b      	add	r3, r1
 8001068:	3230      	adds	r2, #48	; 0x30
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <intToStr+0x8c>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	1092      	asrs	r2, r2, #2
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1de      	bne.n	8001042 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001084:	e007      	b.n	8001096 <intToStr+0x66>
        str[i++] = '0';
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	617a      	str	r2, [r7, #20]
 800108c:	461a      	mov	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf3      	blt.n	8001086 <intToStr+0x56>

    reverse(str, i);
 800109e:	6979      	ldr	r1, [r7, #20]
 80010a0:	68b8      	ldr	r0, [r7, #8]
 80010a2:	f7ff ff95 	bl	8000fd0 <reverse>
    str[i] = '\0';
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    return i;
 80010b0:	697b      	ldr	r3, [r7, #20]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	66666667 	.word	0x66666667

080010c0 <ftoa>:
  * @param  afterpoint:  digits after dot.
  *
  * @retval void
  */
void ftoa(float n, char* res, int afterpoint)
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ca:	60b8      	str	r0, [r7, #8]
 80010cc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80010ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	ee17 3a90 	vmov	r3, s15
 80010da:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	69f8      	ldr	r0, [r7, #28]
 80010f8:	f7ff ff9a 	bl	8001030 <intToStr>
 80010fc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d030      	beq.n	8001166 <ftoa+0xa6>
        res[i] = '.'; // add dot
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	4413      	add	r3, r2
 800110a:	222e      	movs	r2, #46	; 0x2e
 800110c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 800110e:	69b8      	ldr	r0, [r7, #24]
 8001110:	f7ff fa1a 	bl	8000548 <__aeabi_f2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff fa03 	bl	8000524 <__aeabi_i2d>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	ec43 2b11 	vmov	d1, r2, r3
 8001126:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001170 <ftoa+0xb0>
 800112a:	f008 fd11 	bl	8009b50 <pow>
 800112e:	ec53 2b10 	vmov	r2, r3, d0
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fd29 	bl	8000b98 <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800114a:	edd7 7a06 	vldr	s15, [r7, #24]
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	4413      	add	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4619      	mov	r1, r3
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff ff65 	bl	8001030 <intToStr>
    }
}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bdb0      	pop	{r4, r5, r7, pc}
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40240000 	.word	0x40240000

08001178 <FLASH_erase>:
  * @param  Address:  Adress of first page to erase
  * @param  Pages:    Quantity of pages to erase from current page
  *
  * @retval Void
  */
void FLASH_erase(uint32_t address, uint16_t pages){
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]

	uint32_t StartPage = GetPage(address);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8c7 	bl	8001318 <GetPage>
 800118a:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t EndPageAdress = address + 4*pages;
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	623b      	str	r3, [r7, #32]
	uint32_t EndPage = GetPage(EndPageAdress);
 8001198:	6a38      	ldr	r0, [r7, #32]
 800119a:	f000 f8bd 	bl	8001318 <GetPage>
 800119e:	61f8      	str	r0, [r7, #28]

	HAL_FLASH_Unlock();
 80011a0:	f001 f9b2 	bl	8002508 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 80011a4:	f001 f9e2 	bl	800256c <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	// create data struct to save info about saving
	FLASH_EraseInitTypeDef EraseInitStruct;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Page        = StartPage;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	0adb      	lsrs	r3, r3, #11
 80011b8:	3301      	adds	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]

	// Case erasing error with function HAL_FLASHEx_Erase
	uint32_t PageError;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 faae 	bl	8002728 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <FLASH_erase+0x60>
		write_UART("\n\rError erasing flash");
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <FLASH_erase+0x70>)
 80011d4:	f7ff fee8 	bl	8000fa8 <write_UART>
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
	}

	HAL_FLASH_OB_Lock();
 80011d8:	f001 f9e4 	bl	80025a4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80011dc:	f001 f9b6 	bl	800254c <HAL_FLASH_Lock>
}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0800a9a0 	.word	0x0800a9a0

080011ec <FLASH_write_32bit>:
  * @param  Address:	  Memory address to save 32 bit data. Must be multiple of 2.
  * @param  *data:        32 bit data to save
  *
  * @retval Void
  */
void FLASH_write_32bit(uint32_t address, uint64_t *data){
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]

	int sofar=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
	int numofwords = (strlen(data)/4)+((strlen(data)%4)!=0);
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7fe ffe8 	bl	80001d0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	089c      	lsrs	r4, r3, #2
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f7fe ffe3 	bl	80001d0 <strlen>
 800120a:	4603      	mov	r3, r0
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4423      	add	r3, r4
 800121c:	60bb      	str	r3, [r7, #8]

	HAL_FLASH_Unlock();
 800121e:	f001 f973 	bl	8002508 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 8001222:	f001 f9a3 	bl	800256c <HAL_FLASH_OB_Unlock>

	while (sofar < numofwords){
 8001226:	e016      	b.n	8001256 <FLASH_write_32bit+0x6a>

		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,address, data[sofar]) != HAL_OK){
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	2000      	movs	r0, #0
 8001238:	f001 f8fa 	bl	8002430 <HAL_FLASH_Program>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <FLASH_write_32bit+0x5e>
			write_UART("\n\rError in writing flash.");
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <FLASH_write_32bit+0x84>)
 8001244:	f7ff feb0 	bl	8000fa8 <write_UART>
 8001248:	e005      	b.n	8001256 <FLASH_write_32bit+0x6a>
		}
		else {
			address += 8;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3308      	adds	r3, #8
 800124e:	607b      	str	r3, [r7, #4]
			sofar++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
	while (sofar < numofwords){
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbe4      	blt.n	8001228 <FLASH_write_32bit+0x3c>
		}

	}

	HAL_FLASH_OB_Lock();
 800125e:	f001 f9a1 	bl	80025a4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8001262:	f001 f973 	bl	800254c <HAL_FLASH_Lock>
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	0800a9d4 	.word	0x0800a9d4

08001274 <FLASH_read_32bit>:
  * @param  Address:	  Address to read. Must be 2*
  * @param  *data:        Pointer to assign value read.
  *
  * @retval Void
  */
void FLASH_read_32bit(uint32_t address, uint32_t *data){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]

	*data = *(uint32_t*)(address);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	601a      	str	r2, [r3, #0]

}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <FLASH_read_string_0xFF>:
  * @param  Address:	  Flash address to string[0]. Must be 2*
  * @param  *data:        Pointer (string[]) to assign string read
  *
  * @retval Void
  */
void FLASH_read_string_0xFF(uint32_t address, int8_t *data){
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]

	uint32_t leitura_FLASH = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	uint8_t cont_end = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	72fb      	strb	r3, [r7, #11]

	while(leitura_FLASH != 0xFFFFFFFF){
 80012a4:	e02c      	b.n	8001300 <FLASH_read_string_0xFF+0x6e>

		leitura_FLASH = *(uint32_t*)(address + cont_end);
 80012a6:	7afa      	ldrb	r2, [r7, #11]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]

		if(leitura_FLASH != 0xFFFFFFFF){
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b6:	d023      	beq.n	8001300 <FLASH_read_string_0xFF+0x6e>
			data[0 + cont_end] = (int8_t)leitura_FLASH;
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	b252      	sxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
			data[1 + cont_end] = (int8_t)(leitura_FLASH >> 8);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	0a1a      	lsrs	r2, r3, #8
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	440b      	add	r3, r1
 80012d2:	b252      	sxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]
			data[2 + cont_end] = (int8_t)(leitura_FLASH >> 16);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	0c1a      	lsrs	r2, r3, #16
 80012da:	7afb      	ldrb	r3, [r7, #11]
 80012dc:	3302      	adds	r3, #2
 80012de:	4619      	mov	r1, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	440b      	add	r3, r1
 80012e4:	b252      	sxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]
			data[3 + cont_end] = (int8_t)(leitura_FLASH >> 24);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	0e1a      	lsrs	r2, r3, #24
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	3303      	adds	r3, #3
 80012f0:	4619      	mov	r1, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	440b      	add	r3, r1
 80012f6:	b252      	sxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]
			cont_end +=4;
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	3304      	adds	r3, #4
 80012fe:	72fb      	strb	r3, [r7, #11]
	while(leitura_FLASH != 0xFFFFFFFF){
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001306:	d1ce      	bne.n	80012a6 <FLASH_read_string_0xFF+0x14>
		}
	}
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <GetPage>:
  * @param  Addr:	  flash address
  *
  * @retval page
  */
static uint32_t GetPage(uint32_t Addr)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <GetPage+0x78>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	4293      	cmp	r3, r2
 8001330:	d008      	beq.n	8001344 <GetPage+0x2c>
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <GetPage+0x78>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	085a      	lsrs	r2, r3, #1
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <GetPage+0x7c>)
 800133c:	4013      	ands	r3, r2
 800133e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001342:	e000      	b.n	8001346 <GetPage+0x2e>
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <GetPage+0x80>)
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4293      	cmp	r3, r2
 800134a:	d905      	bls.n	8001358 <GetPage+0x40>
  {
   /* Bank 1 */
    page = (Addr - FLASH_BASE)/FLASH_PAGE_SIZE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001352:	0adb      	lsrs	r3, r3, #11
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	e014      	b.n	8001382 <GetPage+0x6a>
  }
  else
  {
   /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE))/FLASH_PAGE_SIZE;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <GetPage+0x78>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	4293      	cmp	r3, r2
 8001364:	d008      	beq.n	8001378 <GetPage+0x60>
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <GetPage+0x78>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	085a      	lsrs	r2, r3, #1
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <GetPage+0x7c>)
 8001370:	4013      	ands	r3, r2
 8001372:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001376:	e000      	b.n	800137a <GetPage+0x62>
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <GetPage+0x80>)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	0adb      	lsrs	r3, r3, #11
 8001380:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	1fff75e0 	.word	0x1fff75e0
 8001394:	01fffe00 	.word	0x01fffe00
 8001398:	08080000 	.word	0x08080000

0800139c <init_parameters>:
  *
  * @param  none
  *
  * @retval void
  */
void init_parameters(){
 800139c:	b580      	push	{r7, lr}
 800139e:	b090      	sub	sp, #64	; 0x40
 80013a0:	af00      	add	r7, sp, #0

	uint32_t INT_VAR;
	float FLOAT_VAR;
	uint8_t SMALL_INT_VAR;

	FLASH_read_string_0xFF(END_STG, BUFFER_FLASH_L);
 80013a2:	4975      	ldr	r1, [pc, #468]	; (8001578 <init_parameters+0x1dc>)
 80013a4:	4875      	ldr	r0, [pc, #468]	; (800157c <init_parameters+0x1e0>)
 80013a6:	f7ff ff74 	bl	8001292 <FLASH_read_string_0xFF>

	if (strlen(BUFFER_FLASH_L)){
 80013aa:	4b73      	ldr	r3, [pc, #460]	; (8001578 <init_parameters+0x1dc>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 80a3 	beq.w	80014fa <init_parameters+0x15e>

		/* Data found on flash */

		write_UART("\n\r\n\rData saved on Flash:\n\r");
 80013b4:	4872      	ldr	r0, [pc, #456]	; (8001580 <init_parameters+0x1e4>)
 80013b6:	f7ff fdf7 	bl	8000fa8 <write_UART>
		write_UART(BUFFER_FLASH_L);
 80013ba:	486f      	ldr	r0, [pc, #444]	; (8001578 <init_parameters+0x1dc>)
 80013bc:	f7ff fdf4 	bl	8000fa8 <write_UART>

		/* Get data */
		token1 = strtok(BUFFER_FLASH_L, ","); strcpy(STR_VAR, token1);
 80013c0:	4970      	ldr	r1, [pc, #448]	; (8001584 <init_parameters+0x1e8>)
 80013c2:	486d      	ldr	r0, [pc, #436]	; (8001578 <init_parameters+0x1dc>)
 80013c4:	f006 f8ae 	bl	8007524 <strtok>
 80013c8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 fa70 	bl	80068b6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(INT_VAR_READ, token1);
 80013d6:	496b      	ldr	r1, [pc, #428]	; (8001584 <init_parameters+0x1e8>)
 80013d8:	2000      	movs	r0, #0
 80013da:	f006 f8a3 	bl	8007524 <strtok>
 80013de:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 fa65 	bl	80068b6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(FLOAT_VAR_READ, token1);
 80013ec:	4965      	ldr	r1, [pc, #404]	; (8001584 <init_parameters+0x1e8>)
 80013ee:	2000      	movs	r0, #0
 80013f0:	f006 f898 	bl	8007524 <strtok>
 80013f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fa5b 	bl	80068b6 <strcpy>
		token1 = strtok(NULL, ","); strcpy(SMALL_INT_VAR_READ, token1);
 8001400:	4960      	ldr	r1, [pc, #384]	; (8001584 <init_parameters+0x1e8>)
 8001402:	2000      	movs	r0, #0
 8001404:	f006 f88e 	bl	8007524 <strtok>
 8001408:	63f8      	str	r0, [r7, #60]	; 0x3c
 800140a:	463b      	mov	r3, r7
 800140c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800140e:	4618      	mov	r0, r3
 8001410:	f005 fa51 	bl	80068b6 <strcpy>

		INT_VAR = atoi(INT_VAR_READ);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4618      	mov	r0, r3
 800141a:	f005 f9d8 	bl	80067ce <atoi>
 800141e:	4603      	mov	r3, r0
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
		FLOAT_VAR = atof(FLOAT_VAR_READ);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f005 f9cf 	bl	80067c8 <atof>
 800142a:	ec53 2b10 	vmov	r2, r3, d0
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fbb1 	bl	8000b98 <__aeabi_d2f>
 8001436:	4603      	mov	r3, r0
 8001438:	637b      	str	r3, [r7, #52]	; 0x34
		SMALL_INT_VAR = atoi(SMALL_INT_VAR_READ);
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f005 f9c6 	bl	80067ce <atoi>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		/* Verify corrupted data */
		if(strlen(STR_VAR) < MAX_STR_SIZE && strlen(STR_VAR) > 0){
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe febf 	bl	80001d0 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	2b13      	cmp	r3, #19
 8001456:	d813      	bhi.n	8001480 <init_parameters+0xe4>
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00e      	beq.n	8001480 <init_parameters+0xe4>
			memset(STRING_VAR_GLOBAL,0,strlen(STRING_VAR_GLOBAL));
 8001462:	4849      	ldr	r0, [pc, #292]	; (8001588 <init_parameters+0x1ec>)
 8001464:	f7fe feb4 	bl	80001d0 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	461a      	mov	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	4846      	ldr	r0, [pc, #280]	; (8001588 <init_parameters+0x1ec>)
 8001470:	f005 f9ea 	bl	8006848 <memset>
			strcat(STRING_VAR_GLOBAL, STR_VAR);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4843      	ldr	r0, [pc, #268]	; (8001588 <init_parameters+0x1ec>)
 800147c:	f005 fa0c 	bl	8006898 <strcat>
		}
		if(!((INT_VAR > MAX_INT) || (INT_VAR < MIN_INT))){ INT_VAR_GLOBAL = INT_VAR;}
 8001480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001482:	f242 7210 	movw	r2, #10000	; 0x2710
 8001486:	4293      	cmp	r3, r2
 8001488:	d806      	bhi.n	8001498 <init_parameters+0xfc>
 800148a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001490:	d302      	bcc.n	8001498 <init_parameters+0xfc>
 8001492:	4a3e      	ldr	r2, [pc, #248]	; (800158c <init_parameters+0x1f0>)
 8001494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001496:	6013      	str	r3, [r2, #0]
		if(!((FLOAT_VAR > MAX_FLOAT) || (FLOAT_VAR < MIN_FLOAT))){ FLOAT_VAR_GLOBAL = FLOAT_VAR;}
 8001498:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800149c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001590 <init_parameters+0x1f4>
 80014a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	bfcc      	ite	gt
 80014aa:	2301      	movgt	r3, #1
 80014ac:	2300      	movle	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d013      	beq.n	80014e2 <init_parameters+0x146>
 80014ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80014be:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001594 <init_parameters+0x1f8>
 80014c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	bf4c      	ite	mi
 80014cc:	2301      	movmi	r3, #1
 80014ce:	2300      	movpl	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	f083 0301 	eor.w	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <init_parameters+0x146>
 80014dc:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <init_parameters+0x1fc>)
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	6013      	str	r3, [r2, #0]
		if(!((SMALL_INT_VAR > MAX_SMALL_INT) || (SMALL_INT_VAR < MIN_SMALL_INT))){ SMALL_INT_VAR_GLOBAL = SMALL_INT_VAR;}
 80014e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d807      	bhi.n	80014fa <init_parameters+0x15e>
 80014ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ee:	2b3b      	cmp	r3, #59	; 0x3b
 80014f0:	d903      	bls.n	80014fa <init_parameters+0x15e>
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <init_parameters+0x200>)
 80014f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f8:	7013      	strb	r3, [r2, #0]

	}

	/* Erase current char variables */
	memset(INT_VAR_CHAR_GLOBAL, 0, strlen(INT_VAR_CHAR_GLOBAL));
 80014fa:	4829      	ldr	r0, [pc, #164]	; (80015a0 <init_parameters+0x204>)
 80014fc:	f7fe fe68 	bl	80001d0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	2100      	movs	r1, #0
 8001506:	4826      	ldr	r0, [pc, #152]	; (80015a0 <init_parameters+0x204>)
 8001508:	f005 f99e 	bl	8006848 <memset>
	memset(FLOAT_VAR_CHAR_GLOBAL, 0, strlen(FLOAT_VAR_CHAR_GLOBAL));
 800150c:	4825      	ldr	r0, [pc, #148]	; (80015a4 <init_parameters+0x208>)
 800150e:	f7fe fe5f 	bl	80001d0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	2100      	movs	r1, #0
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <init_parameters+0x208>)
 800151a:	f005 f995 	bl	8006848 <memset>
	memset(SMALL_INT_VAR_CHAR_GLOBAL, 0, strlen(SMALL_INT_VAR_CHAR_GLOBAL));
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <init_parameters+0x20c>)
 8001520:	f7fe fe56 	bl	80001d0 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	481f      	ldr	r0, [pc, #124]	; (80015a8 <init_parameters+0x20c>)
 800152c:	f005 f98c 	bl	8006848 <memset>
	memset(STRING_VAR_GLOBAL, 0, strlen(STRING_VAR_GLOBAL));
 8001530:	4815      	ldr	r0, [pc, #84]	; (8001588 <init_parameters+0x1ec>)
 8001532:	f7fe fe4d 	bl	80001d0 <strlen>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	2100      	movs	r1, #0
 800153c:	4812      	ldr	r0, [pc, #72]	; (8001588 <init_parameters+0x1ec>)
 800153e:	f005 f983 	bl	8006848 <memset>

	/* Update char variables */
	sprintf(INT_VAR_CHAR_GLOBAL, "%d", INT_VAR_GLOBAL);
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <init_parameters+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	4918      	ldr	r1, [pc, #96]	; (80015ac <init_parameters+0x210>)
 800154a:	4815      	ldr	r0, [pc, #84]	; (80015a0 <init_parameters+0x204>)
 800154c:	f005 f984 	bl	8006858 <siprintf>
	sprintf(SMALL_INT_VAR_CHAR_GLOBAL, "%d", SMALL_INT_VAR_GLOBAL);
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <init_parameters+0x200>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4915      	ldr	r1, [pc, #84]	; (80015ac <init_parameters+0x210>)
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <init_parameters+0x20c>)
 800155a:	f005 f97d 	bl	8006858 <siprintf>
	ftoa(FLOAT_VAR_GLOBAL, FLOAT_VAR_CHAR_GLOBAL, 2);
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <init_parameters+0x1fc>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	2102      	movs	r1, #2
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <init_parameters+0x208>)
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	f7ff fda8 	bl	80010c0 <ftoa>

}
 8001570:	bf00      	nop
 8001572:	3740      	adds	r7, #64	; 0x40
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000568 	.word	0x20000568
 800157c:	08080000 	.word	0x08080000
 8001580:	0800a9f0 	.word	0x0800a9f0
 8001584:	0800aa0c 	.word	0x0800aa0c
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004
 8001590:	42c80000 	.word	0x42c80000
 8001594:	42700000 	.word	0x42700000
 8001598:	20000000 	.word	0x20000000
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000428 	.word	0x20000428
 80015a4:	20000430 	.word	0x20000430
 80015a8:	20000438 	.word	0x20000438
 80015ac:	0800aa10 	.word	0x0800aa10

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b4:	f000 fd13 	bl	8001fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b8:	f000 f828 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015bc:	f000 f9e2 	bl	8001984 <MX_GPIO_Init>
  MX_TIM3_Init();
 80015c0:	f000 f878 	bl	80016b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015c4:	f000 f8dc 	bl	8001780 <MX_TIM4_Init>
  MX_TIM16_Init();
 80015c8:	f000 f932 	bl	8001830 <MX_TIM16_Init>
  MX_UART4_Init();
 80015cc:	f000 f97a 	bl	80018c4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80015d0:	f000 f9a8 	bl	8001924 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  init_parameters();
 80015d4:	f7ff fee2 	bl	800139c <init_parameters>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Example word
	FLASH_erase(END_INICIAL, 2);
 80015d8:	2102      	movs	r1, #2
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <main+0x50>)
 80015dc:	f7ff fdcc 	bl	8001178 <FLASH_erase>
	FLASH_write_32bit(END_INICIAL, BUFFER_FLASH);
 80015e0:	4908      	ldr	r1, [pc, #32]	; (8001604 <main+0x54>)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <main+0x50>)
 80015e4:	f7ff fe02 	bl	80011ec <FLASH_write_32bit>

	HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f000 fd6d 	bl	80020c8 <HAL_Delay>
	FLASH_read_32bit(END_INICIAL, BUFFER_FLASH_L);
 80015ee:	4906      	ldr	r1, [pc, #24]	; (8001608 <main+0x58>)
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <main+0x50>)
 80015f2:	f7ff fe3f 	bl	8001274 <FLASH_read_32bit>
	// Example string
	//FLASH_write_string(END_INICIAL, "Teste");
	//HAL_Delay(100);
	//FLASH_read_string_0xFF(END_INICIAL, BUFFER_FLASH_L);

	HAL_Delay(1000);
 80015f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fa:	f000 fd65 	bl	80020c8 <HAL_Delay>
	FLASH_erase(END_INICIAL, 2);
 80015fe:	e7eb      	b.n	80015d8 <main+0x28>
 8001600:	08080000 	.word	0x08080000
 8001604:	2000043c 	.word	0x2000043c
 8001608:	20000568 	.word	0x20000568

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b096      	sub	sp, #88	; 0x58
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	2244      	movs	r2, #68	; 0x44
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f005 f914 	bl	8006848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800162e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001632:	f001 fb75 	bl	8002d20 <HAL_PWREx_ControlVoltageScaling>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800163c:	f000 f9d2 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001640:	2318      	movs	r3, #24
 8001642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001650:	2360      	movs	r3, #96	; 0x60
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001658:	2301      	movs	r3, #1
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001660:	2328      	movs	r3, #40	; 0x28
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001664:	2307      	movs	r3, #7
 8001666:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166c:	2302      	movs	r3, #2
 800166e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fba9 	bl	8002dcc <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001680:	f000 f9b0 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2303      	movs	r3, #3
 800168a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	2104      	movs	r1, #4
 800169c:	4618      	mov	r0, r3
 800169e:	f001 ff71 	bl	8003584 <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016a8:	f000 f99c 	bl	80019e4 <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3758      	adds	r7, #88	; 0x58
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016da:	4a28      	ldr	r2, [pc, #160]	; (800177c <MX_TIM3_Init+0xc8>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016e0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80016e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016ee:	22c7      	movs	r2, #199	; 0xc7
 80016f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_TIM3_Init+0xc4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fe:	481e      	ldr	r0, [pc, #120]	; (8001778 <MX_TIM3_Init+0xc4>)
 8001700:	f002 fe77 	bl	80043f2 <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800170a:	f000 f96b 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_TIM3_Init+0xc4>)
 800171e:	f003 feb5 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001728:	f000 f95c 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM3_Init+0xc4>)
 8001744:	f003 f8c8 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800174e:	f000 f949 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001752:	463b      	mov	r3, r7
 8001754:	2204      	movs	r2, #4
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM3_Init+0xc4>)
 800175a:	f003 f8bd 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001764:	f000 f93e 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM3_Init+0xc4>)
 800176a:	f000 f9f3 	bl	8001b54 <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000023c 	.word	0x2000023c
 800177c:	40000400 	.word	0x40000400

08001780 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001792:	463b      	mov	r3, r7
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017a6:	4a21      	ldr	r2, [pc, #132]	; (800182c <MX_TIM4_Init+0xac>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017ac:	f240 22cf 	movw	r2, #719	; 0x2cf
 80017b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017cc:	4816      	ldr	r0, [pc, #88]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017ce:	f002 fe10 	bl	80043f2 <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80017d8:	f000 f904 	bl	80019e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <MX_TIM4_Init+0xa8>)
 80017ec:	f003 fe4e 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80017f6:	f000 f8f5 	bl	80019e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_TIM4_Init+0xa8>)
 8001812:	f003 f861 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800181c:	f000 f8e2 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000288 	.word	0x20000288
 800182c:	40000800 	.word	0x40000800

08001830 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <MX_TIM16_Init+0x90>)
 8001846:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000-1;
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_TIM16_Init+0x8c>)
 800184a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001858:	2263      	movs	r2, #99	; 0x63
 800185a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_TIM16_Init+0x8c>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_TIM16_Init+0x8c>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800186e:	4813      	ldr	r0, [pc, #76]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001870:	f002 fd68 	bl	8004344 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800187a:	f000 f8b3 	bl	80019e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <MX_TIM16_Init+0x8c>)
 8001880:	f002 fe0e 	bl	80044a0 <HAL_TIM_IC_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800188a:	f000 f8ab 	bl	80019e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001892:	2301      	movs	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_TIM16_Init+0x8c>)
 80018a6:	f002 ff7b 	bl	80047a0 <HAL_TIM_IC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80018b0:	f000 f898 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002d4 	.word	0x200002d4
 80018c0:	40014400 	.word	0x40014400

080018c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_UART4_Init+0x58>)
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <MX_UART4_Init+0x5c>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <MX_UART4_Init+0x58>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_UART4_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_UART4_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_UART4_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_UART4_Init+0x58>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_UART4_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_UART4_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_UART4_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_UART4_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_UART4_Init+0x58>)
 8001908:	f003 fe66 	bl	80055d8 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001912:	f000 f867 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000320 	.word	0x20000320
 8001920:	40004c00 	.word	0x40004c00

08001924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_USART3_UART_Init+0x58>)
 800192a:	4a15      	ldr	r2, [pc, #84]	; (8001980 <MX_USART3_UART_Init+0x5c>)
 800192c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_USART3_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART3_UART_Init+0x58>)
 800194a:	220c      	movs	r2, #12
 800194c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART3_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USART3_UART_Init+0x58>)
 8001968:	f003 fe36 	bl	80055d8 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001972:	f000 f837 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200003a4 	.word	0x200003a4
 8001980:	40004800 	.word	0x40004800

08001984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <MX_GPIO_Init+0x5c>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <MX_GPIO_Init+0x5c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_GPIO_Init+0x5c>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_GPIO_Init+0x5c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	e7fe      	b.n	80019ec <Error_Handler+0x8>
	...

080019f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x44>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x44>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6613      	str	r3, [r2, #96]	; 0x60
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x44>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x44>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x44>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x44>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_TIM_PWM_MspInit+0x78>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d114      	bne.n	8001a74 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201d      	movs	r0, #29
 8001a68:	f000 fc2d 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a6c:	201d      	movs	r0, #29
 8001a6e:	f000 fc46 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a72:	e018      	b.n	8001aa6 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM4)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_TIM_PWM_MspInit+0x80>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d113      	bne.n	8001aa6 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_TIM_PWM_MspInit+0x7c>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	201e      	movs	r0, #30
 8001a9c:	f000 fc13 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001aa0:	201e      	movs	r0, #30
 8001aa2:	f000 fc2c 	bl	80022fe <HAL_NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40000400 	.word	0x40000400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40000800 	.word	0x40000800

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM16)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <HAL_TIM_Base_MspInit+0x8c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d130      	bne.n	8001b40 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_TIM_Base_MspInit+0x90>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001b20:	230e      	movs	r3, #14
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4809      	ldr	r0, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x94>)
 8001b2c:	f000 ff40 	bl	80029b0 <HAL_GPIO_Init>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2100      	movs	r1, #0
 8001b34:	2019      	movs	r0, #25
 8001b36:	f000 fbc6 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f000 fbdf 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40014400 	.word	0x40014400
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	48000400 	.word	0x48000400

08001b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a11      	ldr	r2, [pc, #68]	; (8001bb8 <HAL_TIM_MspPostInit+0x64>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d11c      	bne.n	8001bb0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_TIM_MspPostInit+0x68>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_TIM_MspPostInit+0x68>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <HAL_TIM_MspPostInit+0x68>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bac:	f000 ff00 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0ae      	sub	sp, #184	; 0xb8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	2288      	movs	r2, #136	; 0x88
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 fe31 	bl	8006848 <memset>
  if(huart->Instance==UART4)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_UART_MspInit+0x154>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d144      	bne.n	8001c7a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fee5 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff feec 	bl	80019e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	4a41      	ldr	r2, [pc, #260]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c16:	6593      	str	r3, [r2, #88]	; 0x58
 8001c18:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c30:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c54:	2308      	movs	r3, #8
 8001c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c64:	f000 fea4 	bl	80029b0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2034      	movs	r0, #52	; 0x34
 8001c6e:	f000 fb2a 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c72:	2034      	movs	r0, #52	; 0x34
 8001c74:	f000 fb43 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c78:	e047      	b.n	8001d0a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART3)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_UART_MspInit+0x15c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d142      	bne.n	8001d0a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c84:	2304      	movs	r3, #4
 8001c86:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fe9b 	bl	80039cc <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001c9c:	f7ff fea2 	bl	80019e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_UART_MspInit+0x158>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cd0:	2330      	movs	r3, #48	; 0x30
 8001cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480a      	ldr	r0, [pc, #40]	; (8001d20 <HAL_UART_MspInit+0x160>)
 8001cf6:	f000 fe5b 	bl	80029b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2027      	movs	r0, #39	; 0x27
 8001d00:	f000 fae1 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d04:	2027      	movs	r0, #39	; 0x27
 8001d06:	f000 fafa 	bl	80022fe <HAL_NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	37b8      	adds	r7, #184	; 0xb8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004c00 	.word	0x40004c00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40004800 	.word	0x40004800
 8001d20:	48000800 	.word	0x48000800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f98a 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d7e:	f002 fbf0 	bl	8004562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200002d4 	.word	0x200002d4

08001d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM3_IRQHandler+0x10>)
 8001d92:	f002 fbe6 	bl	8004562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000023c 	.word	0x2000023c

08001da0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM4_IRQHandler+0x10>)
 8001da6:	f002 fbdc 	bl	8004562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000288 	.word	0x20000288

08001db4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <USART3_IRQHandler+0x10>)
 8001dba:	f003 fcef 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200003a4 	.word	0x200003a4

08001dc8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <UART4_IRQHandler+0x10>)
 8001dce:	f003 fce5 	bl	800579c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000320 	.word	0x20000320

08001ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_kill>:

int _kill(int pid, int sig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df6:	f004 fcef 	bl	80067d8 <__errno>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2216      	movs	r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_exit>:

void _exit (int status)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffe7 	bl	8001dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e1e:	e7fe      	b.n	8001e1e <_exit+0x12>

08001e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e00a      	b.n	8001e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e32:	f3af 8000 	nop.w
 8001e36:	4601      	mov	r1, r0
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	b2ca      	uxtb	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf0      	blt.n	8001e32 <_read+0x12>
  }

  return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e009      	b.n	8001e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	60ba      	str	r2, [r7, #8]
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf1      	blt.n	8001e6c <_write+0x12>
  }
  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_close>:

int _close(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eba:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_isatty>:

int _isatty(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f004 fc54 	bl	80067d8 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20018000 	.word	0x20018000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	20000694 	.word	0x20000694
 8001f64:	200006b0 	.word	0x200006b0

08001f68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f90:	f7ff ffea 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f004 fc13 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fbe:	f7ff faf7 	bl	80015b0 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001fd0:	0800af28 	.word	0x0800af28
  ldr r2, =_sbss
 8001fd4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001fd8:	200006ac 	.word	0x200006ac

08001fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_2_IRQHandler>

08001fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f961 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f000 f80e 	bl	8002010 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	e001      	b.n	8002004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002000:	f7ff fcf6 	bl	80019f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002004:	79fb      	ldrb	r3, [r7, #7]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_InitTick+0x6c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_InitTick+0x70>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_InitTick+0x6c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002032:	fbb3 f3f1 	udiv	r3, r3, r1
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f96d 	bl	800231a <HAL_SYSTICK_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d809      	bhi.n	8002060 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 f937 	bl	80022c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002058:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_InitTick+0x74>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e007      	b.n	8002070 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e004      	b.n	8002070 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	73fb      	strb	r3, [r7, #15]
 800206a:	e001      	b.n	8002070 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000028 	.word	0x20000028
 8002080:	20000020 	.word	0x20000020
 8002084:	20000024 	.word	0x20000024

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000028 	.word	0x20000028
 80020ac:	20000698 	.word	0x20000698

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000698 	.word	0x20000698

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000028 	.word	0x20000028

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d008      	beq.n	800235c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e022      	b.n	80023a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020e 	bic.w	r2, r2, #14
 800236a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f003 021c 	and.w	r2, r3, #28
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f202 	lsl.w	r2, r1, r2
 800238e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d005      	beq.n	80023d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e029      	b.n	8002426 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 020e 	bic.w	r2, r2, #14
 80023e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f003 021c 	and.w	r2, r3, #28
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f202 	lsl.w	r2, r1, r2
 8002404:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
    }
  }
  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_FLASH_Program+0xd0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_FLASH_Program+0x1e>
 800244a:	2302      	movs	r3, #2
 800244c:	e053      	b.n	80024f6 <HAL_FLASH_Program+0xc6>
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_FLASH_Program+0xd0>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002458:	f000 f8b4 	bl	80025c4 <FLASH_WaitForLastOperation>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d143      	bne.n	80024ee <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_FLASH_Program+0xd0>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_FLASH_Program+0xd4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_FLASH_Program+0xd4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_FLASH_Program+0xd4>)
 800247e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002482:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_FLASH_Program+0xd0>)
 8002486:	2202      	movs	r2, #2
 8002488:	771a      	strb	r2, [r3, #28]
 800248a:	e002      	b.n	8002492 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_FLASH_Program+0xd0>)
 800248e:	2200      	movs	r2, #0
 8002490:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800249c:	68b8      	ldr	r0, [r7, #8]
 800249e:	f000 f8e7 	bl	8002670 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80024a2:	2301      	movs	r3, #1
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e010      	b.n	80024ca <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d002      	beq.n	80024b4 <HAL_FLASH_Program+0x84>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d10a      	bne.n	80024ca <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	68b8      	ldr	r0, [r7, #8]
 80024ba:	f000 f8ff 	bl	80026bc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80024c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80024c8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024ce:	f000 f879 	bl	80025c4 <FLASH_WaitForLastOperation>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_FLASH_Program+0xd4>)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <HAL_FLASH_Program+0xd4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80024ea:	f000 fa17 	bl	800291c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_FLASH_Program+0xd0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]

  return status;
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	2000002c 	.word	0x2000002c
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_FLASH_Unlock+0x38>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	da0b      	bge.n	8002532 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_FLASH_Unlock+0x38>)
 800251c:	4a09      	ldr	r2, [pc, #36]	; (8002544 <HAL_FLASH_Unlock+0x3c>)
 800251e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_FLASH_Unlock+0x38>)
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_FLASH_Unlock+0x40>)
 8002524:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_FLASH_Unlock+0x38>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da01      	bge.n	8002532 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002532:	79fb      	ldrb	r3, [r7, #7]
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40022000 	.word	0x40022000
 8002544:	45670123 	.word	0x45670123
 8002548:	cdef89ab 	.word	0xcdef89ab

0800254c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_FLASH_Lock+0x1c>)
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_FLASH_Lock+0x1c>)
 8002556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800255a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_FLASH_OB_Unlock+0x2c>)
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_FLASH_OB_Unlock+0x2c>)
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_FLASH_OB_Unlock+0x30>)
 8002580:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_FLASH_OB_Unlock+0x2c>)
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <HAL_FLASH_OB_Unlock+0x34>)
 8002586:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40022000 	.word	0x40022000
 800259c:	08192a3b 	.word	0x08192a3b
 80025a0:	4c5d6e7f 	.word	0x4c5d6e7f

080025a4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_FLASH_OB_Lock+0x1c>)
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_FLASH_OB_Lock+0x1c>)
 80025ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025b2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40022000 	.word	0x40022000

080025c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fd70 	bl	80020b0 <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80025d2:	e00d      	b.n	80025f0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d009      	beq.n	80025f0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80025dc:	f7ff fd68 	bl	80020b0 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d801      	bhi.n	80025f0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e037      	b.n	8002660 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1eb      	bne.n	80025d4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01e      	beq.n	800264c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <FLASH_WaitForLastOperation+0xa8>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4313      	orrs	r3, r2
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <FLASH_WaitForLastOperation+0xa8>)
 8002618:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <FLASH_WaitForLastOperation+0x70>
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 8002626:	699a      	ldr	r2, [r3, #24]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800262e:	490e      	ldr	r1, [pc, #56]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	618b      	str	r3, [r1, #24]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <FLASH_WaitForLastOperation+0x84>
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002646:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e009      	b.n	8002660 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <FLASH_WaitForLastOperation+0xa4>)
 800265a:	2201      	movs	r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40022000 	.word	0x40022000
 800266c:	2000002c 	.word	0x2000002c

08002670 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <FLASH_Program_DoubleWord+0x48>)
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	4a0d      	ldr	r2, [pc, #52]	; (80026b8 <FLASH_Program_DoubleWord+0x48>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800268e:	f3bf 8f6f 	isb	sy
}
 8002692:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002694:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	000a      	movs	r2, r1
 80026a2:	2300      	movs	r3, #0
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	3104      	adds	r1, #4
 80026a8:	4613      	mov	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40022000 	.word	0x40022000

080026bc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <FLASH_Program_Fast+0x68>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <FLASH_Program_Fast+0x68>)
 80026d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026de:	f3ef 8310 	mrs	r3, PRIMASK
 80026e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80026e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3304      	adds	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3304      	adds	r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
    row_index--;
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	3b01      	subs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002706:	7ffb      	ldrb	r3, [r7, #31]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ef      	bne.n	80026ec <FLASH_Program_Fast+0x30>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002718:	bf00      	nop
 800271a:	3724      	adds	r7, #36	; 0x24
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_FLASHEx_Erase+0x16>
 800273a:	2302      	movs	r3, #2
 800273c:	e087      	b.n	800284e <HAL_FLASHEx_Erase+0x126>
 800273e:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002744:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002748:	f7ff ff3c 	bl	80025c4 <FLASH_WaitForLastOperation>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d177      	bne.n	8002846 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 8002758:	2200      	movs	r2, #0
 800275a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002768:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a38      	ldr	r2, [pc, #224]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 800277a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800277e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 8002782:	2203      	movs	r2, #3
 8002784:	771a      	strb	r2, [r3, #28]
 8002786:	e016      	b.n	80027b6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002788:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 800278a:	2201      	movs	r2, #1
 800278c:	771a      	strb	r2, [r3, #28]
 800278e:	e012      	b.n	80027b6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a2e      	ldr	r2, [pc, #184]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 80027a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 80027aa:	2202      	movs	r2, #2
 80027ac:	771a      	strb	r2, [r3, #28]
 80027ae:	e002      	b.n	80027b6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d113      	bne.n	80027e6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f84c 	bl	8002860 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027cc:	f7ff fefa 	bl	80025c4 <FLASH_WaitForLastOperation>
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4a20      	ldr	r2, [pc, #128]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 80027da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6153      	str	r3, [r2, #20]
 80027e4:	e02d      	b.n	8002842 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	e01d      	b.n	8002832 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4619      	mov	r1, r3
 80027fc:	68b8      	ldr	r0, [r7, #8]
 80027fe:	f000 f857 	bl	80028b0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002806:	f7ff fedd 	bl	80025c4 <FLASH_WaitForLastOperation>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a12      	ldr	r2, [pc, #72]	; (800285c <HAL_FLASHEx_Erase+0x134>)
 8002814:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002818:	f023 0302 	bic.w	r3, r3, #2
 800281c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	601a      	str	r2, [r3, #0]
          break;
 800282a:	e00a      	b.n	8002842 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4413      	add	r3, r2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3d9      	bcc.n	80027f6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002842:	f000 f86b 	bl	800291c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_FLASHEx_Erase+0x130>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]

  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000002c 	.word	0x2000002c
 800285c:	40022000 	.word	0x40022000

08002860 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <FLASH_MassErase+0x4c>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <FLASH_MassErase+0x4c>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <FLASH_MassErase+0x4c>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <FLASH_MassErase+0x4c>)
 800288e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002892:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <FLASH_MassErase+0x4c>)
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	4a04      	ldr	r2, [pc, #16]	; (80028ac <FLASH_MassErase+0x4c>)
 800289a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289e:	6153      	str	r3, [r2, #20]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40022000 	.word	0x40022000

080028b0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <FLASH_PageErase+0x68>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <FLASH_PageErase+0x68>)
 80028ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028ce:	6153      	str	r3, [r2, #20]
 80028d0:	e005      	b.n	80028de <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <FLASH_PageErase+0x68>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <FLASH_PageErase+0x68>)
 80028d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028dc:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <FLASH_PageErase+0x68>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <FLASH_PageErase+0x68>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <FLASH_PageErase+0x68>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <FLASH_PageErase+0x68>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <FLASH_PageErase+0x68>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <FLASH_PageErase+0x68>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6153      	str	r3, [r2, #20]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40022000 	.word	0x40022000

0800291c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002922:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <FLASH_FlushCaches+0x8c>)
 8002924:	7f1b      	ldrb	r3, [r3, #28]
 8002926:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <FLASH_FlushCaches+0x18>
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d117      	bne.n	8002964 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <FLASH_FlushCaches+0x90>)
 800293a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800293e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b17      	ldr	r3, [pc, #92]	; (80029ac <FLASH_FlushCaches+0x90>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a16      	ldr	r2, [pc, #88]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002956:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <FLASH_FlushCaches+0x90>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <FLASH_FlushCaches+0x90>)
 800295e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002962:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d002      	beq.n	8002970 <FLASH_FlushCaches+0x54>
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d111      	bne.n	8002994 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002976:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <FLASH_FlushCaches+0x90>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <FLASH_FlushCaches+0x90>)
 8002982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002986:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <FLASH_FlushCaches+0x90>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <FLASH_FlushCaches+0x90>)
 800298e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002992:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <FLASH_FlushCaches+0x8c>)
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	2000002c 	.word	0x2000002c
 80029ac:	40022000 	.word	0x40022000

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029be:	e17f      	b.n	8002cc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8171 	beq.w	8002cba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d005      	beq.n	80029f0 <HAL_GPIO_Init+0x40>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d130      	bne.n	8002a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a26:	2201      	movs	r2, #1
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	f003 0201 	and.w	r2, r3, #1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d118      	bne.n	8002a90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a64:	2201      	movs	r2, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	08db      	lsrs	r3, r3, #3
 8002a7a:	f003 0201 	and.w	r2, r3, #1
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d017      	beq.n	8002acc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d123      	bne.n	8002b20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	08da      	lsrs	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3208      	adds	r2, #8
 8002ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	220f      	movs	r2, #15
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	08da      	lsrs	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3208      	adds	r2, #8
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0203 	and.w	r2, r3, #3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80ac 	beq.w	8002cba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ba4:	d025      	beq.n	8002bf2 <HAL_GPIO_Init+0x242>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_GPIO_Init+0x338>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x23e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	; (8002cec <HAL_GPIO_Init+0x33c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x23a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	; (8002cf0 <HAL_GPIO_Init+0x340>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x236>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	; (8002cf4 <HAL_GPIO_Init+0x344>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x232>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	; (8002cf8 <HAL_GPIO_Init+0x348>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x22e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4a      	ldr	r2, [pc, #296]	; (8002cfc <HAL_GPIO_Init+0x34c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x22a>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00c      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x244>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c04:	4937      	ldr	r1, [pc, #220]	; (8002ce4 <HAL_GPIO_Init+0x334>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c36:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_GPIO_Init+0x350>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f ae78 	bne.w	80029c0 <HAL_GPIO_Init+0x10>
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	48000400 	.word	0x48000400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000c00 	.word	0x48000c00
 8002cf4:	48001000 	.word	0x48001000
 8002cf8:	48001400 	.word	0x48001400
 8002cfc:	48001800 	.word	0x48001800
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40007000 	.word	0x40007000

08002d20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2e:	d130      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d30:	4b23      	ldr	r3, [pc, #140]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d038      	beq.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2232      	movs	r2, #50	; 0x32
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0c9b      	lsrs	r3, r3, #18
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d64:	e002      	b.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d102      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f2      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8c:	d110      	bne.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e00f      	b.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d007      	beq.n	8002db0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	20000020 	.word	0x20000020
 8002dc8:	431bde83 	.word	0x431bde83

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e3ca      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	4b97      	ldr	r3, [pc, #604]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de8:	4b94      	ldr	r3, [pc, #592]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80e4 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4a>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	f040 808b 	bne.w	8002f24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 8087 	bne.w	8002f24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e16:	4b89      	ldr	r3, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_RCC_OscConfig+0x62>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e3a2      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_RCC_OscConfig+0x7c>
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e46:	e005      	b.n	8002e54 <HAL_RCC_OscConfig+0x88>
 8002e48:	4b7c      	ldr	r3, [pc, #496]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d223      	bcs.n	8002ea0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fd55 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e383      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6c:	4b73      	ldr	r3, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a72      	ldr	r2, [pc, #456]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	496d      	ldr	r1, [pc, #436]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	4968      	ldr	r1, [pc, #416]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e025      	b.n	8002eec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	4960      	ldr	r1, [pc, #384]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ebe:	4b5f      	ldr	r3, [pc, #380]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	495b      	ldr	r1, [pc, #364]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fd15 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e343      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002eec:	f000 fc4a 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	4950      	ldr	r1, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x274>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_RCC_OscConfig+0x278>)
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f0c:	4b4e      	ldr	r3, [pc, #312]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f87d 	bl	8002010 <HAL_InitTick>
 8002f16:	4603      	mov	r3, r0
 8002f18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d052      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	e327      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d032      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a42      	ldr	r2, [pc, #264]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f8ba 	bl	80020b0 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f40:	f7ff f8b6 	bl	80020b0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e310      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	4931      	ldr	r1, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	492c      	ldr	r1, [pc, #176]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e01a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f9e:	f7ff f887 	bl	80020b0 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa6:	f7ff f883 	bl	80020b0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e2dd      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f0      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1da>
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d074      	beq.n	80030be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x21a>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	d10e      	bne.n	8002ffe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d064      	beq.n	80030bc <HAL_RCC_OscConfig+0x2f0>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d160      	bne.n	80030bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e2ba      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x24a>
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0b      	ldr	r2, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x270>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e026      	b.n	8003064 <HAL_RCC_OscConfig+0x298>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301e:	d115      	bne.n	800304c <HAL_RCC_OscConfig+0x280>
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8003026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_OscConfig+0x270>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a02      	ldr	r2, [pc, #8]	; (800303c <HAL_RCC_OscConfig+0x270>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e014      	b.n	8003064 <HAL_RCC_OscConfig+0x298>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
 8003040:	0800aa14 	.word	0x0800aa14
 8003044:	20000020 	.word	0x20000020
 8003048:	20000024 	.word	0x20000024
 800304c:	4ba0      	ldr	r3, [pc, #640]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a9f      	ldr	r2, [pc, #636]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b9d      	ldr	r3, [pc, #628]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a9c      	ldr	r2, [pc, #624]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7ff f820 	bl	80020b0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7ff f81c 	bl	80020b0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e276      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x2a8>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7ff f80c 	bl	80020b0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff f808 	bl	80020b0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e262      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x2d0>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d060      	beq.n	800318c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_OscConfig+0x310>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b0c      	cmp	r3, #12
 80030d4:	d119      	bne.n	800310a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d116      	bne.n	800310a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030dc:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_OscConfig+0x328>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e23f      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	061b      	lsls	r3, r3, #24
 8003102:	4973      	ldr	r1, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	e040      	b.n	800318c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d023      	beq.n	800315a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003112:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe ffc7 	bl	80020b0 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003126:	f7fe ffc3 	bl	80020b0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e21d      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003138:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003144:	4b62      	ldr	r3, [pc, #392]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	495f      	ldr	r1, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	e018      	b.n	800318c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5c      	ldr	r2, [pc, #368]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe ffa3 	bl	80020b0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316e:	f7fe ff9f 	bl	80020b0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1f9      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d03c      	beq.n	8003212 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01c      	beq.n	80031da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80031a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a6:	4a4a      	ldr	r2, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe ff7e 	bl	80020b0 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b8:	f7fe ff7a 	bl	80020b0 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e1d4      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0ef      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
 80031d8:	e01b      	b.n	8003212 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e0:	4a3b      	ldr	r2, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe ff61 	bl	80020b0 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f2:	f7fe ff5d 	bl	80020b0 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e1b7      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1ef      	bne.n	80031f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80a6 	beq.w	800336c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4a26      	ldr	r2, [pc, #152]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	; 0x58
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d118      	bne.n	800328a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003264:	f7fe ff24 	bl	80020b0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326c:	f7fe ff20 	bl	80020b0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e17a      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_RCC_OscConfig+0x508>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4d8>
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a2:	e029      	b.n	80032f8 <HAL_RCC_OscConfig+0x52c>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d115      	bne.n	80032d8 <HAL_RCC_OscConfig+0x50c>
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80032b4:	f043 0304 	orr.w	r3, r3, #4
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x52c>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	4b9c      	ldr	r3, [pc, #624]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	4a9b      	ldr	r2, [pc, #620]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e8:	4b98      	ldr	r3, [pc, #608]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a97      	ldr	r2, [pc, #604]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d016      	beq.n	800332e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe fed6 	bl	80020b0 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe fed2 	bl	80020b0 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e12a      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ed      	beq.n	8003308 <HAL_RCC_OscConfig+0x53c>
 800332c:	e015      	b.n	800335a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fe febf 	bl	80020b0 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fe febb 	bl	80020b0 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e113      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800334c:	4b7f      	ldr	r3, [pc, #508]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ed      	bne.n	8003336 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003360:	4b7a      	ldr	r3, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	4a79      	ldr	r2, [pc, #484]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80fe 	beq.w	8003572 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2b02      	cmp	r3, #2
 800337c:	f040 80d0 	bne.w	8003520 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003380:	4b72      	ldr	r3, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d130      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	3b01      	subs	r3, #1
 80033a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d127      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d11f      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c0:	2a07      	cmp	r2, #7
 80033c2:	bf14      	ite	ne
 80033c4:	2201      	movne	r2, #1
 80033c6:	2200      	moveq	r2, #0
 80033c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d113      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d06e      	beq.n	80034d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d069      	beq.n	80034d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0ad      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a4b      	ldr	r2, [pc, #300]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800341e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003424:	f7fe fe44 	bl	80020b0 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fe40 	bl	80020b0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e09a      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343e:	4b43      	ldr	r3, [pc, #268]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b40      	ldr	r3, [pc, #256]	; (8003550 <HAL_RCC_OscConfig+0x784>)
 8003450:	4013      	ands	r3, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800345a:	3a01      	subs	r2, #1
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003464:	0212      	lsls	r2, r2, #8
 8003466:	4311      	orrs	r1, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	0852      	lsrs	r2, r2, #1
 800346e:	3a01      	subs	r2, #1
 8003470:	0552      	lsls	r2, r2, #21
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003478:	0852      	lsrs	r2, r2, #1
 800347a:	3a01      	subs	r2, #1
 800347c:	0652      	lsls	r2, r2, #25
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003484:	0912      	lsrs	r2, r2, #4
 8003486:	0452      	lsls	r2, r2, #17
 8003488:	430a      	orrs	r2, r1
 800348a:	4930      	ldr	r1, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800348c:	4313      	orrs	r3, r2
 800348e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003490:	4b2e      	ldr	r3, [pc, #184]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2d      	ldr	r2, [pc, #180]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a8:	f7fe fe02 	bl	80020b0 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b0:	f7fe fdfe 	bl	80020b0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e058      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ce:	e050      	b.n	8003572 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e04f      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d148      	bne.n	8003572 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a19      	ldr	r2, [pc, #100]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ec:	4b17      	ldr	r3, [pc, #92]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_RCC_OscConfig+0x780>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034f8:	f7fe fdda 	bl	80020b0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fdd6 	bl	80020b0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e030      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x734>
 800351e:	e028      	b.n	8003572 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d023      	beq.n	800356e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_OscConfig+0x780>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_RCC_OscConfig+0x780>)
 800352c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fdbd 	bl	80020b0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	e00c      	b.n	8003554 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe fdb9 	bl	80020b0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d905      	bls.n	8003554 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e013      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
 800354c:	40021000 	.word	0x40021000
 8003550:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_OscConfig+0x7b0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ec      	bne.n	800353a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_OscConfig+0x7b0>)
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	4905      	ldr	r1, [pc, #20]	; (800357c <HAL_RCC_OscConfig+0x7b0>)
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_OscConfig+0x7b4>)
 8003568:	4013      	ands	r3, r2
 800356a:	60cb      	str	r3, [r1, #12]
 800356c:	e001      	b.n	8003572 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	feeefffc 	.word	0xfeeefffc

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0e7      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b75      	ldr	r3, [pc, #468]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b72      	ldr	r3, [pc, #456]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4970      	ldr	r1, [pc, #448]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b6e      	ldr	r3, [pc, #440]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cf      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d908      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b63      	ldr	r3, [pc, #396]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4960      	ldr	r1, [pc, #384]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d04c      	beq.n	800369c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d121      	bne.n	800365a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0a6      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003622:	4b54      	ldr	r3, [pc, #336]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d115      	bne.n	800365a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e09a      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363a:	4b4e      	ldr	r3, [pc, #312]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e08e      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e086      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4943      	ldr	r1, [pc, #268]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fe fd20 	bl	80020b0 <HAL_GetTick>
 8003670:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	e00a      	b.n	800368a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003674:	f7fe fd1c 	bl	80020b0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e06e      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 020c 	and.w	r2, r3, #12
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1eb      	bne.n	8003674 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d208      	bcs.n	80036ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	492b      	ldr	r1, [pc, #172]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ca:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d210      	bcs.n	80036fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 0207 	bic.w	r2, r3, #7
 80036e0:	4923      	ldr	r1, [pc, #140]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e8:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_ClockConfig+0x1ec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e036      	b.n	8003768 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4918      	ldr	r1, [pc, #96]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4910      	ldr	r1, [pc, #64]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003738:	f000 f824 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	490b      	ldr	r1, [pc, #44]	; (8003778 <HAL_RCC_ClockConfig+0x1f4>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	fa22 f303 	lsr.w	r3, r2, r3
 8003754:	4a09      	ldr	r2, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1f8>)
 8003756:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_ClockConfig+0x1fc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fc57 	bl	8002010 <HAL_InitTick>
 8003762:	4603      	mov	r3, r0
 8003764:	72fb      	strb	r3, [r7, #11]

  return status;
 8003766:	7afb      	ldrb	r3, [r7, #11]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40022000 	.word	0x40022000
 8003774:	40021000 	.word	0x40021000
 8003778:	0800aa14 	.word	0x0800aa14
 800377c:	20000020 	.word	0x20000020
 8003780:	20000024 	.word	0x20000024

08003784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003792:	4b3e      	ldr	r3, [pc, #248]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379c:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x34>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b0c      	cmp	r3, #12
 80037b0:	d121      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d11e      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037b8:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	0a1b      	lsrs	r3, r3, #8
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e005      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037d4:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037e0:	4a2b      	ldr	r2, [pc, #172]	; (8003890 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037f4:	e00a      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_GetSysClockFreq+0x110>)
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	e004      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d101      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <HAL_RCC_GetSysClockFreq+0x114>)
 800380a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d134      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0xa6>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d003      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0xac>
 8003828:	e005      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <HAL_RCC_GetSysClockFreq+0x110>)
 800382c:	617b      	str	r3, [r7, #20]
      break;
 800382e:	e005      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_GetSysClockFreq+0x114>)
 8003832:	617b      	str	r3, [r7, #20]
      break;
 8003834:	e002      	b.n	800383c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	617b      	str	r3, [r7, #20]
      break;
 800383a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	3301      	adds	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	fb03 f202 	mul.w	r2, r3, r2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	0e5b      	lsrs	r3, r3, #25
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	3301      	adds	r3, #1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	fbb2 f3f3 	udiv	r3, r2, r3
 800387a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800387c:	69bb      	ldr	r3, [r7, #24]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	; 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	0800aa2c 	.word	0x0800aa2c
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000020 	.word	0x20000020

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800aa24 	.word	0x0800aa24

080038e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038e4:	f7ff ffda 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0adb      	lsrs	r3, r3, #11
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4904      	ldr	r1, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000
 8003908:	0800aa24 	.word	0x0800aa24

0800390c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003924:	f7ff f9ee 	bl	8002d04 <HAL_PWREx_GetVoltageRange>
 8003928:	6178      	str	r0, [r7, #20]
 800392a:	e014      	b.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6593      	str	r3, [r2, #88]	; 0x58
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003944:	f7ff f9de 	bl	8002d04 <HAL_PWREx_GetVoltageRange>
 8003948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d10b      	bne.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d919      	bls.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2ba0      	cmp	r3, #160	; 0xa0
 8003968:	d902      	bls.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800396a:	2302      	movs	r3, #2
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e013      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003970:	2301      	movs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e010      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d902      	bls.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800397c:	2303      	movs	r3, #3
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e00a      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d102      	bne.n	800398e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003988:	2302      	movs	r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	e004      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b70      	cmp	r3, #112	; 0x70
 8003992:	d101      	bne.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003994:	2301      	movs	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	4909      	ldr	r1, [pc, #36]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40022000 	.word	0x40022000

080039cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039d4:	2300      	movs	r3, #0
 80039d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039d8:	2300      	movs	r3, #0
 80039da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d041      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039f0:	d02a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039f6:	d824      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039fc:	d008      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a02:	d81e      	bhi.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0c:	d010      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a0e:	e018      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a10:	4b86      	ldr	r3, [pc, #536]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a85      	ldr	r2, [pc, #532]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a1c:	e015      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fabb 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a2e:	e00c      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3320      	adds	r3, #32
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fba6 	bl	8004188 <RCCEx_PLLSAI2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	74fb      	strb	r3, [r7, #19]
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a50:	4b76      	ldr	r3, [pc, #472]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	4973      	ldr	r1, [pc, #460]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a66:	e001      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d041      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a80:	d02a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a86:	d824      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a92:	d81e      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a9e:	e018      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aa0:	4b62      	ldr	r3, [pc, #392]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aaa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aac:	e015      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fa73 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003abe:	e00c      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3320      	adds	r3, #32
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb5e 	bl	8004188 <RCCEx_PLLSAI2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ad0:	e003      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ae0:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aee:	494f      	ldr	r1, [pc, #316]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003af6:	e001      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a0 	beq.w	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b30:	4b3e      	ldr	r3, [pc, #248]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b40:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a3a      	ldr	r2, [pc, #232]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4c:	f7fe fab0 	bl	80020b0 <HAL_GetTick>
 8003b50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe faac 	bl	80020b0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	74fb      	strb	r3, [r7, #19]
        break;
 8003b66:	e005      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b68:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d15c      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01f      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d019      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fa6b 	bl	80020b0 <HAL_GetTick>
 8003bda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bdc:	e00b      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe fa67 	bl	80020b0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d902      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	74fb      	strb	r3, [r7, #19]
            break;
 8003bf4:	e006      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ec      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1a:	4904      	ldr	r1, [pc, #16]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c22:	e009      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
 8003c28:	e006      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7cfb      	ldrb	r3, [r7, #19]
 8003c36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c38:	7c7b      	ldrb	r3, [r7, #17]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3e:	4b9e      	ldr	r3, [pc, #632]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	4a9d      	ldr	r2, [pc, #628]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c56:	4b98      	ldr	r3, [pc, #608]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f023 0203 	bic.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	4994      	ldr	r1, [pc, #592]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c78:	4b8f      	ldr	r3, [pc, #572]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f023 020c 	bic.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	498c      	ldr	r1, [pc, #560]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c9a:	4b87      	ldr	r3, [pc, #540]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca8:	4983      	ldr	r1, [pc, #524]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00a      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cbc:	4b7e      	ldr	r3, [pc, #504]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	497b      	ldr	r1, [pc, #492]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cde:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cec:	4972      	ldr	r1, [pc, #456]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d00:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	496a      	ldr	r1, [pc, #424]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d22:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	4961      	ldr	r1, [pc, #388]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d44:	4b5c      	ldr	r3, [pc, #368]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d52:	4959      	ldr	r1, [pc, #356]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d66:	4b54      	ldr	r3, [pc, #336]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d74:	4950      	ldr	r1, [pc, #320]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d88:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	4948      	ldr	r1, [pc, #288]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003daa:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db8:	493f      	ldr	r1, [pc, #252]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d028      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	4937      	ldr	r1, [pc, #220]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a31      	ldr	r2, [pc, #196]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
 8003df8:	e011      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f8c8 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d028      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	491f      	ldr	r1, [pc, #124]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e48:	d106      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e4a:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e54:	60d3      	str	r3, [r2, #12]
 8003e56:	e011      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f899 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a02      	ldr	r2, [pc, #8]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb2:	60d3      	str	r3, [r2, #12]
 8003eb4:	e014      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f867 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eec:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efa:	4928      	ldr	r1, [pc, #160]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f0a:	d10d      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f844 	bl	8003fa0 <RCCEx_PLLSAI1_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d014      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	74bb      	strb	r3, [r7, #18]
 8003f26:	e011      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3320      	adds	r3, #32
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f925 	bl	8004188 <RCCEx_PLLSAI2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f66:	490d      	ldr	r1, [pc, #52]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	4904      	ldr	r1, [pc, #16]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000

08003fa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fae:	4b75      	ldr	r3, [pc, #468]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fba:	4b72      	ldr	r3, [pc, #456]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0203 	and.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d10d      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d047      	beq.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	e044      	b.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d018      	beq.n	8004026 <RCCEx_PLLSAI1_Config+0x86>
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d825      	bhi.n	8004044 <RCCEx_PLLSAI1_Config+0xa4>
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d002      	beq.n	8004002 <RCCEx_PLLSAI1_Config+0x62>
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d009      	beq.n	8004014 <RCCEx_PLLSAI1_Config+0x74>
 8004000:	e020      	b.n	8004044 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004002:	4b60      	ldr	r3, [pc, #384]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004012:	e01a      	b.n	800404a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004014:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004024:	e013      	b.n	800404e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004026:	4b57      	ldr	r3, [pc, #348]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004032:	4b54      	ldr	r3, [pc, #336]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004042:	e006      	b.n	8004052 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      break;
 8004048:	e004      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004052:	bf00      	nop
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800405a:	4b4a      	ldr	r3, [pc, #296]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	430b      	orrs	r3, r1
 8004070:	4944      	ldr	r1, [pc, #272]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d17d      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a40      	ldr	r2, [pc, #256]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004082:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004088:	f7fe f812 	bl	80020b0 <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800408e:	e009      	b.n	80040a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004090:	f7fe f80e 	bl	80020b0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	73fb      	strb	r3, [r7, #15]
        break;
 80040a2:	e005      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040a4:	4b37      	ldr	r3, [pc, #220]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ef      	bne.n	8004090 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d160      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6892      	ldr	r2, [r2, #8]
 80040cc:	0211      	lsls	r1, r2, #8
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	0912      	lsrs	r2, r2, #4
 80040d4:	0452      	lsls	r2, r2, #17
 80040d6:	430a      	orrs	r2, r1
 80040d8:	492a      	ldr	r1, [pc, #168]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
 80040de:	e027      	b.n	8004130 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d112      	bne.n	800410c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e6:	4b27      	ldr	r3, [pc, #156]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6892      	ldr	r2, [r2, #8]
 80040f6:	0211      	lsls	r1, r2, #8
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6912      	ldr	r2, [r2, #16]
 80040fc:	0852      	lsrs	r2, r2, #1
 80040fe:	3a01      	subs	r2, #1
 8004100:	0552      	lsls	r2, r2, #21
 8004102:	430a      	orrs	r2, r1
 8004104:	491f      	ldr	r1, [pc, #124]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]
 800410a:	e011      	b.n	8004130 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004114:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6892      	ldr	r2, [r2, #8]
 800411c:	0211      	lsls	r1, r2, #8
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6952      	ldr	r2, [r2, #20]
 8004122:	0852      	lsrs	r2, r2, #1
 8004124:	3a01      	subs	r2, #1
 8004126:	0652      	lsls	r2, r2, #25
 8004128:	430a      	orrs	r2, r1
 800412a:	4916      	ldr	r1, [pc, #88]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	4313      	orrs	r3, r2
 800412e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004130:	4b14      	ldr	r3, [pc, #80]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a13      	ldr	r2, [pc, #76]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800413a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd ffb8 	bl	80020b0 <HAL_GetTick>
 8004140:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004142:	e009      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004144:	f7fd ffb4 	bl	80020b0 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	73fb      	strb	r3, [r7, #15]
          break;
 8004156:	e005      	b.n	8004164 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0ef      	beq.n	8004144 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	4904      	ldr	r1, [pc, #16]	; (8004184 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	4313      	orrs	r3, r2
 8004176:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004196:	4b6a      	ldr	r3, [pc, #424]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041a2:	4b67      	ldr	r3, [pc, #412]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f003 0203 	and.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d10d      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
       ||
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ba:	4b61      	ldr	r3, [pc, #388]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
       ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d047      	beq.n	800425e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	73fb      	strb	r3, [r7, #15]
 80041d2:	e044      	b.n	800425e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d018      	beq.n	800420e <RCCEx_PLLSAI2_Config+0x86>
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d825      	bhi.n	800422c <RCCEx_PLLSAI2_Config+0xa4>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d002      	beq.n	80041ea <RCCEx_PLLSAI2_Config+0x62>
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d009      	beq.n	80041fc <RCCEx_PLLSAI2_Config+0x74>
 80041e8:	e020      	b.n	800422c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ea:	4b55      	ldr	r3, [pc, #340]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041fa:	e01a      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041fc:	4b50      	ldr	r3, [pc, #320]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d116      	bne.n	8004236 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420c:	e013      	b.n	8004236 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800420e:	4b4c      	ldr	r3, [pc, #304]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800421a:	4b49      	ldr	r3, [pc, #292]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800422a:	e006      	b.n	800423a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	e004      	b.n	800423c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800423a:	bf00      	nop
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004242:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	3b01      	subs	r3, #1
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	430b      	orrs	r3, r1
 8004258:	4939      	ldr	r1, [pc, #228]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d167      	bne.n	8004334 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004264:	4b36      	ldr	r3, [pc, #216]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a35      	ldr	r2, [pc, #212]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fd ff1e 	bl	80020b0 <HAL_GetTick>
 8004274:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004276:	e009      	b.n	800428c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004278:	f7fd ff1a 	bl	80020b0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d902      	bls.n	800428c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	73fb      	strb	r3, [r7, #15]
        break;
 800428a:	e005      	b.n	8004298 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ef      	bne.n	8004278 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d14a      	bne.n	8004334 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d111      	bne.n	80042c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042a4:	4b26      	ldr	r3, [pc, #152]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	0211      	lsls	r1, r2, #8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68d2      	ldr	r2, [r2, #12]
 80042ba:	0912      	lsrs	r2, r2, #4
 80042bc:	0452      	lsls	r2, r2, #17
 80042be:	430a      	orrs	r2, r1
 80042c0:	491f      	ldr	r1, [pc, #124]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	614b      	str	r3, [r1, #20]
 80042c6:	e011      	b.n	80042ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6892      	ldr	r2, [r2, #8]
 80042d8:	0211      	lsls	r1, r2, #8
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6912      	ldr	r2, [r2, #16]
 80042de:	0852      	lsrs	r2, r2, #1
 80042e0:	3a01      	subs	r2, #1
 80042e2:	0652      	lsls	r2, r2, #25
 80042e4:	430a      	orrs	r2, r1
 80042e6:	4916      	ldr	r1, [pc, #88]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fd feda 	bl	80020b0 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042fe:	e009      	b.n	8004314 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004300:	f7fd fed6 	bl	80020b0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d902      	bls.n	8004314 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	73fb      	strb	r3, [r7, #15]
          break;
 8004312:	e005      	b.n	8004320 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ef      	beq.n	8004300 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4904      	ldr	r1, [pc, #16]	; (8004340 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	4313      	orrs	r3, r2
 8004332:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e049      	b.n	80043ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fba6 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fbee 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e049      	b.n	8004498 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd fb0d 	bl	8001a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	4619      	mov	r1, r3
 8004430:	4610      	mov	r0, r2
 8004432:	f000 fb97 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e049      	b.n	8004546 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f841 	bl	800454e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4619      	mov	r1, r3
 80044de:	4610      	mov	r0, r2
 80044e0:	f000 fb40 	bl	8004b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d122      	bne.n	80045be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d11b      	bne.n	80045be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f06f 0202 	mvn.w	r2, #2
 800458e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fabf 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80045aa:	e005      	b.n	80045b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fab1 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fac2 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d122      	bne.n	8004612 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d11b      	bne.n	8004612 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0204 	mvn.w	r2, #4
 80045e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa95 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80045fe:	e005      	b.n	800460c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa87 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa98 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b08      	cmp	r3, #8
 800461e:	d122      	bne.n	8004666 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d11b      	bne.n	8004666 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f06f 0208 	mvn.w	r2, #8
 8004636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fa6b 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 8004652:	e005      	b.n	8004660 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa5d 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa6e 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b10      	cmp	r3, #16
 8004672:	d122      	bne.n	80046ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b10      	cmp	r3, #16
 8004680:	d11b      	bne.n	80046ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f06f 0210 	mvn.w	r2, #16
 800468a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2208      	movs	r2, #8
 8004690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fa41 	bl	8004b28 <HAL_TIM_IC_CaptureCallback>
 80046a6:	e005      	b.n	80046b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa33 	bl	8004b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa44 	bl	8004b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10e      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0201 	mvn.w	r2, #1
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fa0d 	bl	8004b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d10e      	bne.n	8004712 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d107      	bne.n	8004712 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800470a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 ff4f 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004720:	d10e      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b80      	cmp	r3, #128	; 0x80
 800472e:	d107      	bne.n	8004740 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 ff42 	bl	80055c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d10e      	bne.n	800476c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d107      	bne.n	800476c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9f2 	bl	8004b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b20      	cmp	r3, #32
 8004778:	d10e      	bne.n	8004798 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b20      	cmp	r3, #32
 8004786:	d107      	bne.n	8004798 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0220 	mvn.w	r2, #32
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 ff02 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_TIM_IC_ConfigChannel+0x1e>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e088      	b.n	80048d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d11b      	bne.n	8004804 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fd32 	bl	8005244 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 020c 	bic.w	r2, r2, #12
 80047ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	619a      	str	r2, [r3, #24]
 8004802:	e060      	b.n	80048c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d11c      	bne.n	8004844 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f000 fd81 	bl	8005320 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800482c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	021a      	lsls	r2, r3, #8
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	619a      	str	r2, [r3, #24]
 8004842:	e040      	b.n	80048c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11b      	bne.n	8004882 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f000 fd9e 	bl	800539a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 020c 	bic.w	r2, r2, #12
 800486c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69d9      	ldr	r1, [r3, #28]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	61da      	str	r2, [r3, #28]
 8004880:	e021      	b.n	80048c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d11c      	bne.n	80048c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f000 fdbb 	bl	8005412 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69d9      	ldr	r1, [r3, #28]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	021a      	lsls	r2, r3, #8
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	61da      	str	r2, [r3, #28]
 80048c0:	e001      	b.n	80048c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0ff      	b.n	8004af6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b14      	cmp	r3, #20
 8004902:	f200 80f0 	bhi.w	8004ae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004961 	.word	0x08004961
 8004910:	08004ae7 	.word	0x08004ae7
 8004914:	08004ae7 	.word	0x08004ae7
 8004918:	08004ae7 	.word	0x08004ae7
 800491c:	080049a1 	.word	0x080049a1
 8004920:	08004ae7 	.word	0x08004ae7
 8004924:	08004ae7 	.word	0x08004ae7
 8004928:	08004ae7 	.word	0x08004ae7
 800492c:	080049e3 	.word	0x080049e3
 8004930:	08004ae7 	.word	0x08004ae7
 8004934:	08004ae7 	.word	0x08004ae7
 8004938:	08004ae7 	.word	0x08004ae7
 800493c:	08004a23 	.word	0x08004a23
 8004940:	08004ae7 	.word	0x08004ae7
 8004944:	08004ae7 	.word	0x08004ae7
 8004948:	08004ae7 	.word	0x08004ae7
 800494c:	08004a65 	.word	0x08004a65
 8004950:	08004ae7 	.word	0x08004ae7
 8004954:	08004ae7 	.word	0x08004ae7
 8004958:	08004ae7 	.word	0x08004ae7
 800495c:	08004aa5 	.word	0x08004aa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f996 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0204 	bic.w	r2, r2, #4
 800498a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6999      	ldr	r1, [r3, #24]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	619a      	str	r2, [r3, #24]
      break;
 800499e:	e0a5      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fa06 	bl	8004db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6999      	ldr	r1, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]
      break;
 80049e0:	e084      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fa6f 	bl	8004ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0208 	orr.w	r2, r2, #8
 80049fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0204 	bic.w	r2, r2, #4
 8004a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69d9      	ldr	r1, [r3, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	61da      	str	r2, [r3, #28]
      break;
 8004a20:	e064      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fad7 	bl	8004fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69d9      	ldr	r1, [r3, #28]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	021a      	lsls	r2, r3, #8
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	61da      	str	r2, [r3, #28]
      break;
 8004a62:	e043      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fb20 	bl	80050b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0204 	bic.w	r2, r2, #4
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aa2:	e023      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb64 	bl	8005178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ae4:	e002      	b.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop

08004b00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a40      	ldr	r2, [pc, #256]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d00f      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3d      	ldr	r2, [pc, #244]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3c      	ldr	r2, [pc, #240]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d108      	bne.n	8004bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01f      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d01b      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <TIM_Base_SetConfig+0x118>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d017      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <TIM_Base_SetConfig+0x11c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <TIM_Base_SetConfig+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a29      	ldr	r2, [pc, #164]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <TIM_Base_SetConfig+0x114>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <TIM_Base_SetConfig+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a11      	ldr	r2, [pc, #68]	; (8004c8c <TIM_Base_SetConfig+0x128>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <TIM_Base_SetConfig+0x12c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0f      	ldr	r2, [pc, #60]	; (8004c94 <TIM_Base_SetConfig+0x130>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800
 8004c84:	40000c00 	.word	0x40000c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0302 	bic.w	r3, r3, #2
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <TIM_OC1_SetConfig+0x10c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00f      	beq.n	8004d18 <TIM_OC1_SetConfig+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <TIM_OC1_SetConfig+0x110>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_OC1_SetConfig+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <TIM_OC1_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_OC1_SetConfig+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <TIM_OC1_SetConfig+0x118>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_OC1_SetConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <TIM_OC1_SetConfig+0x11c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d10c      	bne.n	8004d32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0308 	bic.w	r3, r3, #8
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a1b      	ldr	r2, [pc, #108]	; (8004da4 <TIM_OC1_SetConfig+0x10c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_OC1_SetConfig+0xc2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1a      	ldr	r2, [pc, #104]	; (8004da8 <TIM_OC1_SetConfig+0x110>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_OC1_SetConfig+0xc2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a19      	ldr	r2, [pc, #100]	; (8004dac <TIM_OC1_SetConfig+0x114>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_OC1_SetConfig+0xc2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <TIM_OC1_SetConfig+0x118>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_OC1_SetConfig+0xc2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <TIM_OC1_SetConfig+0x11c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d111      	bne.n	8004d7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0210 	bic.w	r2, r3, #16
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f023 0320 	bic.w	r3, r3, #32
 8004e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a28      	ldr	r2, [pc, #160]	; (8004eb8 <TIM_OC2_SetConfig+0x100>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC2_SetConfig+0x6c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a27      	ldr	r2, [pc, #156]	; (8004ebc <TIM_OC2_SetConfig+0x104>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10d      	bne.n	8004e40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <TIM_OC2_SetConfig+0x100>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_OC2_SetConfig+0xb0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <TIM_OC2_SetConfig+0x104>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_OC2_SetConfig+0xb0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <TIM_OC2_SetConfig+0x108>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_OC2_SetConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <TIM_OC2_SetConfig+0x10c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <TIM_OC2_SetConfig+0x110>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40013400 	.word	0x40013400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800

08004ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0303 	bic.w	r3, r3, #3
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a27      	ldr	r2, [pc, #156]	; (8004fc8 <TIM_OC3_SetConfig+0xfc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_OC3_SetConfig+0x6a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a26      	ldr	r2, [pc, #152]	; (8004fcc <TIM_OC3_SetConfig+0x100>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d10d      	bne.n	8004f52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <TIM_OC3_SetConfig+0xfc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_OC3_SetConfig+0xae>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <TIM_OC3_SetConfig+0x100>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_OC3_SetConfig+0xae>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <TIM_OC3_SetConfig+0x104>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_OC3_SetConfig+0xae>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <TIM_OC3_SetConfig+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_OC3_SetConfig+0xae>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <TIM_OC3_SetConfig+0x10c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a18      	ldr	r2, [pc, #96]	; (800509c <TIM_OC4_SetConfig+0xc0>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00f      	beq.n	8005060 <TIM_OC4_SetConfig+0x84>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <TIM_OC4_SetConfig+0xc4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00b      	beq.n	8005060 <TIM_OC4_SetConfig+0x84>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <TIM_OC4_SetConfig+0xc8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d007      	beq.n	8005060 <TIM_OC4_SetConfig+0x84>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <TIM_OC4_SetConfig+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_OC4_SetConfig+0x84>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <TIM_OC4_SetConfig+0xd0>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a17      	ldr	r2, [pc, #92]	; (8005164 <TIM_OC5_SetConfig+0xb4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_OC5_SetConfig+0x7a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a16      	ldr	r2, [pc, #88]	; (8005168 <TIM_OC5_SetConfig+0xb8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_OC5_SetConfig+0x7a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <TIM_OC5_SetConfig+0xbc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_OC5_SetConfig+0x7a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a14      	ldr	r2, [pc, #80]	; (8005170 <TIM_OC5_SetConfig+0xc0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_OC5_SetConfig+0x7a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a13      	ldr	r2, [pc, #76]	; (8005174 <TIM_OC5_SetConfig+0xc4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d109      	bne.n	800513e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	621a      	str	r2, [r3, #32]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40014000 	.word	0x40014000
 8005170:	40014400 	.word	0x40014400
 8005174:	40014800 	.word	0x40014800

08005178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	021b      	lsls	r3, r3, #8
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	051b      	lsls	r3, r3, #20
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a18      	ldr	r2, [pc, #96]	; (8005230 <TIM_OC6_SetConfig+0xb8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00f      	beq.n	80051f4 <TIM_OC6_SetConfig+0x7c>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a17      	ldr	r2, [pc, #92]	; (8005234 <TIM_OC6_SetConfig+0xbc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00b      	beq.n	80051f4 <TIM_OC6_SetConfig+0x7c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <TIM_OC6_SetConfig+0xc0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <TIM_OC6_SetConfig+0x7c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <TIM_OC6_SetConfig+0xc4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d003      	beq.n	80051f4 <TIM_OC6_SetConfig+0x7c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_OC6_SetConfig+0xc8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d109      	bne.n	8005208 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40013400 	.word	0x40013400
 8005238:	40014000 	.word	0x40014000
 800523c:	40014400 	.word	0x40014400
 8005240:	40014800 	.word	0x40014800

08005244 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f023 0201 	bic.w	r2, r3, #1
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_TI1_SetConfig+0xc4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d017      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005278:	d013      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	4a23      	ldr	r2, [pc, #140]	; (800530c <TIM_TI1_SetConfig+0xc8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00f      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <TIM_TI1_SetConfig+0xcc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00b      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <TIM_TI1_SetConfig+0xd0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4a20      	ldr	r2, [pc, #128]	; (8005318 <TIM_TI1_SetConfig+0xd4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_TI1_SetConfig+0x5e>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <TIM_TI1_SetConfig+0xd8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <TIM_TI1_SetConfig+0x62>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <TIM_TI1_SetConfig+0x64>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d008      	beq.n	80052be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e003      	b.n	80052c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f023 030a 	bic.w	r3, r3, #10
 80052e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f003 030a 	and.w	r3, r3, #10
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40012c00 	.word	0x40012c00
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000

08005320 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0210 	bic.w	r2, r3, #16
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800535e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	031b      	lsls	r3, r3, #12
 8005364:	b29b      	uxth	r3, r3
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005372:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005412:	b480      	push	{r7}
 8005414:	b087      	sub	sp, #28
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	021b      	lsls	r3, r3, #8
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	b29b      	uxth	r3, r3
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	621a      	str	r2, [r3, #32]
}
 8005480:	bf00      	nop
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e068      	b.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d108      	bne.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1e      	ldr	r2, [pc, #120]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01d      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d018      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1b      	ldr	r2, [pc, #108]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1a      	ldr	r2, [pc, #104]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00e      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d009      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d004      	beq.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a14      	ldr	r2, [pc, #80]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10c      	bne.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	4313      	orrs	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40014000 	.word	0x40014000

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e040      	b.n	800566c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc fae0 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fbc2 	bl	8005da0 <UART_SetConfig>
 800561c:	4603      	mov	r3, r0
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e022      	b.n	800566c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fe6e 	bl	8006310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fef5 	bl	8006454 <UART_CheckIdleState>
 800566a:	4603      	mov	r3, r0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	2b20      	cmp	r3, #32
 800568a:	f040 8082 	bne.w	8005792 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_UART_Transmit+0x26>
 8005694:	88fb      	ldrh	r3, [r7, #6]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e07a      	b.n	8005794 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_UART_Transmit+0x38>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e073      	b.n	8005794 <HAL_UART_Transmit+0x120>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2221      	movs	r2, #33	; 0x21
 80056c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056c2:	f7fc fcf5 	bl	80020b0 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e0:	d108      	bne.n	80056f4 <HAL_UART_Transmit+0x80>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	61bb      	str	r3, [r7, #24]
 80056f2:	e003      	b.n	80056fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005704:	e02d      	b.n	8005762 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fee8 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e039      	b.n	8005794 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	881a      	ldrh	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005732:	b292      	uxth	r2, r2
 8005734:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
 800573c:	e008      	b.n	8005750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	781a      	ldrb	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	b292      	uxth	r2, r2
 8005748:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cb      	bne.n	8005706 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	2140      	movs	r1, #64	; 0x40
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 feb4 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e005      	b.n	8005794 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	e000      	b.n	8005794 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
  }
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b0ba      	sub	sp, #232	; 0xe8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80057ca:	4013      	ands	r3, r2
 80057cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d115      	bne.n	8005804 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00f      	beq.n	8005804 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 82a6 	beq.w	8005d46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	4798      	blx	r3
      }
      return;
 8005802:	e2a0      	b.n	8005d46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005804:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8117 	beq.w	8005a3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800580e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800581a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800581e:	4b85      	ldr	r3, [pc, #532]	; (8005a34 <HAL_UART_IRQHandler+0x298>)
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 810a 	beq.w	8005a3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d011      	beq.n	8005858 <HAL_UART_IRQHandler+0xbc>
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800584e:	f043 0201 	orr.w	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d011      	beq.n	8005888 <HAL_UART_IRQHandler+0xec>
 8005864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2202      	movs	r2, #2
 8005876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800587e:	f043 0204 	orr.w	r2, r3, #4
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d011      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
 8005894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2204      	movs	r2, #4
 80058a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ae:	f043 0202 	orr.w	r2, r3, #2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2208      	movs	r2, #8
 80058e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ea:	f043 0208 	orr.w	r2, r3, #8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d012      	beq.n	8005926 <HAL_UART_IRQHandler+0x18a>
 8005900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005904:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 820c 	beq.w	8005d4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800593e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d007      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d005      	beq.n	800597e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04f      	beq.n	8005a1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fe75 	bl	800666e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d141      	bne.n	8005a16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3308      	adds	r3, #8
 80059ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d9      	bne.n	8005992 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d013      	beq.n	8005a0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <HAL_UART_IRQHandler+0x29c>)
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fc fcdb 	bl	80023ae <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d017      	beq.n	8005a2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00f      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9b0 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e00b      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f9ac 	bl	8005d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	e007      	b.n	8005a2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9a8 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a2c:	e18d      	b.n	8005d4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2e:	bf00      	nop
    return;
 8005a30:	e18b      	b.n	8005d4a <HAL_UART_IRQHandler+0x5ae>
 8005a32:	bf00      	nop
 8005a34:	04000120 	.word	0x04000120
 8005a38:	08006735 	.word	0x08006735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 8146 	bne.w	8005cd2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 813f 	beq.w	8005cd2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8138 	beq.w	8005cd2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2210      	movs	r2, #16
 8005a68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	f040 80b4 	bne.w	8005be2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 815f 	beq.w	8005d4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f080 8157 	bcs.w	8005d4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8085 	bne.w	8005bc6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1da      	bne.n	8005abc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3308      	adds	r3, #8
 8005b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e1      	bne.n	8005b06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3308      	adds	r3, #8
 8005b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e3      	bne.n	8005b42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005baa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e4      	bne.n	8005b86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fc fbb6 	bl	8002332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f8d4 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be0:	e0b5      	b.n	8005d4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a7 	beq.w	8005d52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80a2 	beq.w	8005d52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c30:	647b      	str	r3, [r7, #68]	; 0x44
 8005c32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e4      	bne.n	8005c0e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	623b      	str	r3, [r7, #32]
   return(result);
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3308      	adds	r3, #8
 8005c64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c68:	633a      	str	r2, [r7, #48]	; 0x30
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e3      	bne.n	8005c44 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0310 	bic.w	r3, r3, #16
 8005ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	69b9      	ldr	r1, [r7, #24]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e4      	bne.n	8005c8e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc8:	4619      	mov	r1, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f85c 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cd0:	e03f      	b.n	8005d52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <HAL_UART_IRQHandler+0x560>
 8005cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fd5d 	bl	80067b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cfa:	e02d      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01c      	beq.n	8005d56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
    }
    return;
 8005d24:	e017      	b.n	8005d56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d012      	beq.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
 8005d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00c      	beq.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fd0e 	bl	8006760 <UART_EndTransmit_IT>
    return;
 8005d44:	e008      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d46:	bf00      	nop
 8005d48:	e006      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005d4a:	bf00      	nop
 8005d4c:	e004      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005d56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d58:	37e8      	adds	r7, #232	; 0xe8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop

08005d60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da4:	b08a      	sub	sp, #40	; 0x28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4ba4      	ldr	r3, [pc, #656]	; (8006060 <UART_SetConfig+0x2c0>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a99      	ldr	r2, [pc, #612]	; (8006064 <UART_SetConfig+0x2c4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a90      	ldr	r2, [pc, #576]	; (8006068 <UART_SetConfig+0x2c8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d126      	bne.n	8005e78 <UART_SetConfig+0xd8>
 8005e2a:	4b90      	ldr	r3, [pc, #576]	; (800606c <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0xd0>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0xa0>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e51 	.word	0x08005e51
 8005e44:	08005e61 	.word	0x08005e61
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e116      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e112      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e10e      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e10a      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e106      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a7c      	ldr	r2, [pc, #496]	; (8006070 <UART_SetConfig+0x2d0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d138      	bne.n	8005ef4 <UART_SetConfig+0x154>
 8005e82:	4b7a      	ldr	r3, [pc, #488]	; (800606c <UART_SetConfig+0x2cc>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b0c      	cmp	r3, #12
 8005e8e:	d82d      	bhi.n	8005eec <UART_SetConfig+0x14c>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0xf8>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ecd 	.word	0x08005ecd
 8005e9c:	08005eed 	.word	0x08005eed
 8005ea0:	08005eed 	.word	0x08005eed
 8005ea4:	08005eed 	.word	0x08005eed
 8005ea8:	08005edd 	.word	0x08005edd
 8005eac:	08005eed 	.word	0x08005eed
 8005eb0:	08005eed 	.word	0x08005eed
 8005eb4:	08005eed 	.word	0x08005eed
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005eed 	.word	0x08005eed
 8005ec0:	08005eed 	.word	0x08005eed
 8005ec4:	08005eed 	.word	0x08005eed
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e0d8      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eda:	e0d4      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005edc:	2304      	movs	r3, #4
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee2:	e0d0      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eea:	e0cc      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e0c8      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a5e      	ldr	r2, [pc, #376]	; (8006074 <UART_SetConfig+0x2d4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d125      	bne.n	8005f4a <UART_SetConfig+0x1aa>
 8005efe:	4b5b      	ldr	r3, [pc, #364]	; (800606c <UART_SetConfig+0x2cc>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d016      	beq.n	8005f3a <UART_SetConfig+0x19a>
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d818      	bhi.n	8005f42 <UART_SetConfig+0x1a2>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d00a      	beq.n	8005f2a <UART_SetConfig+0x18a>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d814      	bhi.n	8005f42 <UART_SetConfig+0x1a2>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d002      	beq.n	8005f22 <UART_SetConfig+0x182>
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d008      	beq.n	8005f32 <UART_SetConfig+0x192>
 8005f20:	e00f      	b.n	8005f42 <UART_SetConfig+0x1a2>
 8005f22:	2300      	movs	r3, #0
 8005f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f28:	e0ad      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f30:	e0a9      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f32:	2304      	movs	r3, #4
 8005f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f38:	e0a5      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f40:	e0a1      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f42:	2310      	movs	r3, #16
 8005f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f48:	e09d      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a4a      	ldr	r2, [pc, #296]	; (8006078 <UART_SetConfig+0x2d8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d125      	bne.n	8005fa0 <UART_SetConfig+0x200>
 8005f54:	4b45      	ldr	r3, [pc, #276]	; (800606c <UART_SetConfig+0x2cc>)
 8005f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f60:	d016      	beq.n	8005f90 <UART_SetConfig+0x1f0>
 8005f62:	2bc0      	cmp	r3, #192	; 0xc0
 8005f64:	d818      	bhi.n	8005f98 <UART_SetConfig+0x1f8>
 8005f66:	2b80      	cmp	r3, #128	; 0x80
 8005f68:	d00a      	beq.n	8005f80 <UART_SetConfig+0x1e0>
 8005f6a:	2b80      	cmp	r3, #128	; 0x80
 8005f6c:	d814      	bhi.n	8005f98 <UART_SetConfig+0x1f8>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <UART_SetConfig+0x1d8>
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d008      	beq.n	8005f88 <UART_SetConfig+0x1e8>
 8005f76:	e00f      	b.n	8005f98 <UART_SetConfig+0x1f8>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e082      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f80:	2302      	movs	r3, #2
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e07e      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e07a      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e076      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e072      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a35      	ldr	r2, [pc, #212]	; (800607c <UART_SetConfig+0x2dc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d12a      	bne.n	8006000 <UART_SetConfig+0x260>
 8005faa:	4b30      	ldr	r3, [pc, #192]	; (800606c <UART_SetConfig+0x2cc>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fb8:	d01a      	beq.n	8005ff0 <UART_SetConfig+0x250>
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d81b      	bhi.n	8005ff8 <UART_SetConfig+0x258>
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc4:	d00c      	beq.n	8005fe0 <UART_SetConfig+0x240>
 8005fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fca:	d815      	bhi.n	8005ff8 <UART_SetConfig+0x258>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <UART_SetConfig+0x238>
 8005fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd4:	d008      	beq.n	8005fe8 <UART_SetConfig+0x248>
 8005fd6:	e00f      	b.n	8005ff8 <UART_SetConfig+0x258>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e052      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e04e      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e04a      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e046      	b.n	8006086 <UART_SetConfig+0x2e6>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e042      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <UART_SetConfig+0x2c4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d13a      	bne.n	8006080 <UART_SetConfig+0x2e0>
 800600a:	4b18      	ldr	r3, [pc, #96]	; (800606c <UART_SetConfig+0x2cc>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006018:	d01a      	beq.n	8006050 <UART_SetConfig+0x2b0>
 800601a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800601e:	d81b      	bhi.n	8006058 <UART_SetConfig+0x2b8>
 8006020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006024:	d00c      	beq.n	8006040 <UART_SetConfig+0x2a0>
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d815      	bhi.n	8006058 <UART_SetConfig+0x2b8>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <UART_SetConfig+0x298>
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d008      	beq.n	8006048 <UART_SetConfig+0x2a8>
 8006036:	e00f      	b.n	8006058 <UART_SetConfig+0x2b8>
 8006038:	2300      	movs	r3, #0
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e022      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006040:	2302      	movs	r3, #2
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e01e      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e01a      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e016      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e012      	b.n	8006086 <UART_SetConfig+0x2e6>
 8006060:	efff69f3 	.word	0xefff69f3
 8006064:	40008000 	.word	0x40008000
 8006068:	40013800 	.word	0x40013800
 800606c:	40021000 	.word	0x40021000
 8006070:	40004400 	.word	0x40004400
 8006074:	40004800 	.word	0x40004800
 8006078:	40004c00 	.word	0x40004c00
 800607c:	40005000 	.word	0x40005000
 8006080:	2310      	movs	r3, #16
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a9f      	ldr	r2, [pc, #636]	; (8006308 <UART_SetConfig+0x568>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d17a      	bne.n	8006186 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006094:	2b08      	cmp	r3, #8
 8006096:	d824      	bhi.n	80060e2 <UART_SetConfig+0x342>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <UART_SetConfig+0x300>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060d3 	.word	0x080060d3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060e3 	.word	0x080060e3
 80060bc:	080060e3 	.word	0x080060e3
 80060c0:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c4:	f7fd fbf6 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80060c8:	61f8      	str	r0, [r7, #28]
        break;
 80060ca:	e010      	b.n	80060ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b8f      	ldr	r3, [pc, #572]	; (800630c <UART_SetConfig+0x56c>)
 80060ce:	61fb      	str	r3, [r7, #28]
        break;
 80060d0:	e00d      	b.n	80060ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fd fb57 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80060d6:	61f8      	str	r0, [r7, #28]
        break;
 80060d8:	e009      	b.n	80060ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e005      	b.n	80060ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80fb 	beq.w	80062ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	429a      	cmp	r2, r3
 8006104:	d305      	bcc.n	8006112 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	429a      	cmp	r2, r3
 8006110:	d903      	bls.n	800611a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006118:	e0e8      	b.n	80062ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2200      	movs	r2, #0
 800611e:	461c      	mov	r4, r3
 8006120:	4615      	mov	r5, r2
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	f04f 0300 	mov.w	r3, #0
 800612a:	022b      	lsls	r3, r5, #8
 800612c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006130:	0222      	lsls	r2, r4, #8
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6849      	ldr	r1, [r1, #4]
 8006136:	0849      	lsrs	r1, r1, #1
 8006138:	2000      	movs	r0, #0
 800613a:	4688      	mov	r8, r1
 800613c:	4681      	mov	r9, r0
 800613e:	eb12 0a08 	adds.w	sl, r2, r8
 8006142:	eb43 0b09 	adc.w	fp, r3, r9
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	603b      	str	r3, [r7, #0]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006154:	4650      	mov	r0, sl
 8006156:	4659      	mov	r1, fp
 8006158:	f7fa fd6e 	bl	8000c38 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616a:	d308      	bcc.n	800617e <UART_SetConfig+0x3de>
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006172:	d204      	bcs.n	800617e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	e0b6      	b.n	80062ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006184:	e0b2      	b.n	80062ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	69db      	ldr	r3, [r3, #28]
 800618a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618e:	d15e      	bne.n	800624e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006190:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006194:	2b08      	cmp	r3, #8
 8006196:	d828      	bhi.n	80061ea <UART_SetConfig+0x44a>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x400>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	080061eb 	.word	0x080061eb
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061eb 	.word	0x080061eb
 80061b8:	080061eb 	.word	0x080061eb
 80061bc:	080061eb 	.word	0x080061eb
 80061c0:	080061e3 	.word	0x080061e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c4:	f7fd fb76 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 80061c8:	61f8      	str	r0, [r7, #28]
        break;
 80061ca:	e014      	b.n	80061f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061cc:	f7fd fb88 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 80061d0:	61f8      	str	r0, [r7, #28]
        break;
 80061d2:	e010      	b.n	80061f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <UART_SetConfig+0x56c>)
 80061d6:	61fb      	str	r3, [r7, #28]
        break;
 80061d8:	e00d      	b.n	80061f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061da:	f7fd fad3 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 80061de:	61f8      	str	r0, [r7, #28]
        break;
 80061e0:	e009      	b.n	80061f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e6:	61fb      	str	r3, [r7, #28]
        break;
 80061e8:	e005      	b.n	80061f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d077      	beq.n	80062ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005a      	lsls	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d916      	bls.n	8006246 <UART_SetConfig+0x4a6>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621e:	d212      	bcs.n	8006246 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f023 030f 	bic.w	r3, r3, #15
 8006228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b29a      	uxth	r2, r3
 8006236:	8afb      	ldrh	r3, [r7, #22]
 8006238:	4313      	orrs	r3, r2
 800623a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	8afa      	ldrh	r2, [r7, #22]
 8006242:	60da      	str	r2, [r3, #12]
 8006244:	e052      	b.n	80062ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800624c:	e04e      	b.n	80062ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800624e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006252:	2b08      	cmp	r3, #8
 8006254:	d827      	bhi.n	80062a6 <UART_SetConfig+0x506>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x4bc>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006297 	.word	0x08006297
 8006270:	080062a7 	.word	0x080062a7
 8006274:	080062a7 	.word	0x080062a7
 8006278:	080062a7 	.word	0x080062a7
 800627c:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fd fb18 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8006284:	61f8      	str	r0, [r7, #28]
        break;
 8006286:	e014      	b.n	80062b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7fd fb2a 	bl	80038e0 <HAL_RCC_GetPCLK2Freq>
 800628c:	61f8      	str	r0, [r7, #28]
        break;
 800628e:	e010      	b.n	80062b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b1e      	ldr	r3, [pc, #120]	; (800630c <UART_SetConfig+0x56c>)
 8006292:	61fb      	str	r3, [r7, #28]
        break;
 8006294:	e00d      	b.n	80062b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fd fa75 	bl	8003784 <HAL_RCC_GetSysClockFreq>
 800629a:	61f8      	str	r0, [r7, #28]
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	61fb      	str	r3, [r7, #28]
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062b0:	bf00      	nop
    }

    if (pclk != 0U)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d019      	beq.n	80062ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	085a      	lsrs	r2, r3, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d909      	bls.n	80062e6 <UART_SetConfig+0x546>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d8:	d205      	bcs.n	80062e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e002      	b.n	80062ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3728      	adds	r7, #40	; 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006306:	bf00      	nop
 8006308:	40008000 	.word	0x40008000
 800630c:	00f42400 	.word	0x00f42400

08006310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640e:	d10a      	bne.n	8006426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af02      	add	r7, sp, #8
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006464:	f7fb fe24 	bl	80020b0 <HAL_GetTick>
 8006468:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d10e      	bne.n	8006496 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f82d 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e023      	b.n	80064de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d10e      	bne.n	80064c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f817 	bl	80064e6 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e00d      	b.n	80064de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b09c      	sub	sp, #112	; 0x70
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4613      	mov	r3, r2
 80064f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f6:	e0a5      	b.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	f000 80a1 	beq.w	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fb fdd5 	bl	80020b0 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <UART_WaitOnFlagUntilTimeout+0x32>
 8006512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006514:	2b00      	cmp	r3, #0
 8006516:	d13e      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800652c:	667b      	str	r3, [r7, #100]	; 0x64
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006538:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800653c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	663b      	str	r3, [r7, #96]	; 0x60
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3308      	adds	r3, #8
 8006568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800656a:	64ba      	str	r2, [r7, #72]	; 0x48
 800656c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e5      	bne.n	800654a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e067      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d04f      	beq.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b2:	d147      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	66bb      	str	r3, [r7, #104]	; 0x68
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006610:	623a      	str	r2, [r7, #32]
 8006612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	69f9      	ldr	r1, [r7, #28]
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	61bb      	str	r3, [r7, #24]
   return(result);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e010      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	429a      	cmp	r2, r3
 8006652:	bf0c      	ite	eq
 8006654:	2301      	moveq	r3, #1
 8006656:	2300      	movne	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	429a      	cmp	r2, r3
 8006660:	f43f af4a 	beq.w	80064f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3770      	adds	r7, #112	; 0x70
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666e:	b480      	push	{r7}
 8006670:	b095      	sub	sp, #84	; 0x54
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800668a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	643b      	str	r3, [r7, #64]	; 0x40
 8006696:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800669a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d118      	bne.n	8006716 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6979      	ldr	r1, [r7, #20]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	613b      	str	r3, [r7, #16]
   return(result);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006728:	bf00      	nop
 800672a:	3754      	adds	r7, #84	; 0x54
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fb0e 	bl	8005d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	60bb      	str	r3, [r7, #8]
   return(result);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	613b      	str	r3, [r7, #16]
   return(result);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e6      	bne.n	8006768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fada 	bl	8005d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ac:	bf00      	nop
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <atof>:
 80067c8:	2100      	movs	r1, #0
 80067ca:	f000 be9f 	b.w	800750c <strtod>

080067ce <atoi>:
 80067ce:	220a      	movs	r2, #10
 80067d0:	2100      	movs	r1, #0
 80067d2:	f000 bf85 	b.w	80076e0 <strtol>
	...

080067d8 <__errno>:
 80067d8:	4b01      	ldr	r3, [pc, #4]	; (80067e0 <__errno+0x8>)
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	2000004c 	.word	0x2000004c

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f004 f8c4 	bl	800a984 <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	0800af20 	.word	0x0800af20
 8006820:	0800af20 	.word	0x0800af20
 8006824:	0800af20 	.word	0x0800af20
 8006828:	0800af24 	.word	0x0800af24

0800682c <memcpy>:
 800682c:	440a      	add	r2, r1
 800682e:	4291      	cmp	r1, r2
 8006830:	f100 33ff 	add.w	r3, r0, #4294967295
 8006834:	d100      	bne.n	8006838 <memcpy+0xc>
 8006836:	4770      	bx	lr
 8006838:	b510      	push	{r4, lr}
 800683a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006842:	4291      	cmp	r1, r2
 8006844:	d1f9      	bne.n	800683a <memcpy+0xe>
 8006846:	bd10      	pop	{r4, pc}

08006848 <memset>:
 8006848:	4402      	add	r2, r0
 800684a:	4603      	mov	r3, r0
 800684c:	4293      	cmp	r3, r2
 800684e:	d100      	bne.n	8006852 <memset+0xa>
 8006850:	4770      	bx	lr
 8006852:	f803 1b01 	strb.w	r1, [r3], #1
 8006856:	e7f9      	b.n	800684c <memset+0x4>

08006858 <siprintf>:
 8006858:	b40e      	push	{r1, r2, r3}
 800685a:	b500      	push	{lr}
 800685c:	b09c      	sub	sp, #112	; 0x70
 800685e:	ab1d      	add	r3, sp, #116	; 0x74
 8006860:	9002      	str	r0, [sp, #8]
 8006862:	9006      	str	r0, [sp, #24]
 8006864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006868:	4809      	ldr	r0, [pc, #36]	; (8006890 <siprintf+0x38>)
 800686a:	9107      	str	r1, [sp, #28]
 800686c:	9104      	str	r1, [sp, #16]
 800686e:	4909      	ldr	r1, [pc, #36]	; (8006894 <siprintf+0x3c>)
 8006870:	f853 2b04 	ldr.w	r2, [r3], #4
 8006874:	9105      	str	r1, [sp, #20]
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	a902      	add	r1, sp, #8
 800687c:	f002 f908 	bl	8008a90 <_svfiprintf_r>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	b01c      	add	sp, #112	; 0x70
 8006888:	f85d eb04 	ldr.w	lr, [sp], #4
 800688c:	b003      	add	sp, #12
 800688e:	4770      	bx	lr
 8006890:	2000004c 	.word	0x2000004c
 8006894:	ffff0208 	.word	0xffff0208

08006898 <strcat>:
 8006898:	b510      	push	{r4, lr}
 800689a:	4602      	mov	r2, r0
 800689c:	7814      	ldrb	r4, [r2, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	3201      	adds	r2, #1
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d1fa      	bne.n	800689c <strcat+0x4>
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	d1f9      	bne.n	80068a8 <strcat+0x10>
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <strcpy>:
 80068b6:	4603      	mov	r3, r0
 80068b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068bc:	f803 2b01 	strb.w	r2, [r3], #1
 80068c0:	2a00      	cmp	r2, #0
 80068c2:	d1f9      	bne.n	80068b8 <strcpy+0x2>
 80068c4:	4770      	bx	lr

080068c6 <sulp>:
 80068c6:	b570      	push	{r4, r5, r6, lr}
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	ec45 4b10 	vmov	d0, r4, r5
 80068d0:	4616      	mov	r6, r2
 80068d2:	f001 fe3b 	bl	800854c <__ulp>
 80068d6:	ec51 0b10 	vmov	r0, r1, d0
 80068da:	b17e      	cbz	r6, 80068fc <sulp+0x36>
 80068dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dd09      	ble.n	80068fc <sulp+0x36>
 80068e8:	051b      	lsls	r3, r3, #20
 80068ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068ee:	2400      	movs	r4, #0
 80068f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006900 <_strtod_l>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	ed2d 8b02 	vpush	{d8}
 8006908:	b09d      	sub	sp, #116	; 0x74
 800690a:	461f      	mov	r7, r3
 800690c:	2300      	movs	r3, #0
 800690e:	9318      	str	r3, [sp, #96]	; 0x60
 8006910:	4ba2      	ldr	r3, [pc, #648]	; (8006b9c <_strtod_l+0x29c>)
 8006912:	9213      	str	r2, [sp, #76]	; 0x4c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	9305      	str	r3, [sp, #20]
 8006918:	4604      	mov	r4, r0
 800691a:	4618      	mov	r0, r3
 800691c:	4688      	mov	r8, r1
 800691e:	f7f9 fc57 	bl	80001d0 <strlen>
 8006922:	f04f 0a00 	mov.w	sl, #0
 8006926:	4605      	mov	r5, r0
 8006928:	f04f 0b00 	mov.w	fp, #0
 800692c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	2a2b      	cmp	r2, #43	; 0x2b
 8006936:	d04e      	beq.n	80069d6 <_strtod_l+0xd6>
 8006938:	d83b      	bhi.n	80069b2 <_strtod_l+0xb2>
 800693a:	2a0d      	cmp	r2, #13
 800693c:	d834      	bhi.n	80069a8 <_strtod_l+0xa8>
 800693e:	2a08      	cmp	r2, #8
 8006940:	d834      	bhi.n	80069ac <_strtod_l+0xac>
 8006942:	2a00      	cmp	r2, #0
 8006944:	d03e      	beq.n	80069c4 <_strtod_l+0xc4>
 8006946:	2300      	movs	r3, #0
 8006948:	930a      	str	r3, [sp, #40]	; 0x28
 800694a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800694c:	7833      	ldrb	r3, [r6, #0]
 800694e:	2b30      	cmp	r3, #48	; 0x30
 8006950:	f040 80b0 	bne.w	8006ab4 <_strtod_l+0x1b4>
 8006954:	7873      	ldrb	r3, [r6, #1]
 8006956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800695a:	2b58      	cmp	r3, #88	; 0x58
 800695c:	d168      	bne.n	8006a30 <_strtod_l+0x130>
 800695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	ab18      	add	r3, sp, #96	; 0x60
 8006964:	9702      	str	r7, [sp, #8]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4a8d      	ldr	r2, [pc, #564]	; (8006ba0 <_strtod_l+0x2a0>)
 800696a:	ab19      	add	r3, sp, #100	; 0x64
 800696c:	a917      	add	r1, sp, #92	; 0x5c
 800696e:	4620      	mov	r0, r4
 8006970:	f000 ff58 	bl	8007824 <__gethex>
 8006974:	f010 0707 	ands.w	r7, r0, #7
 8006978:	4605      	mov	r5, r0
 800697a:	d005      	beq.n	8006988 <_strtod_l+0x88>
 800697c:	2f06      	cmp	r7, #6
 800697e:	d12c      	bne.n	80069da <_strtod_l+0xda>
 8006980:	3601      	adds	r6, #1
 8006982:	2300      	movs	r3, #0
 8006984:	9617      	str	r6, [sp, #92]	; 0x5c
 8006986:	930a      	str	r3, [sp, #40]	; 0x28
 8006988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 8590 	bne.w	80074b0 <_strtod_l+0xbb0>
 8006990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006992:	b1eb      	cbz	r3, 80069d0 <_strtod_l+0xd0>
 8006994:	4652      	mov	r2, sl
 8006996:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800699a:	ec43 2b10 	vmov	d0, r2, r3
 800699e:	b01d      	add	sp, #116	; 0x74
 80069a0:	ecbd 8b02 	vpop	{d8}
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	2a20      	cmp	r2, #32
 80069aa:	d1cc      	bne.n	8006946 <_strtod_l+0x46>
 80069ac:	3301      	adds	r3, #1
 80069ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80069b0:	e7be      	b.n	8006930 <_strtod_l+0x30>
 80069b2:	2a2d      	cmp	r2, #45	; 0x2d
 80069b4:	d1c7      	bne.n	8006946 <_strtod_l+0x46>
 80069b6:	2201      	movs	r2, #1
 80069b8:	920a      	str	r2, [sp, #40]	; 0x28
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1c2      	bne.n	800694a <_strtod_l+0x4a>
 80069c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 856e 	bne.w	80074ac <_strtod_l+0xbac>
 80069d0:	4652      	mov	r2, sl
 80069d2:	465b      	mov	r3, fp
 80069d4:	e7e1      	b.n	800699a <_strtod_l+0x9a>
 80069d6:	2200      	movs	r2, #0
 80069d8:	e7ee      	b.n	80069b8 <_strtod_l+0xb8>
 80069da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069dc:	b13a      	cbz	r2, 80069ee <_strtod_l+0xee>
 80069de:	2135      	movs	r1, #53	; 0x35
 80069e0:	a81a      	add	r0, sp, #104	; 0x68
 80069e2:	f001 febe 	bl	8008762 <__copybits>
 80069e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069e8:	4620      	mov	r0, r4
 80069ea:	f001 fa7d 	bl	8007ee8 <_Bfree>
 80069ee:	3f01      	subs	r7, #1
 80069f0:	2f04      	cmp	r7, #4
 80069f2:	d806      	bhi.n	8006a02 <_strtod_l+0x102>
 80069f4:	e8df f007 	tbb	[pc, r7]
 80069f8:	1714030a 	.word	0x1714030a
 80069fc:	0a          	.byte	0x0a
 80069fd:	00          	.byte	0x00
 80069fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006a02:	0728      	lsls	r0, r5, #28
 8006a04:	d5c0      	bpl.n	8006988 <_strtod_l+0x88>
 8006a06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006a0a:	e7bd      	b.n	8006988 <_strtod_l+0x88>
 8006a0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006a10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a1e:	e7f0      	b.n	8006a02 <_strtod_l+0x102>
 8006a20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006ba4 <_strtod_l+0x2a4>
 8006a24:	e7ed      	b.n	8006a02 <_strtod_l+0x102>
 8006a26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006a2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006a2e:	e7e8      	b.n	8006a02 <_strtod_l+0x102>
 8006a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b30      	cmp	r3, #48	; 0x30
 8006a3a:	d0f9      	beq.n	8006a30 <_strtod_l+0x130>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0a3      	beq.n	8006988 <_strtod_l+0x88>
 8006a40:	2301      	movs	r3, #1
 8006a42:	f04f 0900 	mov.w	r9, #0
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a4a:	9308      	str	r3, [sp, #32]
 8006a4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a50:	464f      	mov	r7, r9
 8006a52:	220a      	movs	r2, #10
 8006a54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a56:	7806      	ldrb	r6, [r0, #0]
 8006a58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a5c:	b2d9      	uxtb	r1, r3
 8006a5e:	2909      	cmp	r1, #9
 8006a60:	d92a      	bls.n	8006ab8 <_strtod_l+0x1b8>
 8006a62:	9905      	ldr	r1, [sp, #20]
 8006a64:	462a      	mov	r2, r5
 8006a66:	f002 fc1b 	bl	80092a0 <strncmp>
 8006a6a:	b398      	cbz	r0, 8006ad4 <_strtod_l+0x1d4>
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	4632      	mov	r2, r6
 8006a70:	463d      	mov	r5, r7
 8006a72:	9005      	str	r0, [sp, #20]
 8006a74:	4603      	mov	r3, r0
 8006a76:	2a65      	cmp	r2, #101	; 0x65
 8006a78:	d001      	beq.n	8006a7e <_strtod_l+0x17e>
 8006a7a:	2a45      	cmp	r2, #69	; 0x45
 8006a7c:	d118      	bne.n	8006ab0 <_strtod_l+0x1b0>
 8006a7e:	b91d      	cbnz	r5, 8006a88 <_strtod_l+0x188>
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	4302      	orrs	r2, r0
 8006a84:	d09e      	beq.n	80069c4 <_strtod_l+0xc4>
 8006a86:	2500      	movs	r5, #0
 8006a88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006a8c:	f108 0201 	add.w	r2, r8, #1
 8006a90:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006a96:	2a2b      	cmp	r2, #43	; 0x2b
 8006a98:	d075      	beq.n	8006b86 <_strtod_l+0x286>
 8006a9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006a9c:	d07b      	beq.n	8006b96 <_strtod_l+0x296>
 8006a9e:	f04f 0c00 	mov.w	ip, #0
 8006aa2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006aa6:	2909      	cmp	r1, #9
 8006aa8:	f240 8082 	bls.w	8006bb0 <_strtod_l+0x2b0>
 8006aac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ab0:	2600      	movs	r6, #0
 8006ab2:	e09d      	b.n	8006bf0 <_strtod_l+0x2f0>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e7c4      	b.n	8006a42 <_strtod_l+0x142>
 8006ab8:	2f08      	cmp	r7, #8
 8006aba:	bfd8      	it	le
 8006abc:	9907      	ldrle	r1, [sp, #28]
 8006abe:	f100 0001 	add.w	r0, r0, #1
 8006ac2:	bfda      	itte	le
 8006ac4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ac8:	9307      	strle	r3, [sp, #28]
 8006aca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ace:	3701      	adds	r7, #1
 8006ad0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ad2:	e7bf      	b.n	8006a54 <_strtod_l+0x154>
 8006ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ad6:	195a      	adds	r2, r3, r5
 8006ad8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ada:	5d5a      	ldrb	r2, [r3, r5]
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	d037      	beq.n	8006b50 <_strtod_l+0x250>
 8006ae0:	9005      	str	r0, [sp, #20]
 8006ae2:	463d      	mov	r5, r7
 8006ae4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d912      	bls.n	8006b12 <_strtod_l+0x212>
 8006aec:	2301      	movs	r3, #1
 8006aee:	e7c2      	b.n	8006a76 <_strtod_l+0x176>
 8006af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006af6:	785a      	ldrb	r2, [r3, #1]
 8006af8:	3001      	adds	r0, #1
 8006afa:	2a30      	cmp	r2, #48	; 0x30
 8006afc:	d0f8      	beq.n	8006af0 <_strtod_l+0x1f0>
 8006afe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	f200 84d9 	bhi.w	80074ba <_strtod_l+0xbba>
 8006b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b0a:	9005      	str	r0, [sp, #20]
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	9308      	str	r3, [sp, #32]
 8006b10:	4605      	mov	r5, r0
 8006b12:	3a30      	subs	r2, #48	; 0x30
 8006b14:	f100 0301 	add.w	r3, r0, #1
 8006b18:	d014      	beq.n	8006b44 <_strtod_l+0x244>
 8006b1a:	9905      	ldr	r1, [sp, #20]
 8006b1c:	4419      	add	r1, r3
 8006b1e:	9105      	str	r1, [sp, #20]
 8006b20:	462b      	mov	r3, r5
 8006b22:	eb00 0e05 	add.w	lr, r0, r5
 8006b26:	210a      	movs	r1, #10
 8006b28:	4573      	cmp	r3, lr
 8006b2a:	d113      	bne.n	8006b54 <_strtod_l+0x254>
 8006b2c:	182b      	adds	r3, r5, r0
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	f105 0501 	add.w	r5, r5, #1
 8006b34:	4405      	add	r5, r0
 8006b36:	dc1c      	bgt.n	8006b72 <_strtod_l+0x272>
 8006b38:	9907      	ldr	r1, [sp, #28]
 8006b3a:	230a      	movs	r3, #10
 8006b3c:	fb03 2301 	mla	r3, r3, r1, r2
 8006b40:	9307      	str	r3, [sp, #28]
 8006b42:	2300      	movs	r3, #0
 8006b44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b46:	1c51      	adds	r1, r2, #1
 8006b48:	9117      	str	r1, [sp, #92]	; 0x5c
 8006b4a:	7852      	ldrb	r2, [r2, #1]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	e7c9      	b.n	8006ae4 <_strtod_l+0x1e4>
 8006b50:	4638      	mov	r0, r7
 8006b52:	e7d2      	b.n	8006afa <_strtod_l+0x1fa>
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	dc04      	bgt.n	8006b62 <_strtod_l+0x262>
 8006b58:	9e07      	ldr	r6, [sp, #28]
 8006b5a:	434e      	muls	r6, r1
 8006b5c:	9607      	str	r6, [sp, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	e7e2      	b.n	8006b28 <_strtod_l+0x228>
 8006b62:	f103 0c01 	add.w	ip, r3, #1
 8006b66:	f1bc 0f10 	cmp.w	ip, #16
 8006b6a:	bfd8      	it	le
 8006b6c:	fb01 f909 	mulle.w	r9, r1, r9
 8006b70:	e7f5      	b.n	8006b5e <_strtod_l+0x25e>
 8006b72:	2d10      	cmp	r5, #16
 8006b74:	bfdc      	itt	le
 8006b76:	230a      	movle	r3, #10
 8006b78:	fb03 2909 	mlale	r9, r3, r9, r2
 8006b7c:	e7e1      	b.n	8006b42 <_strtod_l+0x242>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9305      	str	r3, [sp, #20]
 8006b82:	2301      	movs	r3, #1
 8006b84:	e77c      	b.n	8006a80 <_strtod_l+0x180>
 8006b86:	f04f 0c00 	mov.w	ip, #0
 8006b8a:	f108 0202 	add.w	r2, r8, #2
 8006b8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006b94:	e785      	b.n	8006aa2 <_strtod_l+0x1a2>
 8006b96:	f04f 0c01 	mov.w	ip, #1
 8006b9a:	e7f6      	b.n	8006b8a <_strtod_l+0x28a>
 8006b9c:	0800ace8 	.word	0x0800ace8
 8006ba0:	0800aa6c 	.word	0x0800aa6c
 8006ba4:	7ff00000 	.word	0x7ff00000
 8006ba8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006baa:	1c51      	adds	r1, r2, #1
 8006bac:	9117      	str	r1, [sp, #92]	; 0x5c
 8006bae:	7852      	ldrb	r2, [r2, #1]
 8006bb0:	2a30      	cmp	r2, #48	; 0x30
 8006bb2:	d0f9      	beq.n	8006ba8 <_strtod_l+0x2a8>
 8006bb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006bb8:	2908      	cmp	r1, #8
 8006bba:	f63f af79 	bhi.w	8006ab0 <_strtod_l+0x1b0>
 8006bbe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006bc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bc4:	9206      	str	r2, [sp, #24]
 8006bc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bc8:	1c51      	adds	r1, r2, #1
 8006bca:	9117      	str	r1, [sp, #92]	; 0x5c
 8006bcc:	7852      	ldrb	r2, [r2, #1]
 8006bce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006bd2:	2e09      	cmp	r6, #9
 8006bd4:	d937      	bls.n	8006c46 <_strtod_l+0x346>
 8006bd6:	9e06      	ldr	r6, [sp, #24]
 8006bd8:	1b89      	subs	r1, r1, r6
 8006bda:	2908      	cmp	r1, #8
 8006bdc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006be0:	dc02      	bgt.n	8006be8 <_strtod_l+0x2e8>
 8006be2:	4576      	cmp	r6, lr
 8006be4:	bfa8      	it	ge
 8006be6:	4676      	movge	r6, lr
 8006be8:	f1bc 0f00 	cmp.w	ip, #0
 8006bec:	d000      	beq.n	8006bf0 <_strtod_l+0x2f0>
 8006bee:	4276      	negs	r6, r6
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	d14d      	bne.n	8006c90 <_strtod_l+0x390>
 8006bf4:	9904      	ldr	r1, [sp, #16]
 8006bf6:	4301      	orrs	r1, r0
 8006bf8:	f47f aec6 	bne.w	8006988 <_strtod_l+0x88>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f47f aee1 	bne.w	80069c4 <_strtod_l+0xc4>
 8006c02:	2a69      	cmp	r2, #105	; 0x69
 8006c04:	d027      	beq.n	8006c56 <_strtod_l+0x356>
 8006c06:	dc24      	bgt.n	8006c52 <_strtod_l+0x352>
 8006c08:	2a49      	cmp	r2, #73	; 0x49
 8006c0a:	d024      	beq.n	8006c56 <_strtod_l+0x356>
 8006c0c:	2a4e      	cmp	r2, #78	; 0x4e
 8006c0e:	f47f aed9 	bne.w	80069c4 <_strtod_l+0xc4>
 8006c12:	499f      	ldr	r1, [pc, #636]	; (8006e90 <_strtod_l+0x590>)
 8006c14:	a817      	add	r0, sp, #92	; 0x5c
 8006c16:	f001 f85d 	bl	8007cd4 <__match>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	f43f aed2 	beq.w	80069c4 <_strtod_l+0xc4>
 8006c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b28      	cmp	r3, #40	; 0x28
 8006c26:	d12d      	bne.n	8006c84 <_strtod_l+0x384>
 8006c28:	499a      	ldr	r1, [pc, #616]	; (8006e94 <_strtod_l+0x594>)
 8006c2a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c2c:	a817      	add	r0, sp, #92	; 0x5c
 8006c2e:	f001 f865 	bl	8007cfc <__hexnan>
 8006c32:	2805      	cmp	r0, #5
 8006c34:	d126      	bne.n	8006c84 <_strtod_l+0x384>
 8006c36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c38:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006c3c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c40:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c44:	e6a0      	b.n	8006988 <_strtod_l+0x88>
 8006c46:	210a      	movs	r1, #10
 8006c48:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006c4c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c50:	e7b9      	b.n	8006bc6 <_strtod_l+0x2c6>
 8006c52:	2a6e      	cmp	r2, #110	; 0x6e
 8006c54:	e7db      	b.n	8006c0e <_strtod_l+0x30e>
 8006c56:	4990      	ldr	r1, [pc, #576]	; (8006e98 <_strtod_l+0x598>)
 8006c58:	a817      	add	r0, sp, #92	; 0x5c
 8006c5a:	f001 f83b 	bl	8007cd4 <__match>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f43f aeb0 	beq.w	80069c4 <_strtod_l+0xc4>
 8006c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c66:	498d      	ldr	r1, [pc, #564]	; (8006e9c <_strtod_l+0x59c>)
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	a817      	add	r0, sp, #92	; 0x5c
 8006c6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c6e:	f001 f831 	bl	8007cd4 <__match>
 8006c72:	b910      	cbnz	r0, 8006c7a <_strtod_l+0x37a>
 8006c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c76:	3301      	adds	r3, #1
 8006c78:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c7a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006eac <_strtod_l+0x5ac>
 8006c7e:	f04f 0a00 	mov.w	sl, #0
 8006c82:	e681      	b.n	8006988 <_strtod_l+0x88>
 8006c84:	4886      	ldr	r0, [pc, #536]	; (8006ea0 <_strtod_l+0x5a0>)
 8006c86:	f002 faf3 	bl	8009270 <nan>
 8006c8a:	ec5b ab10 	vmov	sl, fp, d0
 8006c8e:	e67b      	b.n	8006988 <_strtod_l+0x88>
 8006c90:	9b05      	ldr	r3, [sp, #20]
 8006c92:	9807      	ldr	r0, [sp, #28]
 8006c94:	1af3      	subs	r3, r6, r3
 8006c96:	2f00      	cmp	r7, #0
 8006c98:	bf08      	it	eq
 8006c9a:	462f      	moveq	r7, r5
 8006c9c:	2d10      	cmp	r5, #16
 8006c9e:	9306      	str	r3, [sp, #24]
 8006ca0:	46a8      	mov	r8, r5
 8006ca2:	bfa8      	it	ge
 8006ca4:	f04f 0810 	movge.w	r8, #16
 8006ca8:	f7f9 fc2c 	bl	8000504 <__aeabi_ui2d>
 8006cac:	2d09      	cmp	r5, #9
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	dd13      	ble.n	8006cdc <_strtod_l+0x3dc>
 8006cb4:	4b7b      	ldr	r3, [pc, #492]	; (8006ea4 <_strtod_l+0x5a4>)
 8006cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006cbe:	f7f9 fc9b 	bl	80005f8 <__aeabi_dmul>
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	468b      	mov	fp, r1
 8006cc8:	f7f9 fc1c 	bl	8000504 <__aeabi_ui2d>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4650      	mov	r0, sl
 8006cd2:	4659      	mov	r1, fp
 8006cd4:	f7f9 fada 	bl	800028c <__adddf3>
 8006cd8:	4682      	mov	sl, r0
 8006cda:	468b      	mov	fp, r1
 8006cdc:	2d0f      	cmp	r5, #15
 8006cde:	dc38      	bgt.n	8006d52 <_strtod_l+0x452>
 8006ce0:	9b06      	ldr	r3, [sp, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f43f ae50 	beq.w	8006988 <_strtod_l+0x88>
 8006ce8:	dd24      	ble.n	8006d34 <_strtod_l+0x434>
 8006cea:	2b16      	cmp	r3, #22
 8006cec:	dc0b      	bgt.n	8006d06 <_strtod_l+0x406>
 8006cee:	496d      	ldr	r1, [pc, #436]	; (8006ea4 <_strtod_l+0x5a4>)
 8006cf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	f7f9 fc7c 	bl	80005f8 <__aeabi_dmul>
 8006d00:	4682      	mov	sl, r0
 8006d02:	468b      	mov	fp, r1
 8006d04:	e640      	b.n	8006988 <_strtod_l+0x88>
 8006d06:	9a06      	ldr	r2, [sp, #24]
 8006d08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	db20      	blt.n	8006d52 <_strtod_l+0x452>
 8006d10:	4c64      	ldr	r4, [pc, #400]	; (8006ea4 <_strtod_l+0x5a4>)
 8006d12:	f1c5 050f 	rsb	r5, r5, #15
 8006d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d22:	f7f9 fc69 	bl	80005f8 <__aeabi_dmul>
 8006d26:	9b06      	ldr	r3, [sp, #24]
 8006d28:	1b5d      	subs	r5, r3, r5
 8006d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d32:	e7e3      	b.n	8006cfc <_strtod_l+0x3fc>
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	3316      	adds	r3, #22
 8006d38:	db0b      	blt.n	8006d52 <_strtod_l+0x452>
 8006d3a:	9b05      	ldr	r3, [sp, #20]
 8006d3c:	1b9e      	subs	r6, r3, r6
 8006d3e:	4b59      	ldr	r3, [pc, #356]	; (8006ea4 <_strtod_l+0x5a4>)
 8006d40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d48:	4650      	mov	r0, sl
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	f7f9 fd7e 	bl	800084c <__aeabi_ddiv>
 8006d50:	e7d6      	b.n	8006d00 <_strtod_l+0x400>
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	eba5 0808 	sub.w	r8, r5, r8
 8006d58:	4498      	add	r8, r3
 8006d5a:	f1b8 0f00 	cmp.w	r8, #0
 8006d5e:	dd74      	ble.n	8006e4a <_strtod_l+0x54a>
 8006d60:	f018 030f 	ands.w	r3, r8, #15
 8006d64:	d00a      	beq.n	8006d7c <_strtod_l+0x47c>
 8006d66:	494f      	ldr	r1, [pc, #316]	; (8006ea4 <_strtod_l+0x5a4>)
 8006d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	465b      	mov	r3, fp
 8006d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d74:	f7f9 fc40 	bl	80005f8 <__aeabi_dmul>
 8006d78:	4682      	mov	sl, r0
 8006d7a:	468b      	mov	fp, r1
 8006d7c:	f038 080f 	bics.w	r8, r8, #15
 8006d80:	d04f      	beq.n	8006e22 <_strtod_l+0x522>
 8006d82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d86:	dd22      	ble.n	8006dce <_strtod_l+0x4ce>
 8006d88:	2500      	movs	r5, #0
 8006d8a:	462e      	mov	r6, r5
 8006d8c:	9507      	str	r5, [sp, #28]
 8006d8e:	9505      	str	r5, [sp, #20]
 8006d90:	2322      	movs	r3, #34	; 0x22
 8006d92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006eac <_strtod_l+0x5ac>
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	f04f 0a00 	mov.w	sl, #0
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f43f adf2 	beq.w	8006988 <_strtod_l+0x88>
 8006da4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 f89e 	bl	8007ee8 <_Bfree>
 8006dac:	9905      	ldr	r1, [sp, #20]
 8006dae:	4620      	mov	r0, r4
 8006db0:	f001 f89a 	bl	8007ee8 <_Bfree>
 8006db4:	4631      	mov	r1, r6
 8006db6:	4620      	mov	r0, r4
 8006db8:	f001 f896 	bl	8007ee8 <_Bfree>
 8006dbc:	9907      	ldr	r1, [sp, #28]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 f892 	bl	8007ee8 <_Bfree>
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f001 f88e 	bl	8007ee8 <_Bfree>
 8006dcc:	e5dc      	b.n	8006988 <_strtod_l+0x88>
 8006dce:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <_strtod_l+0x5a8>)
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	4699      	mov	r9, r3
 8006dde:	f1b8 0f01 	cmp.w	r8, #1
 8006de2:	dc21      	bgt.n	8006e28 <_strtod_l+0x528>
 8006de4:	b10b      	cbz	r3, 8006dea <_strtod_l+0x4ea>
 8006de6:	4682      	mov	sl, r0
 8006de8:	468b      	mov	fp, r1
 8006dea:	4b2f      	ldr	r3, [pc, #188]	; (8006ea8 <_strtod_l+0x5a8>)
 8006dec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006df0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006df4:	4652      	mov	r2, sl
 8006df6:	465b      	mov	r3, fp
 8006df8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	4b2a      	ldr	r3, [pc, #168]	; (8006eac <_strtod_l+0x5ac>)
 8006e02:	460a      	mov	r2, r1
 8006e04:	400b      	ands	r3, r1
 8006e06:	492a      	ldr	r1, [pc, #168]	; (8006eb0 <_strtod_l+0x5b0>)
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	4682      	mov	sl, r0
 8006e0c:	d8bc      	bhi.n	8006d88 <_strtod_l+0x488>
 8006e0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006e12:	428b      	cmp	r3, r1
 8006e14:	bf86      	itte	hi
 8006e16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006eb4 <_strtod_l+0x5b4>
 8006e1a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006e22:	2300      	movs	r3, #0
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	e084      	b.n	8006f32 <_strtod_l+0x632>
 8006e28:	f018 0f01 	tst.w	r8, #1
 8006e2c:	d005      	beq.n	8006e3a <_strtod_l+0x53a>
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f7f9 fbe0 	bl	80005f8 <__aeabi_dmul>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	9a04      	ldr	r2, [sp, #16]
 8006e3c:	3208      	adds	r2, #8
 8006e3e:	f109 0901 	add.w	r9, r9, #1
 8006e42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e46:	9204      	str	r2, [sp, #16]
 8006e48:	e7c9      	b.n	8006dde <_strtod_l+0x4de>
 8006e4a:	d0ea      	beq.n	8006e22 <_strtod_l+0x522>
 8006e4c:	f1c8 0800 	rsb	r8, r8, #0
 8006e50:	f018 020f 	ands.w	r2, r8, #15
 8006e54:	d00a      	beq.n	8006e6c <_strtod_l+0x56c>
 8006e56:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <_strtod_l+0x5a4>)
 8006e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	4659      	mov	r1, fp
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 fcf2 	bl	800084c <__aeabi_ddiv>
 8006e68:	4682      	mov	sl, r0
 8006e6a:	468b      	mov	fp, r1
 8006e6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e70:	d0d7      	beq.n	8006e22 <_strtod_l+0x522>
 8006e72:	f1b8 0f1f 	cmp.w	r8, #31
 8006e76:	dd1f      	ble.n	8006eb8 <_strtod_l+0x5b8>
 8006e78:	2500      	movs	r5, #0
 8006e7a:	462e      	mov	r6, r5
 8006e7c:	9507      	str	r5, [sp, #28]
 8006e7e:	9505      	str	r5, [sp, #20]
 8006e80:	2322      	movs	r3, #34	; 0x22
 8006e82:	f04f 0a00 	mov.w	sl, #0
 8006e86:	f04f 0b00 	mov.w	fp, #0
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	e786      	b.n	8006d9c <_strtod_l+0x49c>
 8006e8e:	bf00      	nop
 8006e90:	0800aa69 	.word	0x0800aa69
 8006e94:	0800aa80 	.word	0x0800aa80
 8006e98:	0800aa60 	.word	0x0800aa60
 8006e9c:	0800aa63 	.word	0x0800aa63
 8006ea0:	0800ab6f 	.word	0x0800ab6f
 8006ea4:	0800ad80 	.word	0x0800ad80
 8006ea8:	0800ad58 	.word	0x0800ad58
 8006eac:	7ff00000 	.word	0x7ff00000
 8006eb0:	7ca00000 	.word	0x7ca00000
 8006eb4:	7fefffff 	.word	0x7fefffff
 8006eb8:	f018 0310 	ands.w	r3, r8, #16
 8006ebc:	bf18      	it	ne
 8006ebe:	236a      	movne	r3, #106	; 0x6a
 8006ec0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007270 <_strtod_l+0x970>
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f018 0f01 	tst.w	r8, #1
 8006ed0:	d004      	beq.n	8006edc <_strtod_l+0x5dc>
 8006ed2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ed6:	f7f9 fb8f 	bl	80005f8 <__aeabi_dmul>
 8006eda:	2301      	movs	r3, #1
 8006edc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ee0:	f109 0908 	add.w	r9, r9, #8
 8006ee4:	d1f2      	bne.n	8006ecc <_strtod_l+0x5cc>
 8006ee6:	b10b      	cbz	r3, 8006eec <_strtod_l+0x5ec>
 8006ee8:	4682      	mov	sl, r0
 8006eea:	468b      	mov	fp, r1
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	b1c3      	cbz	r3, 8006f22 <_strtod_l+0x622>
 8006ef0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ef4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	4659      	mov	r1, fp
 8006efc:	dd11      	ble.n	8006f22 <_strtod_l+0x622>
 8006efe:	2b1f      	cmp	r3, #31
 8006f00:	f340 8124 	ble.w	800714c <_strtod_l+0x84c>
 8006f04:	2b34      	cmp	r3, #52	; 0x34
 8006f06:	bfde      	ittt	le
 8006f08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006f0c:	f04f 33ff 	movle.w	r3, #4294967295
 8006f10:	fa03 f202 	lslle.w	r2, r3, r2
 8006f14:	f04f 0a00 	mov.w	sl, #0
 8006f18:	bfcc      	ite	gt
 8006f1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006f1e:	ea02 0b01 	andle.w	fp, r2, r1
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4650      	mov	r0, sl
 8006f28:	4659      	mov	r1, fp
 8006f2a:	f7f9 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d1a2      	bne.n	8006e78 <_strtod_l+0x578>
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	9908      	ldr	r1, [sp, #32]
 8006f38:	462b      	mov	r3, r5
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f001 f83b 	bl	8007fb8 <__s2b>
 8006f42:	9007      	str	r0, [sp, #28]
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f af1f 	beq.w	8006d88 <_strtod_l+0x488>
 8006f4a:	9b05      	ldr	r3, [sp, #20]
 8006f4c:	1b9e      	subs	r6, r3, r6
 8006f4e:	9b06      	ldr	r3, [sp, #24]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bfb4      	ite	lt
 8006f54:	4633      	movlt	r3, r6
 8006f56:	2300      	movge	r3, #0
 8006f58:	930c      	str	r3, [sp, #48]	; 0x30
 8006f5a:	9b06      	ldr	r3, [sp, #24]
 8006f5c:	2500      	movs	r5, #0
 8006f5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f62:	9312      	str	r3, [sp, #72]	; 0x48
 8006f64:	462e      	mov	r6, r5
 8006f66:	9b07      	ldr	r3, [sp, #28]
 8006f68:	4620      	mov	r0, r4
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	f000 ff7c 	bl	8007e68 <_Balloc>
 8006f70:	9005      	str	r0, [sp, #20]
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f af0c 	beq.w	8006d90 <_strtod_l+0x490>
 8006f78:	9b07      	ldr	r3, [sp, #28]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	3202      	adds	r2, #2
 8006f7e:	f103 010c 	add.w	r1, r3, #12
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	300c      	adds	r0, #12
 8006f86:	f7ff fc51 	bl	800682c <memcpy>
 8006f8a:	ec4b ab10 	vmov	d0, sl, fp
 8006f8e:	aa1a      	add	r2, sp, #104	; 0x68
 8006f90:	a919      	add	r1, sp, #100	; 0x64
 8006f92:	4620      	mov	r0, r4
 8006f94:	f001 fb56 	bl	8008644 <__d2b>
 8006f98:	ec4b ab18 	vmov	d8, sl, fp
 8006f9c:	9018      	str	r0, [sp, #96]	; 0x60
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f43f aef6 	beq.w	8006d90 <_strtod_l+0x490>
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f001 f8a0 	bl	80080ec <__i2b>
 8006fac:	4606      	mov	r6, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f43f aeee 	beq.w	8006d90 <_strtod_l+0x490>
 8006fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fb6:	9904      	ldr	r1, [sp, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfab      	itete	ge
 8006fbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006fbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006fc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006fc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006fc6:	bfac      	ite	ge
 8006fc8:	eb03 0902 	addge.w	r9, r3, r2
 8006fcc:	1ad7      	sublt	r7, r2, r3
 8006fce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fd0:	eba3 0801 	sub.w	r8, r3, r1
 8006fd4:	4490      	add	r8, r2
 8006fd6:	4ba1      	ldr	r3, [pc, #644]	; (800725c <_strtod_l+0x95c>)
 8006fd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fdc:	4598      	cmp	r8, r3
 8006fde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fe2:	f280 80c7 	bge.w	8007174 <_strtod_l+0x874>
 8006fe6:	eba3 0308 	sub.w	r3, r3, r8
 8006fea:	2b1f      	cmp	r3, #31
 8006fec:	eba2 0203 	sub.w	r2, r2, r3
 8006ff0:	f04f 0101 	mov.w	r1, #1
 8006ff4:	f300 80b1 	bgt.w	800715a <_strtod_l+0x85a>
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	930d      	str	r3, [sp, #52]	; 0x34
 8006ffe:	2300      	movs	r3, #0
 8007000:	9308      	str	r3, [sp, #32]
 8007002:	eb09 0802 	add.w	r8, r9, r2
 8007006:	9b04      	ldr	r3, [sp, #16]
 8007008:	45c1      	cmp	r9, r8
 800700a:	4417      	add	r7, r2
 800700c:	441f      	add	r7, r3
 800700e:	464b      	mov	r3, r9
 8007010:	bfa8      	it	ge
 8007012:	4643      	movge	r3, r8
 8007014:	42bb      	cmp	r3, r7
 8007016:	bfa8      	it	ge
 8007018:	463b      	movge	r3, r7
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfc2      	ittt	gt
 800701e:	eba8 0803 	subgt.w	r8, r8, r3
 8007022:	1aff      	subgt	r7, r7, r3
 8007024:	eba9 0903 	subgt.w	r9, r9, r3
 8007028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd17      	ble.n	800705e <_strtod_l+0x75e>
 800702e:	4631      	mov	r1, r6
 8007030:	461a      	mov	r2, r3
 8007032:	4620      	mov	r0, r4
 8007034:	f001 f91a 	bl	800826c <__pow5mult>
 8007038:	4606      	mov	r6, r0
 800703a:	2800      	cmp	r0, #0
 800703c:	f43f aea8 	beq.w	8006d90 <_strtod_l+0x490>
 8007040:	4601      	mov	r1, r0
 8007042:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007044:	4620      	mov	r0, r4
 8007046:	f001 f867 	bl	8008118 <__multiply>
 800704a:	900b      	str	r0, [sp, #44]	; 0x2c
 800704c:	2800      	cmp	r0, #0
 800704e:	f43f ae9f 	beq.w	8006d90 <_strtod_l+0x490>
 8007052:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007054:	4620      	mov	r0, r4
 8007056:	f000 ff47 	bl	8007ee8 <_Bfree>
 800705a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705c:	9318      	str	r3, [sp, #96]	; 0x60
 800705e:	f1b8 0f00 	cmp.w	r8, #0
 8007062:	f300 808c 	bgt.w	800717e <_strtod_l+0x87e>
 8007066:	9b06      	ldr	r3, [sp, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	dd08      	ble.n	800707e <_strtod_l+0x77e>
 800706c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800706e:	9905      	ldr	r1, [sp, #20]
 8007070:	4620      	mov	r0, r4
 8007072:	f001 f8fb 	bl	800826c <__pow5mult>
 8007076:	9005      	str	r0, [sp, #20]
 8007078:	2800      	cmp	r0, #0
 800707a:	f43f ae89 	beq.w	8006d90 <_strtod_l+0x490>
 800707e:	2f00      	cmp	r7, #0
 8007080:	dd08      	ble.n	8007094 <_strtod_l+0x794>
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	463a      	mov	r2, r7
 8007086:	4620      	mov	r0, r4
 8007088:	f001 f94a 	bl	8008320 <__lshift>
 800708c:	9005      	str	r0, [sp, #20]
 800708e:	2800      	cmp	r0, #0
 8007090:	f43f ae7e 	beq.w	8006d90 <_strtod_l+0x490>
 8007094:	f1b9 0f00 	cmp.w	r9, #0
 8007098:	dd08      	ble.n	80070ac <_strtod_l+0x7ac>
 800709a:	4631      	mov	r1, r6
 800709c:	464a      	mov	r2, r9
 800709e:	4620      	mov	r0, r4
 80070a0:	f001 f93e 	bl	8008320 <__lshift>
 80070a4:	4606      	mov	r6, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f43f ae72 	beq.w	8006d90 <_strtod_l+0x490>
 80070ac:	9a05      	ldr	r2, [sp, #20]
 80070ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070b0:	4620      	mov	r0, r4
 80070b2:	f001 f9c1 	bl	8008438 <__mdiff>
 80070b6:	4605      	mov	r5, r0
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f43f ae69 	beq.w	8006d90 <_strtod_l+0x490>
 80070be:	68c3      	ldr	r3, [r0, #12]
 80070c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c2:	2300      	movs	r3, #0
 80070c4:	60c3      	str	r3, [r0, #12]
 80070c6:	4631      	mov	r1, r6
 80070c8:	f001 f99a 	bl	8008400 <__mcmp>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	da60      	bge.n	8007192 <_strtod_l+0x892>
 80070d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d2:	ea53 030a 	orrs.w	r3, r3, sl
 80070d6:	f040 8082 	bne.w	80071de <_strtod_l+0x8de>
 80070da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d17d      	bne.n	80071de <_strtod_l+0x8de>
 80070e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070e6:	0d1b      	lsrs	r3, r3, #20
 80070e8:	051b      	lsls	r3, r3, #20
 80070ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070ee:	d976      	bls.n	80071de <_strtod_l+0x8de>
 80070f0:	696b      	ldr	r3, [r5, #20]
 80070f2:	b913      	cbnz	r3, 80070fa <_strtod_l+0x7fa>
 80070f4:	692b      	ldr	r3, [r5, #16]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	dd71      	ble.n	80071de <_strtod_l+0x8de>
 80070fa:	4629      	mov	r1, r5
 80070fc:	2201      	movs	r2, #1
 80070fe:	4620      	mov	r0, r4
 8007100:	f001 f90e 	bl	8008320 <__lshift>
 8007104:	4631      	mov	r1, r6
 8007106:	4605      	mov	r5, r0
 8007108:	f001 f97a 	bl	8008400 <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	dd66      	ble.n	80071de <_strtod_l+0x8de>
 8007110:	9904      	ldr	r1, [sp, #16]
 8007112:	4a53      	ldr	r2, [pc, #332]	; (8007260 <_strtod_l+0x960>)
 8007114:	465b      	mov	r3, fp
 8007116:	2900      	cmp	r1, #0
 8007118:	f000 8081 	beq.w	800721e <_strtod_l+0x91e>
 800711c:	ea02 010b 	and.w	r1, r2, fp
 8007120:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007124:	dc7b      	bgt.n	800721e <_strtod_l+0x91e>
 8007126:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800712a:	f77f aea9 	ble.w	8006e80 <_strtod_l+0x580>
 800712e:	4b4d      	ldr	r3, [pc, #308]	; (8007264 <_strtod_l+0x964>)
 8007130:	4650      	mov	r0, sl
 8007132:	4659      	mov	r1, fp
 8007134:	2200      	movs	r2, #0
 8007136:	f7f9 fa5f 	bl	80005f8 <__aeabi_dmul>
 800713a:	460b      	mov	r3, r1
 800713c:	4303      	orrs	r3, r0
 800713e:	bf08      	it	eq
 8007140:	2322      	moveq	r3, #34	; 0x22
 8007142:	4682      	mov	sl, r0
 8007144:	468b      	mov	fp, r1
 8007146:	bf08      	it	eq
 8007148:	6023      	streq	r3, [r4, #0]
 800714a:	e62b      	b.n	8006da4 <_strtod_l+0x4a4>
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	ea03 0a0a 	and.w	sl, r3, sl
 8007158:	e6e3      	b.n	8006f22 <_strtod_l+0x622>
 800715a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800715e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007162:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007166:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800716a:	fa01 f308 	lsl.w	r3, r1, r8
 800716e:	9308      	str	r3, [sp, #32]
 8007170:	910d      	str	r1, [sp, #52]	; 0x34
 8007172:	e746      	b.n	8007002 <_strtod_l+0x702>
 8007174:	2300      	movs	r3, #0
 8007176:	9308      	str	r3, [sp, #32]
 8007178:	2301      	movs	r3, #1
 800717a:	930d      	str	r3, [sp, #52]	; 0x34
 800717c:	e741      	b.n	8007002 <_strtod_l+0x702>
 800717e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007180:	4642      	mov	r2, r8
 8007182:	4620      	mov	r0, r4
 8007184:	f001 f8cc 	bl	8008320 <__lshift>
 8007188:	9018      	str	r0, [sp, #96]	; 0x60
 800718a:	2800      	cmp	r0, #0
 800718c:	f47f af6b 	bne.w	8007066 <_strtod_l+0x766>
 8007190:	e5fe      	b.n	8006d90 <_strtod_l+0x490>
 8007192:	465f      	mov	r7, fp
 8007194:	d16e      	bne.n	8007274 <_strtod_l+0x974>
 8007196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007198:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800719c:	b342      	cbz	r2, 80071f0 <_strtod_l+0x8f0>
 800719e:	4a32      	ldr	r2, [pc, #200]	; (8007268 <_strtod_l+0x968>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d128      	bne.n	80071f6 <_strtod_l+0x8f6>
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4651      	mov	r1, sl
 80071a8:	b1eb      	cbz	r3, 80071e6 <_strtod_l+0x8e6>
 80071aa:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <_strtod_l+0x960>)
 80071ac:	403b      	ands	r3, r7
 80071ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	d819      	bhi.n	80071ec <_strtod_l+0x8ec>
 80071b8:	0d1b      	lsrs	r3, r3, #20
 80071ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d117      	bne.n	80071f6 <_strtod_l+0x8f6>
 80071c6:	4b29      	ldr	r3, [pc, #164]	; (800726c <_strtod_l+0x96c>)
 80071c8:	429f      	cmp	r7, r3
 80071ca:	d102      	bne.n	80071d2 <_strtod_l+0x8d2>
 80071cc:	3101      	adds	r1, #1
 80071ce:	f43f addf 	beq.w	8006d90 <_strtod_l+0x490>
 80071d2:	4b23      	ldr	r3, [pc, #140]	; (8007260 <_strtod_l+0x960>)
 80071d4:	403b      	ands	r3, r7
 80071d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071da:	f04f 0a00 	mov.w	sl, #0
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1a4      	bne.n	800712e <_strtod_l+0x82e>
 80071e4:	e5de      	b.n	8006da4 <_strtod_l+0x4a4>
 80071e6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ea:	e7ea      	b.n	80071c2 <_strtod_l+0x8c2>
 80071ec:	4613      	mov	r3, r2
 80071ee:	e7e8      	b.n	80071c2 <_strtod_l+0x8c2>
 80071f0:	ea53 030a 	orrs.w	r3, r3, sl
 80071f4:	d08c      	beq.n	8007110 <_strtod_l+0x810>
 80071f6:	9b08      	ldr	r3, [sp, #32]
 80071f8:	b1db      	cbz	r3, 8007232 <_strtod_l+0x932>
 80071fa:	423b      	tst	r3, r7
 80071fc:	d0ef      	beq.n	80071de <_strtod_l+0x8de>
 80071fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	4650      	mov	r0, sl
 8007204:	4659      	mov	r1, fp
 8007206:	b1c3      	cbz	r3, 800723a <_strtod_l+0x93a>
 8007208:	f7ff fb5d 	bl	80068c6 <sulp>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	ec51 0b18 	vmov	r0, r1, d8
 8007214:	f7f9 f83a 	bl	800028c <__adddf3>
 8007218:	4682      	mov	sl, r0
 800721a:	468b      	mov	fp, r1
 800721c:	e7df      	b.n	80071de <_strtod_l+0x8de>
 800721e:	4013      	ands	r3, r2
 8007220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007224:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800722c:	f04f 3aff 	mov.w	sl, #4294967295
 8007230:	e7d5      	b.n	80071de <_strtod_l+0x8de>
 8007232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007234:	ea13 0f0a 	tst.w	r3, sl
 8007238:	e7e0      	b.n	80071fc <_strtod_l+0x8fc>
 800723a:	f7ff fb44 	bl	80068c6 <sulp>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	ec51 0b18 	vmov	r0, r1, d8
 8007246:	f7f9 f81f 	bl	8000288 <__aeabi_dsub>
 800724a:	2200      	movs	r2, #0
 800724c:	2300      	movs	r3, #0
 800724e:	4682      	mov	sl, r0
 8007250:	468b      	mov	fp, r1
 8007252:	f7f9 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007256:	2800      	cmp	r0, #0
 8007258:	d0c1      	beq.n	80071de <_strtod_l+0x8de>
 800725a:	e611      	b.n	8006e80 <_strtod_l+0x580>
 800725c:	fffffc02 	.word	0xfffffc02
 8007260:	7ff00000 	.word	0x7ff00000
 8007264:	39500000 	.word	0x39500000
 8007268:	000fffff 	.word	0x000fffff
 800726c:	7fefffff 	.word	0x7fefffff
 8007270:	0800aa98 	.word	0x0800aa98
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	f001 fa40 	bl	80086fc <__ratio>
 800727c:	ec59 8b10 	vmov	r8, r9, d0
 8007280:	ee10 0a10 	vmov	r0, s0
 8007284:	2200      	movs	r2, #0
 8007286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800728a:	4649      	mov	r1, r9
 800728c:	f7f9 fc30 	bl	8000af0 <__aeabi_dcmple>
 8007290:	2800      	cmp	r0, #0
 8007292:	d07a      	beq.n	800738a <_strtod_l+0xa8a>
 8007294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d04a      	beq.n	8007330 <_strtod_l+0xa30>
 800729a:	4b95      	ldr	r3, [pc, #596]	; (80074f0 <_strtod_l+0xbf0>)
 800729c:	2200      	movs	r2, #0
 800729e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80072a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80074f0 <_strtod_l+0xbf0>
 80072a6:	f04f 0800 	mov.w	r8, #0
 80072aa:	4b92      	ldr	r3, [pc, #584]	; (80074f4 <_strtod_l+0xbf4>)
 80072ac:	403b      	ands	r3, r7
 80072ae:	930d      	str	r3, [sp, #52]	; 0x34
 80072b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072b2:	4b91      	ldr	r3, [pc, #580]	; (80074f8 <_strtod_l+0xbf8>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f040 80b0 	bne.w	800741a <_strtod_l+0xb1a>
 80072ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80072c2:	ec4b ab10 	vmov	d0, sl, fp
 80072c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072ca:	f001 f93f 	bl	800854c <__ulp>
 80072ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072d2:	ec53 2b10 	vmov	r2, r3, d0
 80072d6:	f7f9 f98f 	bl	80005f8 <__aeabi_dmul>
 80072da:	4652      	mov	r2, sl
 80072dc:	465b      	mov	r3, fp
 80072de:	f7f8 ffd5 	bl	800028c <__adddf3>
 80072e2:	460b      	mov	r3, r1
 80072e4:	4983      	ldr	r1, [pc, #524]	; (80074f4 <_strtod_l+0xbf4>)
 80072e6:	4a85      	ldr	r2, [pc, #532]	; (80074fc <_strtod_l+0xbfc>)
 80072e8:	4019      	ands	r1, r3
 80072ea:	4291      	cmp	r1, r2
 80072ec:	4682      	mov	sl, r0
 80072ee:	d960      	bls.n	80073b2 <_strtod_l+0xab2>
 80072f0:	ee18 3a90 	vmov	r3, s17
 80072f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d104      	bne.n	8007306 <_strtod_l+0xa06>
 80072fc:	ee18 3a10 	vmov	r3, s16
 8007300:	3301      	adds	r3, #1
 8007302:	f43f ad45 	beq.w	8006d90 <_strtod_l+0x490>
 8007306:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007508 <_strtod_l+0xc08>
 800730a:	f04f 3aff 	mov.w	sl, #4294967295
 800730e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fde9 	bl	8007ee8 <_Bfree>
 8007316:	9905      	ldr	r1, [sp, #20]
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fde5 	bl	8007ee8 <_Bfree>
 800731e:	4631      	mov	r1, r6
 8007320:	4620      	mov	r0, r4
 8007322:	f000 fde1 	bl	8007ee8 <_Bfree>
 8007326:	4629      	mov	r1, r5
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fddd 	bl	8007ee8 <_Bfree>
 800732e:	e61a      	b.n	8006f66 <_strtod_l+0x666>
 8007330:	f1ba 0f00 	cmp.w	sl, #0
 8007334:	d11b      	bne.n	800736e <_strtod_l+0xa6e>
 8007336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800733a:	b9f3      	cbnz	r3, 800737a <_strtod_l+0xa7a>
 800733c:	4b6c      	ldr	r3, [pc, #432]	; (80074f0 <_strtod_l+0xbf0>)
 800733e:	2200      	movs	r2, #0
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	f7f9 fbca 	bl	8000adc <__aeabi_dcmplt>
 8007348:	b9d0      	cbnz	r0, 8007380 <_strtod_l+0xa80>
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	4b6c      	ldr	r3, [pc, #432]	; (8007500 <_strtod_l+0xc00>)
 8007350:	2200      	movs	r2, #0
 8007352:	f7f9 f951 	bl	80005f8 <__aeabi_dmul>
 8007356:	4680      	mov	r8, r0
 8007358:	4689      	mov	r9, r1
 800735a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800735e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007362:	9315      	str	r3, [sp, #84]	; 0x54
 8007364:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007368:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800736c:	e79d      	b.n	80072aa <_strtod_l+0x9aa>
 800736e:	f1ba 0f01 	cmp.w	sl, #1
 8007372:	d102      	bne.n	800737a <_strtod_l+0xa7a>
 8007374:	2f00      	cmp	r7, #0
 8007376:	f43f ad83 	beq.w	8006e80 <_strtod_l+0x580>
 800737a:	4b62      	ldr	r3, [pc, #392]	; (8007504 <_strtod_l+0xc04>)
 800737c:	2200      	movs	r2, #0
 800737e:	e78e      	b.n	800729e <_strtod_l+0x99e>
 8007380:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007500 <_strtod_l+0xc00>
 8007384:	f04f 0800 	mov.w	r8, #0
 8007388:	e7e7      	b.n	800735a <_strtod_l+0xa5a>
 800738a:	4b5d      	ldr	r3, [pc, #372]	; (8007500 <_strtod_l+0xc00>)
 800738c:	4640      	mov	r0, r8
 800738e:	4649      	mov	r1, r9
 8007390:	2200      	movs	r2, #0
 8007392:	f7f9 f931 	bl	80005f8 <__aeabi_dmul>
 8007396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007398:	4680      	mov	r8, r0
 800739a:	4689      	mov	r9, r1
 800739c:	b933      	cbnz	r3, 80073ac <_strtod_l+0xaac>
 800739e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073a2:	900e      	str	r0, [sp, #56]	; 0x38
 80073a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073aa:	e7dd      	b.n	8007368 <_strtod_l+0xa68>
 80073ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80073b0:	e7f9      	b.n	80073a6 <_strtod_l+0xaa6>
 80073b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1a8      	bne.n	800730e <_strtod_l+0xa0e>
 80073bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c2:	0d1b      	lsrs	r3, r3, #20
 80073c4:	051b      	lsls	r3, r3, #20
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d1a1      	bne.n	800730e <_strtod_l+0xa0e>
 80073ca:	4640      	mov	r0, r8
 80073cc:	4649      	mov	r1, r9
 80073ce:	f7f9 fc4b 	bl	8000c68 <__aeabi_d2lz>
 80073d2:	f7f9 f8e3 	bl	800059c <__aeabi_l2d>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f8 ff53 	bl	8000288 <__aeabi_dsub>
 80073e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073e8:	ea43 030a 	orr.w	r3, r3, sl
 80073ec:	4313      	orrs	r3, r2
 80073ee:	4680      	mov	r8, r0
 80073f0:	4689      	mov	r9, r1
 80073f2:	d055      	beq.n	80074a0 <_strtod_l+0xba0>
 80073f4:	a336      	add	r3, pc, #216	; (adr r3, 80074d0 <_strtod_l+0xbd0>)
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	f7f9 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	f47f acd0 	bne.w	8006da4 <_strtod_l+0x4a4>
 8007404:	a334      	add	r3, pc, #208	; (adr r3, 80074d8 <_strtod_l+0xbd8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	4640      	mov	r0, r8
 800740c:	4649      	mov	r1, r9
 800740e:	f7f9 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f af7b 	beq.w	800730e <_strtod_l+0xa0e>
 8007418:	e4c4      	b.n	8006da4 <_strtod_l+0x4a4>
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	b333      	cbz	r3, 800746c <_strtod_l+0xb6c>
 800741e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007420:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007424:	d822      	bhi.n	800746c <_strtod_l+0xb6c>
 8007426:	a32e      	add	r3, pc, #184	; (adr r3, 80074e0 <_strtod_l+0xbe0>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fb5e 	bl	8000af0 <__aeabi_dcmple>
 8007434:	b1a0      	cbz	r0, 8007460 <_strtod_l+0xb60>
 8007436:	4649      	mov	r1, r9
 8007438:	4640      	mov	r0, r8
 800743a:	f7f9 fb8d 	bl	8000b58 <__aeabi_d2uiz>
 800743e:	2801      	cmp	r0, #1
 8007440:	bf38      	it	cc
 8007442:	2001      	movcc	r0, #1
 8007444:	f7f9 f85e 	bl	8000504 <__aeabi_ui2d>
 8007448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744a:	4680      	mov	r8, r0
 800744c:	4689      	mov	r9, r1
 800744e:	bb23      	cbnz	r3, 800749a <_strtod_l+0xb9a>
 8007450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007454:	9010      	str	r0, [sp, #64]	; 0x40
 8007456:	9311      	str	r3, [sp, #68]	; 0x44
 8007458:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800745c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007462:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007464:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	9309      	str	r3, [sp, #36]	; 0x24
 800746c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007470:	eeb0 0a48 	vmov.f32	s0, s16
 8007474:	eef0 0a68 	vmov.f32	s1, s17
 8007478:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800747c:	f001 f866 	bl	800854c <__ulp>
 8007480:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007484:	ec53 2b10 	vmov	r2, r3, d0
 8007488:	f7f9 f8b6 	bl	80005f8 <__aeabi_dmul>
 800748c:	ec53 2b18 	vmov	r2, r3, d8
 8007490:	f7f8 fefc 	bl	800028c <__adddf3>
 8007494:	4682      	mov	sl, r0
 8007496:	468b      	mov	fp, r1
 8007498:	e78d      	b.n	80073b6 <_strtod_l+0xab6>
 800749a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800749e:	e7db      	b.n	8007458 <_strtod_l+0xb58>
 80074a0:	a311      	add	r3, pc, #68	; (adr r3, 80074e8 <_strtod_l+0xbe8>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f9 fb19 	bl	8000adc <__aeabi_dcmplt>
 80074aa:	e7b2      	b.n	8007412 <_strtod_l+0xb12>
 80074ac:	2300      	movs	r3, #0
 80074ae:	930a      	str	r3, [sp, #40]	; 0x28
 80074b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	f7ff ba6b 	b.w	8006990 <_strtod_l+0x90>
 80074ba:	2a65      	cmp	r2, #101	; 0x65
 80074bc:	f43f ab5f 	beq.w	8006b7e <_strtod_l+0x27e>
 80074c0:	2a45      	cmp	r2, #69	; 0x45
 80074c2:	f43f ab5c 	beq.w	8006b7e <_strtod_l+0x27e>
 80074c6:	2301      	movs	r3, #1
 80074c8:	f7ff bb94 	b.w	8006bf4 <_strtod_l+0x2f4>
 80074cc:	f3af 8000 	nop.w
 80074d0:	94a03595 	.word	0x94a03595
 80074d4:	3fdfffff 	.word	0x3fdfffff
 80074d8:	35afe535 	.word	0x35afe535
 80074dc:	3fe00000 	.word	0x3fe00000
 80074e0:	ffc00000 	.word	0xffc00000
 80074e4:	41dfffff 	.word	0x41dfffff
 80074e8:	94a03595 	.word	0x94a03595
 80074ec:	3fcfffff 	.word	0x3fcfffff
 80074f0:	3ff00000 	.word	0x3ff00000
 80074f4:	7ff00000 	.word	0x7ff00000
 80074f8:	7fe00000 	.word	0x7fe00000
 80074fc:	7c9fffff 	.word	0x7c9fffff
 8007500:	3fe00000 	.word	0x3fe00000
 8007504:	bff00000 	.word	0xbff00000
 8007508:	7fefffff 	.word	0x7fefffff

0800750c <strtod>:
 800750c:	460a      	mov	r2, r1
 800750e:	4601      	mov	r1, r0
 8007510:	4802      	ldr	r0, [pc, #8]	; (800751c <strtod+0x10>)
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <strtod+0x14>)
 8007514:	6800      	ldr	r0, [r0, #0]
 8007516:	f7ff b9f3 	b.w	8006900 <_strtod_l>
 800751a:	bf00      	nop
 800751c:	2000004c 	.word	0x2000004c
 8007520:	200000b4 	.word	0x200000b4

08007524 <strtok>:
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <strtok+0x5c>)
 8007526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007528:	681e      	ldr	r6, [r3, #0]
 800752a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800752c:	4605      	mov	r5, r0
 800752e:	b9fc      	cbnz	r4, 8007570 <strtok+0x4c>
 8007530:	2050      	movs	r0, #80	; 0x50
 8007532:	9101      	str	r1, [sp, #4]
 8007534:	f000 fc7e 	bl	8007e34 <malloc>
 8007538:	9901      	ldr	r1, [sp, #4]
 800753a:	65b0      	str	r0, [r6, #88]	; 0x58
 800753c:	4602      	mov	r2, r0
 800753e:	b920      	cbnz	r0, 800754a <strtok+0x26>
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <strtok+0x60>)
 8007542:	4811      	ldr	r0, [pc, #68]	; (8007588 <strtok+0x64>)
 8007544:	2157      	movs	r1, #87	; 0x57
 8007546:	f000 f8d5 	bl	80076f4 <__assert_func>
 800754a:	e9c0 4400 	strd	r4, r4, [r0]
 800754e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007552:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007556:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800755a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800755e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007562:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007566:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800756a:	6184      	str	r4, [r0, #24]
 800756c:	7704      	strb	r4, [r0, #28]
 800756e:	6244      	str	r4, [r0, #36]	; 0x24
 8007570:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007572:	2301      	movs	r3, #1
 8007574:	4628      	mov	r0, r5
 8007576:	b002      	add	sp, #8
 8007578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800757c:	f000 b806 	b.w	800758c <__strtok_r>
 8007580:	2000004c 	.word	0x2000004c
 8007584:	0800aac0 	.word	0x0800aac0
 8007588:	0800aad7 	.word	0x0800aad7

0800758c <__strtok_r>:
 800758c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758e:	b908      	cbnz	r0, 8007594 <__strtok_r+0x8>
 8007590:	6810      	ldr	r0, [r2, #0]
 8007592:	b188      	cbz	r0, 80075b8 <__strtok_r+0x2c>
 8007594:	4604      	mov	r4, r0
 8007596:	4620      	mov	r0, r4
 8007598:	f814 5b01 	ldrb.w	r5, [r4], #1
 800759c:	460f      	mov	r7, r1
 800759e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80075a2:	b91e      	cbnz	r6, 80075ac <__strtok_r+0x20>
 80075a4:	b965      	cbnz	r5, 80075c0 <__strtok_r+0x34>
 80075a6:	6015      	str	r5, [r2, #0]
 80075a8:	4628      	mov	r0, r5
 80075aa:	e005      	b.n	80075b8 <__strtok_r+0x2c>
 80075ac:	42b5      	cmp	r5, r6
 80075ae:	d1f6      	bne.n	800759e <__strtok_r+0x12>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <__strtok_r+0xa>
 80075b4:	6014      	str	r4, [r2, #0]
 80075b6:	7003      	strb	r3, [r0, #0]
 80075b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ba:	461c      	mov	r4, r3
 80075bc:	e00c      	b.n	80075d8 <__strtok_r+0x4c>
 80075be:	b915      	cbnz	r5, 80075c6 <__strtok_r+0x3a>
 80075c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075c4:	460e      	mov	r6, r1
 80075c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80075ca:	42ab      	cmp	r3, r5
 80075cc:	d1f7      	bne.n	80075be <__strtok_r+0x32>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0f3      	beq.n	80075ba <__strtok_r+0x2e>
 80075d2:	2300      	movs	r3, #0
 80075d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80075d8:	6014      	str	r4, [r2, #0]
 80075da:	e7ed      	b.n	80075b8 <__strtok_r+0x2c>

080075dc <_strtol_l.constprop.0>:
 80075dc:	2b01      	cmp	r3, #1
 80075de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e2:	d001      	beq.n	80075e8 <_strtol_l.constprop.0+0xc>
 80075e4:	2b24      	cmp	r3, #36	; 0x24
 80075e6:	d906      	bls.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80075e8:	f7ff f8f6 	bl	80067d8 <__errno>
 80075ec:	2316      	movs	r3, #22
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	2000      	movs	r0, #0
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80076dc <_strtol_l.constprop.0+0x100>
 80075fa:	460d      	mov	r5, r1
 80075fc:	462e      	mov	r6, r5
 80075fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007602:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007606:	f017 0708 	ands.w	r7, r7, #8
 800760a:	d1f7      	bne.n	80075fc <_strtol_l.constprop.0+0x20>
 800760c:	2c2d      	cmp	r4, #45	; 0x2d
 800760e:	d132      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 8007610:	782c      	ldrb	r4, [r5, #0]
 8007612:	2701      	movs	r7, #1
 8007614:	1cb5      	adds	r5, r6, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05b      	beq.n	80076d2 <_strtol_l.constprop.0+0xf6>
 800761a:	2b10      	cmp	r3, #16
 800761c:	d109      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 800761e:	2c30      	cmp	r4, #48	; 0x30
 8007620:	d107      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 8007622:	782c      	ldrb	r4, [r5, #0]
 8007624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007628:	2c58      	cmp	r4, #88	; 0x58
 800762a:	d14d      	bne.n	80076c8 <_strtol_l.constprop.0+0xec>
 800762c:	786c      	ldrb	r4, [r5, #1]
 800762e:	2310      	movs	r3, #16
 8007630:	3502      	adds	r5, #2
 8007632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007636:	f108 38ff 	add.w	r8, r8, #4294967295
 800763a:	f04f 0c00 	mov.w	ip, #0
 800763e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007642:	4666      	mov	r6, ip
 8007644:	fb03 8a19 	mls	sl, r3, r9, r8
 8007648:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800764c:	f1be 0f09 	cmp.w	lr, #9
 8007650:	d816      	bhi.n	8007680 <_strtol_l.constprop.0+0xa4>
 8007652:	4674      	mov	r4, lr
 8007654:	42a3      	cmp	r3, r4
 8007656:	dd24      	ble.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007658:	f1bc 0f00 	cmp.w	ip, #0
 800765c:	db1e      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 800765e:	45b1      	cmp	r9, r6
 8007660:	d31c      	bcc.n	800769c <_strtol_l.constprop.0+0xc0>
 8007662:	d101      	bne.n	8007668 <_strtol_l.constprop.0+0x8c>
 8007664:	45a2      	cmp	sl, r4
 8007666:	db19      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 8007668:	fb06 4603 	mla	r6, r6, r3, r4
 800766c:	f04f 0c01 	mov.w	ip, #1
 8007670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007674:	e7e8      	b.n	8007648 <_strtol_l.constprop.0+0x6c>
 8007676:	2c2b      	cmp	r4, #43	; 0x2b
 8007678:	bf04      	itt	eq
 800767a:	782c      	ldrbeq	r4, [r5, #0]
 800767c:	1cb5      	addeq	r5, r6, #2
 800767e:	e7ca      	b.n	8007616 <_strtol_l.constprop.0+0x3a>
 8007680:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007684:	f1be 0f19 	cmp.w	lr, #25
 8007688:	d801      	bhi.n	800768e <_strtol_l.constprop.0+0xb2>
 800768a:	3c37      	subs	r4, #55	; 0x37
 800768c:	e7e2      	b.n	8007654 <_strtol_l.constprop.0+0x78>
 800768e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007692:	f1be 0f19 	cmp.w	lr, #25
 8007696:	d804      	bhi.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007698:	3c57      	subs	r4, #87	; 0x57
 800769a:	e7db      	b.n	8007654 <_strtol_l.constprop.0+0x78>
 800769c:	f04f 3cff 	mov.w	ip, #4294967295
 80076a0:	e7e6      	b.n	8007670 <_strtol_l.constprop.0+0x94>
 80076a2:	f1bc 0f00 	cmp.w	ip, #0
 80076a6:	da05      	bge.n	80076b4 <_strtol_l.constprop.0+0xd8>
 80076a8:	2322      	movs	r3, #34	; 0x22
 80076aa:	6003      	str	r3, [r0, #0]
 80076ac:	4646      	mov	r6, r8
 80076ae:	b942      	cbnz	r2, 80076c2 <_strtol_l.constprop.0+0xe6>
 80076b0:	4630      	mov	r0, r6
 80076b2:	e79e      	b.n	80075f2 <_strtol_l.constprop.0+0x16>
 80076b4:	b107      	cbz	r7, 80076b8 <_strtol_l.constprop.0+0xdc>
 80076b6:	4276      	negs	r6, r6
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d0f9      	beq.n	80076b0 <_strtol_l.constprop.0+0xd4>
 80076bc:	f1bc 0f00 	cmp.w	ip, #0
 80076c0:	d000      	beq.n	80076c4 <_strtol_l.constprop.0+0xe8>
 80076c2:	1e69      	subs	r1, r5, #1
 80076c4:	6011      	str	r1, [r2, #0]
 80076c6:	e7f3      	b.n	80076b0 <_strtol_l.constprop.0+0xd4>
 80076c8:	2430      	movs	r4, #48	; 0x30
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1b1      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 80076ce:	2308      	movs	r3, #8
 80076d0:	e7af      	b.n	8007632 <_strtol_l.constprop.0+0x56>
 80076d2:	2c30      	cmp	r4, #48	; 0x30
 80076d4:	d0a5      	beq.n	8007622 <_strtol_l.constprop.0+0x46>
 80076d6:	230a      	movs	r3, #10
 80076d8:	e7ab      	b.n	8007632 <_strtol_l.constprop.0+0x56>
 80076da:	bf00      	nop
 80076dc:	0800ab71 	.word	0x0800ab71

080076e0 <strtol>:
 80076e0:	4613      	mov	r3, r2
 80076e2:	460a      	mov	r2, r1
 80076e4:	4601      	mov	r1, r0
 80076e6:	4802      	ldr	r0, [pc, #8]	; (80076f0 <strtol+0x10>)
 80076e8:	6800      	ldr	r0, [r0, #0]
 80076ea:	f7ff bf77 	b.w	80075dc <_strtol_l.constprop.0>
 80076ee:	bf00      	nop
 80076f0:	2000004c 	.word	0x2000004c

080076f4 <__assert_func>:
 80076f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076f6:	4614      	mov	r4, r2
 80076f8:	461a      	mov	r2, r3
 80076fa:	4b09      	ldr	r3, [pc, #36]	; (8007720 <__assert_func+0x2c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4605      	mov	r5, r0
 8007700:	68d8      	ldr	r0, [r3, #12]
 8007702:	b14c      	cbz	r4, 8007718 <__assert_func+0x24>
 8007704:	4b07      	ldr	r3, [pc, #28]	; (8007724 <__assert_func+0x30>)
 8007706:	9100      	str	r1, [sp, #0]
 8007708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800770c:	4906      	ldr	r1, [pc, #24]	; (8007728 <__assert_func+0x34>)
 800770e:	462b      	mov	r3, r5
 8007710:	f000 f80e 	bl	8007730 <fiprintf>
 8007714:	f001 fea6 	bl	8009464 <abort>
 8007718:	4b04      	ldr	r3, [pc, #16]	; (800772c <__assert_func+0x38>)
 800771a:	461c      	mov	r4, r3
 800771c:	e7f3      	b.n	8007706 <__assert_func+0x12>
 800771e:	bf00      	nop
 8007720:	2000004c 	.word	0x2000004c
 8007724:	0800ab34 	.word	0x0800ab34
 8007728:	0800ab41 	.word	0x0800ab41
 800772c:	0800ab6f 	.word	0x0800ab6f

08007730 <fiprintf>:
 8007730:	b40e      	push	{r1, r2, r3}
 8007732:	b503      	push	{r0, r1, lr}
 8007734:	4601      	mov	r1, r0
 8007736:	ab03      	add	r3, sp, #12
 8007738:	4805      	ldr	r0, [pc, #20]	; (8007750 <fiprintf+0x20>)
 800773a:	f853 2b04 	ldr.w	r2, [r3], #4
 800773e:	6800      	ldr	r0, [r0, #0]
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	f001 facf 	bl	8008ce4 <_vfiprintf_r>
 8007746:	b002      	add	sp, #8
 8007748:	f85d eb04 	ldr.w	lr, [sp], #4
 800774c:	b003      	add	sp, #12
 800774e:	4770      	bx	lr
 8007750:	2000004c 	.word	0x2000004c

08007754 <rshift>:
 8007754:	6903      	ldr	r3, [r0, #16]
 8007756:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800775a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800775e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007762:	f100 0414 	add.w	r4, r0, #20
 8007766:	dd45      	ble.n	80077f4 <rshift+0xa0>
 8007768:	f011 011f 	ands.w	r1, r1, #31
 800776c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007770:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007774:	d10c      	bne.n	8007790 <rshift+0x3c>
 8007776:	f100 0710 	add.w	r7, r0, #16
 800777a:	4629      	mov	r1, r5
 800777c:	42b1      	cmp	r1, r6
 800777e:	d334      	bcc.n	80077ea <rshift+0x96>
 8007780:	1a9b      	subs	r3, r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	1eea      	subs	r2, r5, #3
 8007786:	4296      	cmp	r6, r2
 8007788:	bf38      	it	cc
 800778a:	2300      	movcc	r3, #0
 800778c:	4423      	add	r3, r4
 800778e:	e015      	b.n	80077bc <rshift+0x68>
 8007790:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007794:	f1c1 0820 	rsb	r8, r1, #32
 8007798:	40cf      	lsrs	r7, r1
 800779a:	f105 0e04 	add.w	lr, r5, #4
 800779e:	46a1      	mov	r9, r4
 80077a0:	4576      	cmp	r6, lr
 80077a2:	46f4      	mov	ip, lr
 80077a4:	d815      	bhi.n	80077d2 <rshift+0x7e>
 80077a6:	1a9a      	subs	r2, r3, r2
 80077a8:	0092      	lsls	r2, r2, #2
 80077aa:	3a04      	subs	r2, #4
 80077ac:	3501      	adds	r5, #1
 80077ae:	42ae      	cmp	r6, r5
 80077b0:	bf38      	it	cc
 80077b2:	2200      	movcc	r2, #0
 80077b4:	18a3      	adds	r3, r4, r2
 80077b6:	50a7      	str	r7, [r4, r2]
 80077b8:	b107      	cbz	r7, 80077bc <rshift+0x68>
 80077ba:	3304      	adds	r3, #4
 80077bc:	1b1a      	subs	r2, r3, r4
 80077be:	42a3      	cmp	r3, r4
 80077c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077c4:	bf08      	it	eq
 80077c6:	2300      	moveq	r3, #0
 80077c8:	6102      	str	r2, [r0, #16]
 80077ca:	bf08      	it	eq
 80077cc:	6143      	streq	r3, [r0, #20]
 80077ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d2:	f8dc c000 	ldr.w	ip, [ip]
 80077d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80077da:	ea4c 0707 	orr.w	r7, ip, r7
 80077de:	f849 7b04 	str.w	r7, [r9], #4
 80077e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077e6:	40cf      	lsrs	r7, r1
 80077e8:	e7da      	b.n	80077a0 <rshift+0x4c>
 80077ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80077ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80077f2:	e7c3      	b.n	800777c <rshift+0x28>
 80077f4:	4623      	mov	r3, r4
 80077f6:	e7e1      	b.n	80077bc <rshift+0x68>

080077f8 <__hexdig_fun>:
 80077f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d802      	bhi.n	8007806 <__hexdig_fun+0xe>
 8007800:	3820      	subs	r0, #32
 8007802:	b2c0      	uxtb	r0, r0
 8007804:	4770      	bx	lr
 8007806:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800780a:	2b05      	cmp	r3, #5
 800780c:	d801      	bhi.n	8007812 <__hexdig_fun+0x1a>
 800780e:	3847      	subs	r0, #71	; 0x47
 8007810:	e7f7      	b.n	8007802 <__hexdig_fun+0xa>
 8007812:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007816:	2b05      	cmp	r3, #5
 8007818:	d801      	bhi.n	800781e <__hexdig_fun+0x26>
 800781a:	3827      	subs	r0, #39	; 0x27
 800781c:	e7f1      	b.n	8007802 <__hexdig_fun+0xa>
 800781e:	2000      	movs	r0, #0
 8007820:	4770      	bx	lr
	...

08007824 <__gethex>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	ed2d 8b02 	vpush	{d8}
 800782c:	b089      	sub	sp, #36	; 0x24
 800782e:	ee08 0a10 	vmov	s16, r0
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	4bb4      	ldr	r3, [pc, #720]	; (8007b08 <__gethex+0x2e4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	4618      	mov	r0, r3
 800783c:	468b      	mov	fp, r1
 800783e:	4690      	mov	r8, r2
 8007840:	f7f8 fcc6 	bl	80001d0 <strlen>
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	f8db 2000 	ldr.w	r2, [fp]
 800784a:	4403      	add	r3, r0
 800784c:	4682      	mov	sl, r0
 800784e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007852:	9305      	str	r3, [sp, #20]
 8007854:	1c93      	adds	r3, r2, #2
 8007856:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800785a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800785e:	32fe      	adds	r2, #254	; 0xfe
 8007860:	18d1      	adds	r1, r2, r3
 8007862:	461f      	mov	r7, r3
 8007864:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007868:	9100      	str	r1, [sp, #0]
 800786a:	2830      	cmp	r0, #48	; 0x30
 800786c:	d0f8      	beq.n	8007860 <__gethex+0x3c>
 800786e:	f7ff ffc3 	bl	80077f8 <__hexdig_fun>
 8007872:	4604      	mov	r4, r0
 8007874:	2800      	cmp	r0, #0
 8007876:	d13a      	bne.n	80078ee <__gethex+0xca>
 8007878:	9901      	ldr	r1, [sp, #4]
 800787a:	4652      	mov	r2, sl
 800787c:	4638      	mov	r0, r7
 800787e:	f001 fd0f 	bl	80092a0 <strncmp>
 8007882:	4605      	mov	r5, r0
 8007884:	2800      	cmp	r0, #0
 8007886:	d168      	bne.n	800795a <__gethex+0x136>
 8007888:	f817 000a 	ldrb.w	r0, [r7, sl]
 800788c:	eb07 060a 	add.w	r6, r7, sl
 8007890:	f7ff ffb2 	bl	80077f8 <__hexdig_fun>
 8007894:	2800      	cmp	r0, #0
 8007896:	d062      	beq.n	800795e <__gethex+0x13a>
 8007898:	4633      	mov	r3, r6
 800789a:	7818      	ldrb	r0, [r3, #0]
 800789c:	2830      	cmp	r0, #48	; 0x30
 800789e:	461f      	mov	r7, r3
 80078a0:	f103 0301 	add.w	r3, r3, #1
 80078a4:	d0f9      	beq.n	800789a <__gethex+0x76>
 80078a6:	f7ff ffa7 	bl	80077f8 <__hexdig_fun>
 80078aa:	2301      	movs	r3, #1
 80078ac:	fab0 f480 	clz	r4, r0
 80078b0:	0964      	lsrs	r4, r4, #5
 80078b2:	4635      	mov	r5, r6
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	463a      	mov	r2, r7
 80078b8:	4616      	mov	r6, r2
 80078ba:	3201      	adds	r2, #1
 80078bc:	7830      	ldrb	r0, [r6, #0]
 80078be:	f7ff ff9b 	bl	80077f8 <__hexdig_fun>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1f8      	bne.n	80078b8 <__gethex+0x94>
 80078c6:	9901      	ldr	r1, [sp, #4]
 80078c8:	4652      	mov	r2, sl
 80078ca:	4630      	mov	r0, r6
 80078cc:	f001 fce8 	bl	80092a0 <strncmp>
 80078d0:	b980      	cbnz	r0, 80078f4 <__gethex+0xd0>
 80078d2:	b94d      	cbnz	r5, 80078e8 <__gethex+0xc4>
 80078d4:	eb06 050a 	add.w	r5, r6, sl
 80078d8:	462a      	mov	r2, r5
 80078da:	4616      	mov	r6, r2
 80078dc:	3201      	adds	r2, #1
 80078de:	7830      	ldrb	r0, [r6, #0]
 80078e0:	f7ff ff8a 	bl	80077f8 <__hexdig_fun>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d1f8      	bne.n	80078da <__gethex+0xb6>
 80078e8:	1bad      	subs	r5, r5, r6
 80078ea:	00ad      	lsls	r5, r5, #2
 80078ec:	e004      	b.n	80078f8 <__gethex+0xd4>
 80078ee:	2400      	movs	r4, #0
 80078f0:	4625      	mov	r5, r4
 80078f2:	e7e0      	b.n	80078b6 <__gethex+0x92>
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	d1f7      	bne.n	80078e8 <__gethex+0xc4>
 80078f8:	7833      	ldrb	r3, [r6, #0]
 80078fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078fe:	2b50      	cmp	r3, #80	; 0x50
 8007900:	d13b      	bne.n	800797a <__gethex+0x156>
 8007902:	7873      	ldrb	r3, [r6, #1]
 8007904:	2b2b      	cmp	r3, #43	; 0x2b
 8007906:	d02c      	beq.n	8007962 <__gethex+0x13e>
 8007908:	2b2d      	cmp	r3, #45	; 0x2d
 800790a:	d02e      	beq.n	800796a <__gethex+0x146>
 800790c:	1c71      	adds	r1, r6, #1
 800790e:	f04f 0900 	mov.w	r9, #0
 8007912:	7808      	ldrb	r0, [r1, #0]
 8007914:	f7ff ff70 	bl	80077f8 <__hexdig_fun>
 8007918:	1e43      	subs	r3, r0, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b18      	cmp	r3, #24
 800791e:	d82c      	bhi.n	800797a <__gethex+0x156>
 8007920:	f1a0 0210 	sub.w	r2, r0, #16
 8007924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007928:	f7ff ff66 	bl	80077f8 <__hexdig_fun>
 800792c:	1e43      	subs	r3, r0, #1
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b18      	cmp	r3, #24
 8007932:	d91d      	bls.n	8007970 <__gethex+0x14c>
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d000      	beq.n	800793c <__gethex+0x118>
 800793a:	4252      	negs	r2, r2
 800793c:	4415      	add	r5, r2
 800793e:	f8cb 1000 	str.w	r1, [fp]
 8007942:	b1e4      	cbz	r4, 800797e <__gethex+0x15a>
 8007944:	9b00      	ldr	r3, [sp, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf14      	ite	ne
 800794a:	2700      	movne	r7, #0
 800794c:	2706      	moveq	r7, #6
 800794e:	4638      	mov	r0, r7
 8007950:	b009      	add	sp, #36	; 0x24
 8007952:	ecbd 8b02 	vpop	{d8}
 8007956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795a:	463e      	mov	r6, r7
 800795c:	4625      	mov	r5, r4
 800795e:	2401      	movs	r4, #1
 8007960:	e7ca      	b.n	80078f8 <__gethex+0xd4>
 8007962:	f04f 0900 	mov.w	r9, #0
 8007966:	1cb1      	adds	r1, r6, #2
 8007968:	e7d3      	b.n	8007912 <__gethex+0xee>
 800796a:	f04f 0901 	mov.w	r9, #1
 800796e:	e7fa      	b.n	8007966 <__gethex+0x142>
 8007970:	230a      	movs	r3, #10
 8007972:	fb03 0202 	mla	r2, r3, r2, r0
 8007976:	3a10      	subs	r2, #16
 8007978:	e7d4      	b.n	8007924 <__gethex+0x100>
 800797a:	4631      	mov	r1, r6
 800797c:	e7df      	b.n	800793e <__gethex+0x11a>
 800797e:	1bf3      	subs	r3, r6, r7
 8007980:	3b01      	subs	r3, #1
 8007982:	4621      	mov	r1, r4
 8007984:	2b07      	cmp	r3, #7
 8007986:	dc0b      	bgt.n	80079a0 <__gethex+0x17c>
 8007988:	ee18 0a10 	vmov	r0, s16
 800798c:	f000 fa6c 	bl	8007e68 <_Balloc>
 8007990:	4604      	mov	r4, r0
 8007992:	b940      	cbnz	r0, 80079a6 <__gethex+0x182>
 8007994:	4b5d      	ldr	r3, [pc, #372]	; (8007b0c <__gethex+0x2e8>)
 8007996:	4602      	mov	r2, r0
 8007998:	21de      	movs	r1, #222	; 0xde
 800799a:	485d      	ldr	r0, [pc, #372]	; (8007b10 <__gethex+0x2ec>)
 800799c:	f7ff feaa 	bl	80076f4 <__assert_func>
 80079a0:	3101      	adds	r1, #1
 80079a2:	105b      	asrs	r3, r3, #1
 80079a4:	e7ee      	b.n	8007984 <__gethex+0x160>
 80079a6:	f100 0914 	add.w	r9, r0, #20
 80079aa:	f04f 0b00 	mov.w	fp, #0
 80079ae:	f1ca 0301 	rsb	r3, sl, #1
 80079b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80079b6:	f8cd b000 	str.w	fp, [sp]
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	42b7      	cmp	r7, r6
 80079be:	d340      	bcc.n	8007a42 <__gethex+0x21e>
 80079c0:	9802      	ldr	r0, [sp, #8]
 80079c2:	9b00      	ldr	r3, [sp, #0]
 80079c4:	f840 3b04 	str.w	r3, [r0], #4
 80079c8:	eba0 0009 	sub.w	r0, r0, r9
 80079cc:	1080      	asrs	r0, r0, #2
 80079ce:	0146      	lsls	r6, r0, #5
 80079d0:	6120      	str	r0, [r4, #16]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fb3a 	bl	800804c <__hi0bits>
 80079d8:	1a30      	subs	r0, r6, r0
 80079da:	f8d8 6000 	ldr.w	r6, [r8]
 80079de:	42b0      	cmp	r0, r6
 80079e0:	dd63      	ble.n	8007aaa <__gethex+0x286>
 80079e2:	1b87      	subs	r7, r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 fede 	bl	80087a8 <__any_on>
 80079ec:	4682      	mov	sl, r0
 80079ee:	b1a8      	cbz	r0, 8007a1c <__gethex+0x1f8>
 80079f0:	1e7b      	subs	r3, r7, #1
 80079f2:	1159      	asrs	r1, r3, #5
 80079f4:	f003 021f 	and.w	r2, r3, #31
 80079f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079fc:	f04f 0a01 	mov.w	sl, #1
 8007a00:	fa0a f202 	lsl.w	r2, sl, r2
 8007a04:	420a      	tst	r2, r1
 8007a06:	d009      	beq.n	8007a1c <__gethex+0x1f8>
 8007a08:	4553      	cmp	r3, sl
 8007a0a:	dd05      	ble.n	8007a18 <__gethex+0x1f4>
 8007a0c:	1eb9      	subs	r1, r7, #2
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f000 feca 	bl	80087a8 <__any_on>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d145      	bne.n	8007aa4 <__gethex+0x280>
 8007a18:	f04f 0a02 	mov.w	sl, #2
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7ff fe98 	bl	8007754 <rshift>
 8007a24:	443d      	add	r5, r7
 8007a26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a2a:	42ab      	cmp	r3, r5
 8007a2c:	da4c      	bge.n	8007ac8 <__gethex+0x2a4>
 8007a2e:	ee18 0a10 	vmov	r0, s16
 8007a32:	4621      	mov	r1, r4
 8007a34:	f000 fa58 	bl	8007ee8 <_Bfree>
 8007a38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	27a3      	movs	r7, #163	; 0xa3
 8007a40:	e785      	b.n	800794e <__gethex+0x12a>
 8007a42:	1e73      	subs	r3, r6, #1
 8007a44:	9a05      	ldr	r2, [sp, #20]
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d019      	beq.n	8007a84 <__gethex+0x260>
 8007a50:	f1bb 0f20 	cmp.w	fp, #32
 8007a54:	d107      	bne.n	8007a66 <__gethex+0x242>
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	9a00      	ldr	r2, [sp, #0]
 8007a5a:	f843 2b04 	str.w	r2, [r3], #4
 8007a5e:	9302      	str	r3, [sp, #8]
 8007a60:	2300      	movs	r3, #0
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	469b      	mov	fp, r3
 8007a66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a6a:	f7ff fec5 	bl	80077f8 <__hexdig_fun>
 8007a6e:	9b00      	ldr	r3, [sp, #0]
 8007a70:	f000 000f 	and.w	r0, r0, #15
 8007a74:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a78:	4303      	orrs	r3, r0
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	f10b 0b04 	add.w	fp, fp, #4
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	e00d      	b.n	8007aa0 <__gethex+0x27c>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	9a06      	ldr	r2, [sp, #24]
 8007a88:	4413      	add	r3, r2
 8007a8a:	42bb      	cmp	r3, r7
 8007a8c:	d3e0      	bcc.n	8007a50 <__gethex+0x22c>
 8007a8e:	4618      	mov	r0, r3
 8007a90:	9901      	ldr	r1, [sp, #4]
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	4652      	mov	r2, sl
 8007a96:	f001 fc03 	bl	80092a0 <strncmp>
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d1d7      	bne.n	8007a50 <__gethex+0x22c>
 8007aa0:	461e      	mov	r6, r3
 8007aa2:	e78b      	b.n	80079bc <__gethex+0x198>
 8007aa4:	f04f 0a03 	mov.w	sl, #3
 8007aa8:	e7b8      	b.n	8007a1c <__gethex+0x1f8>
 8007aaa:	da0a      	bge.n	8007ac2 <__gethex+0x29e>
 8007aac:	1a37      	subs	r7, r6, r0
 8007aae:	4621      	mov	r1, r4
 8007ab0:	ee18 0a10 	vmov	r0, s16
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	f000 fc33 	bl	8008320 <__lshift>
 8007aba:	1bed      	subs	r5, r5, r7
 8007abc:	4604      	mov	r4, r0
 8007abe:	f100 0914 	add.w	r9, r0, #20
 8007ac2:	f04f 0a00 	mov.w	sl, #0
 8007ac6:	e7ae      	b.n	8007a26 <__gethex+0x202>
 8007ac8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007acc:	42a8      	cmp	r0, r5
 8007ace:	dd72      	ble.n	8007bb6 <__gethex+0x392>
 8007ad0:	1b45      	subs	r5, r0, r5
 8007ad2:	42ae      	cmp	r6, r5
 8007ad4:	dc36      	bgt.n	8007b44 <__gethex+0x320>
 8007ad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d02a      	beq.n	8007b34 <__gethex+0x310>
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d02c      	beq.n	8007b3c <__gethex+0x318>
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d11c      	bne.n	8007b20 <__gethex+0x2fc>
 8007ae6:	42ae      	cmp	r6, r5
 8007ae8:	d11a      	bne.n	8007b20 <__gethex+0x2fc>
 8007aea:	2e01      	cmp	r6, #1
 8007aec:	d112      	bne.n	8007b14 <__gethex+0x2f0>
 8007aee:	9a04      	ldr	r2, [sp, #16]
 8007af0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	2301      	movs	r3, #1
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	f8c9 3000 	str.w	r3, [r9]
 8007afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b00:	2762      	movs	r7, #98	; 0x62
 8007b02:	601c      	str	r4, [r3, #0]
 8007b04:	e723      	b.n	800794e <__gethex+0x12a>
 8007b06:	bf00      	nop
 8007b08:	0800ace8 	.word	0x0800ace8
 8007b0c:	0800ac71 	.word	0x0800ac71
 8007b10:	0800ac82 	.word	0x0800ac82
 8007b14:	1e71      	subs	r1, r6, #1
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fe46 	bl	80087a8 <__any_on>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1e6      	bne.n	8007aee <__gethex+0x2ca>
 8007b20:	ee18 0a10 	vmov	r0, s16
 8007b24:	4621      	mov	r1, r4
 8007b26:	f000 f9df 	bl	8007ee8 <_Bfree>
 8007b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	2750      	movs	r7, #80	; 0x50
 8007b32:	e70c      	b.n	800794e <__gethex+0x12a>
 8007b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f2      	bne.n	8007b20 <__gethex+0x2fc>
 8007b3a:	e7d8      	b.n	8007aee <__gethex+0x2ca>
 8007b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1d5      	bne.n	8007aee <__gethex+0x2ca>
 8007b42:	e7ed      	b.n	8007b20 <__gethex+0x2fc>
 8007b44:	1e6f      	subs	r7, r5, #1
 8007b46:	f1ba 0f00 	cmp.w	sl, #0
 8007b4a:	d131      	bne.n	8007bb0 <__gethex+0x38c>
 8007b4c:	b127      	cbz	r7, 8007b58 <__gethex+0x334>
 8007b4e:	4639      	mov	r1, r7
 8007b50:	4620      	mov	r0, r4
 8007b52:	f000 fe29 	bl	80087a8 <__any_on>
 8007b56:	4682      	mov	sl, r0
 8007b58:	117b      	asrs	r3, r7, #5
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b60:	f007 071f 	and.w	r7, r7, #31
 8007b64:	fa01 f707 	lsl.w	r7, r1, r7
 8007b68:	421f      	tst	r7, r3
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	bf18      	it	ne
 8007b70:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b74:	1b76      	subs	r6, r6, r5
 8007b76:	f7ff fded 	bl	8007754 <rshift>
 8007b7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b7e:	2702      	movs	r7, #2
 8007b80:	f1ba 0f00 	cmp.w	sl, #0
 8007b84:	d048      	beq.n	8007c18 <__gethex+0x3f4>
 8007b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d015      	beq.n	8007bba <__gethex+0x396>
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d017      	beq.n	8007bc2 <__gethex+0x39e>
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d109      	bne.n	8007baa <__gethex+0x386>
 8007b96:	f01a 0f02 	tst.w	sl, #2
 8007b9a:	d006      	beq.n	8007baa <__gethex+0x386>
 8007b9c:	f8d9 0000 	ldr.w	r0, [r9]
 8007ba0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007ba4:	f01a 0f01 	tst.w	sl, #1
 8007ba8:	d10e      	bne.n	8007bc8 <__gethex+0x3a4>
 8007baa:	f047 0710 	orr.w	r7, r7, #16
 8007bae:	e033      	b.n	8007c18 <__gethex+0x3f4>
 8007bb0:	f04f 0a01 	mov.w	sl, #1
 8007bb4:	e7d0      	b.n	8007b58 <__gethex+0x334>
 8007bb6:	2701      	movs	r7, #1
 8007bb8:	e7e2      	b.n	8007b80 <__gethex+0x35c>
 8007bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bbc:	f1c3 0301 	rsb	r3, r3, #1
 8007bc0:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <__gethex+0x386>
 8007bc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bcc:	f104 0314 	add.w	r3, r4, #20
 8007bd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007bd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007bd8:	f04f 0c00 	mov.w	ip, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007be6:	d01c      	beq.n	8007c22 <__gethex+0x3fe>
 8007be8:	3201      	adds	r2, #1
 8007bea:	6002      	str	r2, [r0, #0]
 8007bec:	2f02      	cmp	r7, #2
 8007bee:	f104 0314 	add.w	r3, r4, #20
 8007bf2:	d13f      	bne.n	8007c74 <__gethex+0x450>
 8007bf4:	f8d8 2000 	ldr.w	r2, [r8]
 8007bf8:	3a01      	subs	r2, #1
 8007bfa:	42b2      	cmp	r2, r6
 8007bfc:	d10a      	bne.n	8007c14 <__gethex+0x3f0>
 8007bfe:	1171      	asrs	r1, r6, #5
 8007c00:	2201      	movs	r2, #1
 8007c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c06:	f006 061f 	and.w	r6, r6, #31
 8007c0a:	fa02 f606 	lsl.w	r6, r2, r6
 8007c0e:	421e      	tst	r6, r3
 8007c10:	bf18      	it	ne
 8007c12:	4617      	movne	r7, r2
 8007c14:	f047 0720 	orr.w	r7, r7, #32
 8007c18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c1a:	601c      	str	r4, [r3, #0]
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	601d      	str	r5, [r3, #0]
 8007c20:	e695      	b.n	800794e <__gethex+0x12a>
 8007c22:	4299      	cmp	r1, r3
 8007c24:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c28:	d8d8      	bhi.n	8007bdc <__gethex+0x3b8>
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	459b      	cmp	fp, r3
 8007c2e:	db19      	blt.n	8007c64 <__gethex+0x440>
 8007c30:	6861      	ldr	r1, [r4, #4]
 8007c32:	ee18 0a10 	vmov	r0, s16
 8007c36:	3101      	adds	r1, #1
 8007c38:	f000 f916 	bl	8007e68 <_Balloc>
 8007c3c:	4681      	mov	r9, r0
 8007c3e:	b918      	cbnz	r0, 8007c48 <__gethex+0x424>
 8007c40:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <__gethex+0x488>)
 8007c42:	4602      	mov	r2, r0
 8007c44:	2184      	movs	r1, #132	; 0x84
 8007c46:	e6a8      	b.n	800799a <__gethex+0x176>
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	3202      	adds	r2, #2
 8007c4c:	f104 010c 	add.w	r1, r4, #12
 8007c50:	0092      	lsls	r2, r2, #2
 8007c52:	300c      	adds	r0, #12
 8007c54:	f7fe fdea 	bl	800682c <memcpy>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	ee18 0a10 	vmov	r0, s16
 8007c5e:	f000 f943 	bl	8007ee8 <_Bfree>
 8007c62:	464c      	mov	r4, r9
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c6c:	6122      	str	r2, [r4, #16]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	615a      	str	r2, [r3, #20]
 8007c72:	e7bb      	b.n	8007bec <__gethex+0x3c8>
 8007c74:	6922      	ldr	r2, [r4, #16]
 8007c76:	455a      	cmp	r2, fp
 8007c78:	dd0b      	ble.n	8007c92 <__gethex+0x46e>
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f7ff fd69 	bl	8007754 <rshift>
 8007c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c86:	3501      	adds	r5, #1
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	f6ff aed0 	blt.w	8007a2e <__gethex+0x20a>
 8007c8e:	2701      	movs	r7, #1
 8007c90:	e7c0      	b.n	8007c14 <__gethex+0x3f0>
 8007c92:	f016 061f 	ands.w	r6, r6, #31
 8007c96:	d0fa      	beq.n	8007c8e <__gethex+0x46a>
 8007c98:	4453      	add	r3, sl
 8007c9a:	f1c6 0620 	rsb	r6, r6, #32
 8007c9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ca2:	f000 f9d3 	bl	800804c <__hi0bits>
 8007ca6:	42b0      	cmp	r0, r6
 8007ca8:	dbe7      	blt.n	8007c7a <__gethex+0x456>
 8007caa:	e7f0      	b.n	8007c8e <__gethex+0x46a>
 8007cac:	0800ac71 	.word	0x0800ac71

08007cb0 <L_shift>:
 8007cb0:	f1c2 0208 	rsb	r2, r2, #8
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	b570      	push	{r4, r5, r6, lr}
 8007cb8:	f1c2 0620 	rsb	r6, r2, #32
 8007cbc:	6843      	ldr	r3, [r0, #4]
 8007cbe:	6804      	ldr	r4, [r0, #0]
 8007cc0:	fa03 f506 	lsl.w	r5, r3, r6
 8007cc4:	432c      	orrs	r4, r5
 8007cc6:	40d3      	lsrs	r3, r2
 8007cc8:	6004      	str	r4, [r0, #0]
 8007cca:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cce:	4288      	cmp	r0, r1
 8007cd0:	d3f4      	bcc.n	8007cbc <L_shift+0xc>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <__match>:
 8007cd4:	b530      	push	{r4, r5, lr}
 8007cd6:	6803      	ldr	r3, [r0, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cde:	b914      	cbnz	r4, 8007ce6 <__match+0x12>
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	bd30      	pop	{r4, r5, pc}
 8007ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007cee:	2d19      	cmp	r5, #25
 8007cf0:	bf98      	it	ls
 8007cf2:	3220      	addls	r2, #32
 8007cf4:	42a2      	cmp	r2, r4
 8007cf6:	d0f0      	beq.n	8007cda <__match+0x6>
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e7f3      	b.n	8007ce4 <__match+0x10>

08007cfc <__hexnan>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	680b      	ldr	r3, [r1, #0]
 8007d02:	115e      	asrs	r6, r3, #5
 8007d04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d08:	f013 031f 	ands.w	r3, r3, #31
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	bf18      	it	ne
 8007d10:	3604      	addne	r6, #4
 8007d12:	2500      	movs	r5, #0
 8007d14:	1f37      	subs	r7, r6, #4
 8007d16:	4690      	mov	r8, r2
 8007d18:	6802      	ldr	r2, [r0, #0]
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d22:	46b9      	mov	r9, r7
 8007d24:	463c      	mov	r4, r7
 8007d26:	9502      	str	r5, [sp, #8]
 8007d28:	46ab      	mov	fp, r5
 8007d2a:	7851      	ldrb	r1, [r2, #1]
 8007d2c:	1c53      	adds	r3, r2, #1
 8007d2e:	9303      	str	r3, [sp, #12]
 8007d30:	b341      	cbz	r1, 8007d84 <__hexnan+0x88>
 8007d32:	4608      	mov	r0, r1
 8007d34:	9205      	str	r2, [sp, #20]
 8007d36:	9104      	str	r1, [sp, #16]
 8007d38:	f7ff fd5e 	bl	80077f8 <__hexdig_fun>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d14f      	bne.n	8007de0 <__hexnan+0xe4>
 8007d40:	9904      	ldr	r1, [sp, #16]
 8007d42:	9a05      	ldr	r2, [sp, #20]
 8007d44:	2920      	cmp	r1, #32
 8007d46:	d818      	bhi.n	8007d7a <__hexnan+0x7e>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	459b      	cmp	fp, r3
 8007d4c:	dd13      	ble.n	8007d76 <__hexnan+0x7a>
 8007d4e:	454c      	cmp	r4, r9
 8007d50:	d206      	bcs.n	8007d60 <__hexnan+0x64>
 8007d52:	2d07      	cmp	r5, #7
 8007d54:	dc04      	bgt.n	8007d60 <__hexnan+0x64>
 8007d56:	462a      	mov	r2, r5
 8007d58:	4649      	mov	r1, r9
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff ffa8 	bl	8007cb0 <L_shift>
 8007d60:	4544      	cmp	r4, r8
 8007d62:	d950      	bls.n	8007e06 <__hexnan+0x10a>
 8007d64:	2300      	movs	r3, #0
 8007d66:	f1a4 0904 	sub.w	r9, r4, #4
 8007d6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d6e:	f8cd b008 	str.w	fp, [sp, #8]
 8007d72:	464c      	mov	r4, r9
 8007d74:	461d      	mov	r5, r3
 8007d76:	9a03      	ldr	r2, [sp, #12]
 8007d78:	e7d7      	b.n	8007d2a <__hexnan+0x2e>
 8007d7a:	2929      	cmp	r1, #41	; 0x29
 8007d7c:	d156      	bne.n	8007e2c <__hexnan+0x130>
 8007d7e:	3202      	adds	r2, #2
 8007d80:	f8ca 2000 	str.w	r2, [sl]
 8007d84:	f1bb 0f00 	cmp.w	fp, #0
 8007d88:	d050      	beq.n	8007e2c <__hexnan+0x130>
 8007d8a:	454c      	cmp	r4, r9
 8007d8c:	d206      	bcs.n	8007d9c <__hexnan+0xa0>
 8007d8e:	2d07      	cmp	r5, #7
 8007d90:	dc04      	bgt.n	8007d9c <__hexnan+0xa0>
 8007d92:	462a      	mov	r2, r5
 8007d94:	4649      	mov	r1, r9
 8007d96:	4620      	mov	r0, r4
 8007d98:	f7ff ff8a 	bl	8007cb0 <L_shift>
 8007d9c:	4544      	cmp	r4, r8
 8007d9e:	d934      	bls.n	8007e0a <__hexnan+0x10e>
 8007da0:	f1a8 0204 	sub.w	r2, r8, #4
 8007da4:	4623      	mov	r3, r4
 8007da6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007daa:	f842 1f04 	str.w	r1, [r2, #4]!
 8007dae:	429f      	cmp	r7, r3
 8007db0:	d2f9      	bcs.n	8007da6 <__hexnan+0xaa>
 8007db2:	1b3b      	subs	r3, r7, r4
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	3304      	adds	r3, #4
 8007dba:	3401      	adds	r4, #1
 8007dbc:	3e03      	subs	r6, #3
 8007dbe:	42b4      	cmp	r4, r6
 8007dc0:	bf88      	it	hi
 8007dc2:	2304      	movhi	r3, #4
 8007dc4:	4443      	add	r3, r8
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f843 2b04 	str.w	r2, [r3], #4
 8007dcc:	429f      	cmp	r7, r3
 8007dce:	d2fb      	bcs.n	8007dc8 <__hexnan+0xcc>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	b91b      	cbnz	r3, 8007ddc <__hexnan+0xe0>
 8007dd4:	4547      	cmp	r7, r8
 8007dd6:	d127      	bne.n	8007e28 <__hexnan+0x12c>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	2005      	movs	r0, #5
 8007dde:	e026      	b.n	8007e2e <__hexnan+0x132>
 8007de0:	3501      	adds	r5, #1
 8007de2:	2d08      	cmp	r5, #8
 8007de4:	f10b 0b01 	add.w	fp, fp, #1
 8007de8:	dd06      	ble.n	8007df8 <__hexnan+0xfc>
 8007dea:	4544      	cmp	r4, r8
 8007dec:	d9c3      	bls.n	8007d76 <__hexnan+0x7a>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007df4:	2501      	movs	r5, #1
 8007df6:	3c04      	subs	r4, #4
 8007df8:	6822      	ldr	r2, [r4, #0]
 8007dfa:	f000 000f 	and.w	r0, r0, #15
 8007dfe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	e7b7      	b.n	8007d76 <__hexnan+0x7a>
 8007e06:	2508      	movs	r5, #8
 8007e08:	e7b5      	b.n	8007d76 <__hexnan+0x7a>
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0df      	beq.n	8007dd0 <__hexnan+0xd4>
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295
 8007e14:	f1c3 0320 	rsb	r3, r3, #32
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e20:	401a      	ands	r2, r3
 8007e22:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e26:	e7d3      	b.n	8007dd0 <__hexnan+0xd4>
 8007e28:	3f04      	subs	r7, #4
 8007e2a:	e7d1      	b.n	8007dd0 <__hexnan+0xd4>
 8007e2c:	2004      	movs	r0, #4
 8007e2e:	b007      	add	sp, #28
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e34 <malloc>:
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <malloc+0xc>)
 8007e36:	4601      	mov	r1, r0
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	f000 bd59 	b.w	80088f0 <_malloc_r>
 8007e3e:	bf00      	nop
 8007e40:	2000004c 	.word	0x2000004c

08007e44 <__ascii_mbtowc>:
 8007e44:	b082      	sub	sp, #8
 8007e46:	b901      	cbnz	r1, 8007e4a <__ascii_mbtowc+0x6>
 8007e48:	a901      	add	r1, sp, #4
 8007e4a:	b142      	cbz	r2, 8007e5e <__ascii_mbtowc+0x1a>
 8007e4c:	b14b      	cbz	r3, 8007e62 <__ascii_mbtowc+0x1e>
 8007e4e:	7813      	ldrb	r3, [r2, #0]
 8007e50:	600b      	str	r3, [r1, #0]
 8007e52:	7812      	ldrb	r2, [r2, #0]
 8007e54:	1e10      	subs	r0, r2, #0
 8007e56:	bf18      	it	ne
 8007e58:	2001      	movne	r0, #1
 8007e5a:	b002      	add	sp, #8
 8007e5c:	4770      	bx	lr
 8007e5e:	4610      	mov	r0, r2
 8007e60:	e7fb      	b.n	8007e5a <__ascii_mbtowc+0x16>
 8007e62:	f06f 0001 	mvn.w	r0, #1
 8007e66:	e7f8      	b.n	8007e5a <__ascii_mbtowc+0x16>

08007e68 <_Balloc>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	b976      	cbnz	r6, 8007e90 <_Balloc+0x28>
 8007e72:	2010      	movs	r0, #16
 8007e74:	f7ff ffde 	bl	8007e34 <malloc>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e7c:	b920      	cbnz	r0, 8007e88 <_Balloc+0x20>
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <_Balloc+0x78>)
 8007e80:	4818      	ldr	r0, [pc, #96]	; (8007ee4 <_Balloc+0x7c>)
 8007e82:	2166      	movs	r1, #102	; 0x66
 8007e84:	f7ff fc36 	bl	80076f4 <__assert_func>
 8007e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e8c:	6006      	str	r6, [r0, #0]
 8007e8e:	60c6      	str	r6, [r0, #12]
 8007e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e92:	68f3      	ldr	r3, [r6, #12]
 8007e94:	b183      	cbz	r3, 8007eb8 <_Balloc+0x50>
 8007e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e9e:	b9b8      	cbnz	r0, 8007ed0 <_Balloc+0x68>
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ea6:	1d72      	adds	r2, r6, #5
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fc9d 	bl	80087ea <_calloc_r>
 8007eb0:	b160      	cbz	r0, 8007ecc <_Balloc+0x64>
 8007eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eb6:	e00e      	b.n	8007ed6 <_Balloc+0x6e>
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fc94 	bl	80087ea <_calloc_r>
 8007ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec4:	60f0      	str	r0, [r6, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <_Balloc+0x2e>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	6802      	ldr	r2, [r0, #0]
 8007ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007edc:	e7f7      	b.n	8007ece <_Balloc+0x66>
 8007ede:	bf00      	nop
 8007ee0:	0800aac0 	.word	0x0800aac0
 8007ee4:	0800acfc 	.word	0x0800acfc

08007ee8 <_Bfree>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b976      	cbnz	r6, 8007f10 <_Bfree+0x28>
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7ff ff9e 	bl	8007e34 <malloc>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6268      	str	r0, [r5, #36]	; 0x24
 8007efc:	b920      	cbnz	r0, 8007f08 <_Bfree+0x20>
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_Bfree+0x3c>)
 8007f00:	4809      	ldr	r0, [pc, #36]	; (8007f28 <_Bfree+0x40>)
 8007f02:	218a      	movs	r1, #138	; 0x8a
 8007f04:	f7ff fbf6 	bl	80076f4 <__assert_func>
 8007f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f0c:	6006      	str	r6, [r0, #0]
 8007f0e:	60c6      	str	r6, [r0, #12]
 8007f10:	b13c      	cbz	r4, 8007f22 <_Bfree+0x3a>
 8007f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f14:	6862      	ldr	r2, [r4, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f1c:	6021      	str	r1, [r4, #0]
 8007f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	0800aac0 	.word	0x0800aac0
 8007f28:	0800acfc 	.word	0x0800acfc

08007f2c <__multadd>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	690d      	ldr	r5, [r1, #16]
 8007f32:	4607      	mov	r7, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	461e      	mov	r6, r3
 8007f38:	f101 0c14 	add.w	ip, r1, #20
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f42:	b299      	uxth	r1, r3
 8007f44:	fb02 6101 	mla	r1, r2, r1, r6
 8007f48:	0c1e      	lsrs	r6, r3, #16
 8007f4a:	0c0b      	lsrs	r3, r1, #16
 8007f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f50:	b289      	uxth	r1, r1
 8007f52:	3001      	adds	r0, #1
 8007f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f58:	4285      	cmp	r5, r0
 8007f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f62:	dcec      	bgt.n	8007f3e <__multadd+0x12>
 8007f64:	b30e      	cbz	r6, 8007faa <__multadd+0x7e>
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc19      	bgt.n	8007fa0 <__multadd+0x74>
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	4638      	mov	r0, r7
 8007f70:	3101      	adds	r1, #1
 8007f72:	f7ff ff79 	bl	8007e68 <_Balloc>
 8007f76:	4680      	mov	r8, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__multadd+0x5a>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <__multadd+0x84>)
 8007f7e:	480d      	ldr	r0, [pc, #52]	; (8007fb4 <__multadd+0x88>)
 8007f80:	21b5      	movs	r1, #181	; 0xb5
 8007f82:	f7ff fbb7 	bl	80076f4 <__assert_func>
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	3202      	adds	r2, #2
 8007f8a:	f104 010c 	add.w	r1, r4, #12
 8007f8e:	0092      	lsls	r2, r2, #2
 8007f90:	300c      	adds	r0, #12
 8007f92:	f7fe fc4b 	bl	800682c <memcpy>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff ffa5 	bl	8007ee8 <_Bfree>
 8007f9e:	4644      	mov	r4, r8
 8007fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	615e      	str	r6, [r3, #20]
 8007fa8:	6125      	str	r5, [r4, #16]
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb0:	0800ac71 	.word	0x0800ac71
 8007fb4:	0800acfc 	.word	0x0800acfc

08007fb8 <__s2b>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	4615      	mov	r5, r2
 8007fc0:	461f      	mov	r7, r3
 8007fc2:	2209      	movs	r2, #9
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fcc:	2100      	movs	r1, #0
 8007fce:	2201      	movs	r2, #1
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	db09      	blt.n	8007fe8 <__s2b+0x30>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ff47 	bl	8007e68 <_Balloc>
 8007fda:	b940      	cbnz	r0, 8007fee <__s2b+0x36>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <__s2b+0x8c>)
 8007fe0:	4819      	ldr	r0, [pc, #100]	; (8008048 <__s2b+0x90>)
 8007fe2:	21ce      	movs	r1, #206	; 0xce
 8007fe4:	f7ff fb86 	bl	80076f4 <__assert_func>
 8007fe8:	0052      	lsls	r2, r2, #1
 8007fea:	3101      	adds	r1, #1
 8007fec:	e7f0      	b.n	8007fd0 <__s2b+0x18>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	6143      	str	r3, [r0, #20]
 8007ff2:	2d09      	cmp	r5, #9
 8007ff4:	f04f 0301 	mov.w	r3, #1
 8007ff8:	6103      	str	r3, [r0, #16]
 8007ffa:	dd16      	ble.n	800802a <__s2b+0x72>
 8007ffc:	f104 0909 	add.w	r9, r4, #9
 8008000:	46c8      	mov	r8, r9
 8008002:	442c      	add	r4, r5
 8008004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008008:	4601      	mov	r1, r0
 800800a:	3b30      	subs	r3, #48	; 0x30
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff8c 	bl	8007f2c <__multadd>
 8008014:	45a0      	cmp	r8, r4
 8008016:	d1f5      	bne.n	8008004 <__s2b+0x4c>
 8008018:	f1a5 0408 	sub.w	r4, r5, #8
 800801c:	444c      	add	r4, r9
 800801e:	1b2d      	subs	r5, r5, r4
 8008020:	1963      	adds	r3, r4, r5
 8008022:	42bb      	cmp	r3, r7
 8008024:	db04      	blt.n	8008030 <__s2b+0x78>
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	340a      	adds	r4, #10
 800802c:	2509      	movs	r5, #9
 800802e:	e7f6      	b.n	800801e <__s2b+0x66>
 8008030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008034:	4601      	mov	r1, r0
 8008036:	3b30      	subs	r3, #48	; 0x30
 8008038:	220a      	movs	r2, #10
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff76 	bl	8007f2c <__multadd>
 8008040:	e7ee      	b.n	8008020 <__s2b+0x68>
 8008042:	bf00      	nop
 8008044:	0800ac71 	.word	0x0800ac71
 8008048:	0800acfc 	.word	0x0800acfc

0800804c <__hi0bits>:
 800804c:	0c03      	lsrs	r3, r0, #16
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	b9d3      	cbnz	r3, 8008088 <__hi0bits+0x3c>
 8008052:	0400      	lsls	r0, r0, #16
 8008054:	2310      	movs	r3, #16
 8008056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800805a:	bf04      	itt	eq
 800805c:	0200      	lsleq	r0, r0, #8
 800805e:	3308      	addeq	r3, #8
 8008060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008064:	bf04      	itt	eq
 8008066:	0100      	lsleq	r0, r0, #4
 8008068:	3304      	addeq	r3, #4
 800806a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800806e:	bf04      	itt	eq
 8008070:	0080      	lsleq	r0, r0, #2
 8008072:	3302      	addeq	r3, #2
 8008074:	2800      	cmp	r0, #0
 8008076:	db05      	blt.n	8008084 <__hi0bits+0x38>
 8008078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800807c:	f103 0301 	add.w	r3, r3, #1
 8008080:	bf08      	it	eq
 8008082:	2320      	moveq	r3, #32
 8008084:	4618      	mov	r0, r3
 8008086:	4770      	bx	lr
 8008088:	2300      	movs	r3, #0
 800808a:	e7e4      	b.n	8008056 <__hi0bits+0xa>

0800808c <__lo0bits>:
 800808c:	6803      	ldr	r3, [r0, #0]
 800808e:	f013 0207 	ands.w	r2, r3, #7
 8008092:	4601      	mov	r1, r0
 8008094:	d00b      	beq.n	80080ae <__lo0bits+0x22>
 8008096:	07da      	lsls	r2, r3, #31
 8008098:	d423      	bmi.n	80080e2 <__lo0bits+0x56>
 800809a:	0798      	lsls	r0, r3, #30
 800809c:	bf49      	itett	mi
 800809e:	085b      	lsrmi	r3, r3, #1
 80080a0:	089b      	lsrpl	r3, r3, #2
 80080a2:	2001      	movmi	r0, #1
 80080a4:	600b      	strmi	r3, [r1, #0]
 80080a6:	bf5c      	itt	pl
 80080a8:	600b      	strpl	r3, [r1, #0]
 80080aa:	2002      	movpl	r0, #2
 80080ac:	4770      	bx	lr
 80080ae:	b298      	uxth	r0, r3
 80080b0:	b9a8      	cbnz	r0, 80080de <__lo0bits+0x52>
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	2010      	movs	r0, #16
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	b90a      	cbnz	r2, 80080be <__lo0bits+0x32>
 80080ba:	3008      	adds	r0, #8
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	071a      	lsls	r2, r3, #28
 80080c0:	bf04      	itt	eq
 80080c2:	091b      	lsreq	r3, r3, #4
 80080c4:	3004      	addeq	r0, #4
 80080c6:	079a      	lsls	r2, r3, #30
 80080c8:	bf04      	itt	eq
 80080ca:	089b      	lsreq	r3, r3, #2
 80080cc:	3002      	addeq	r0, #2
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d403      	bmi.n	80080da <__lo0bits+0x4e>
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f100 0001 	add.w	r0, r0, #1
 80080d8:	d005      	beq.n	80080e6 <__lo0bits+0x5a>
 80080da:	600b      	str	r3, [r1, #0]
 80080dc:	4770      	bx	lr
 80080de:	4610      	mov	r0, r2
 80080e0:	e7e9      	b.n	80080b6 <__lo0bits+0x2a>
 80080e2:	2000      	movs	r0, #0
 80080e4:	4770      	bx	lr
 80080e6:	2020      	movs	r0, #32
 80080e8:	4770      	bx	lr
	...

080080ec <__i2b>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	2101      	movs	r1, #1
 80080f2:	f7ff feb9 	bl	8007e68 <_Balloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	b928      	cbnz	r0, 8008106 <__i2b+0x1a>
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <__i2b+0x24>)
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <__i2b+0x28>)
 80080fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008102:	f7ff faf7 	bl	80076f4 <__assert_func>
 8008106:	2301      	movs	r3, #1
 8008108:	6144      	str	r4, [r0, #20]
 800810a:	6103      	str	r3, [r0, #16]
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	0800ac71 	.word	0x0800ac71
 8008114:	0800acfc 	.word	0x0800acfc

08008118 <__multiply>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4691      	mov	r9, r2
 800811e:	690a      	ldr	r2, [r1, #16]
 8008120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	bfb8      	it	lt
 8008128:	460b      	movlt	r3, r1
 800812a:	460c      	mov	r4, r1
 800812c:	bfbc      	itt	lt
 800812e:	464c      	movlt	r4, r9
 8008130:	4699      	movlt	r9, r3
 8008132:	6927      	ldr	r7, [r4, #16]
 8008134:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	6861      	ldr	r1, [r4, #4]
 800813c:	eb07 060a 	add.w	r6, r7, sl
 8008140:	42b3      	cmp	r3, r6
 8008142:	b085      	sub	sp, #20
 8008144:	bfb8      	it	lt
 8008146:	3101      	addlt	r1, #1
 8008148:	f7ff fe8e 	bl	8007e68 <_Balloc>
 800814c:	b930      	cbnz	r0, 800815c <__multiply+0x44>
 800814e:	4602      	mov	r2, r0
 8008150:	4b44      	ldr	r3, [pc, #272]	; (8008264 <__multiply+0x14c>)
 8008152:	4845      	ldr	r0, [pc, #276]	; (8008268 <__multiply+0x150>)
 8008154:	f240 115d 	movw	r1, #349	; 0x15d
 8008158:	f7ff facc 	bl	80076f4 <__assert_func>
 800815c:	f100 0514 	add.w	r5, r0, #20
 8008160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008164:	462b      	mov	r3, r5
 8008166:	2200      	movs	r2, #0
 8008168:	4543      	cmp	r3, r8
 800816a:	d321      	bcc.n	80081b0 <__multiply+0x98>
 800816c:	f104 0314 	add.w	r3, r4, #20
 8008170:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008174:	f109 0314 	add.w	r3, r9, #20
 8008178:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	1b3a      	subs	r2, r7, r4
 8008180:	3a15      	subs	r2, #21
 8008182:	f022 0203 	bic.w	r2, r2, #3
 8008186:	3204      	adds	r2, #4
 8008188:	f104 0115 	add.w	r1, r4, #21
 800818c:	428f      	cmp	r7, r1
 800818e:	bf38      	it	cc
 8008190:	2204      	movcc	r2, #4
 8008192:	9201      	str	r2, [sp, #4]
 8008194:	9a02      	ldr	r2, [sp, #8]
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	429a      	cmp	r2, r3
 800819a:	d80c      	bhi.n	80081b6 <__multiply+0x9e>
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd03      	ble.n	80081a8 <__multiply+0x90>
 80081a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d05a      	beq.n	800825e <__multiply+0x146>
 80081a8:	6106      	str	r6, [r0, #16]
 80081aa:	b005      	add	sp, #20
 80081ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b0:	f843 2b04 	str.w	r2, [r3], #4
 80081b4:	e7d8      	b.n	8008168 <__multiply+0x50>
 80081b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80081ba:	f1ba 0f00 	cmp.w	sl, #0
 80081be:	d024      	beq.n	800820a <__multiply+0xf2>
 80081c0:	f104 0e14 	add.w	lr, r4, #20
 80081c4:	46a9      	mov	r9, r5
 80081c6:	f04f 0c00 	mov.w	ip, #0
 80081ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081ce:	f8d9 1000 	ldr.w	r1, [r9]
 80081d2:	fa1f fb82 	uxth.w	fp, r2
 80081d6:	b289      	uxth	r1, r1
 80081d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80081dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081e0:	f8d9 2000 	ldr.w	r2, [r9]
 80081e4:	4461      	add	r1, ip
 80081e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80081ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081f2:	b289      	uxth	r1, r1
 80081f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081f8:	4577      	cmp	r7, lr
 80081fa:	f849 1b04 	str.w	r1, [r9], #4
 80081fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008202:	d8e2      	bhi.n	80081ca <__multiply+0xb2>
 8008204:	9a01      	ldr	r2, [sp, #4]
 8008206:	f845 c002 	str.w	ip, [r5, r2]
 800820a:	9a03      	ldr	r2, [sp, #12]
 800820c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008210:	3304      	adds	r3, #4
 8008212:	f1b9 0f00 	cmp.w	r9, #0
 8008216:	d020      	beq.n	800825a <__multiply+0x142>
 8008218:	6829      	ldr	r1, [r5, #0]
 800821a:	f104 0c14 	add.w	ip, r4, #20
 800821e:	46ae      	mov	lr, r5
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f8bc b000 	ldrh.w	fp, [ip]
 8008228:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800822c:	fb09 220b 	mla	r2, r9, fp, r2
 8008230:	4492      	add	sl, r2
 8008232:	b289      	uxth	r1, r1
 8008234:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008238:	f84e 1b04 	str.w	r1, [lr], #4
 800823c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008240:	f8be 1000 	ldrh.w	r1, [lr]
 8008244:	0c12      	lsrs	r2, r2, #16
 8008246:	fb09 1102 	mla	r1, r9, r2, r1
 800824a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800824e:	4567      	cmp	r7, ip
 8008250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008254:	d8e6      	bhi.n	8008224 <__multiply+0x10c>
 8008256:	9a01      	ldr	r2, [sp, #4]
 8008258:	50a9      	str	r1, [r5, r2]
 800825a:	3504      	adds	r5, #4
 800825c:	e79a      	b.n	8008194 <__multiply+0x7c>
 800825e:	3e01      	subs	r6, #1
 8008260:	e79c      	b.n	800819c <__multiply+0x84>
 8008262:	bf00      	nop
 8008264:	0800ac71 	.word	0x0800ac71
 8008268:	0800acfc 	.word	0x0800acfc

0800826c <__pow5mult>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	4615      	mov	r5, r2
 8008272:	f012 0203 	ands.w	r2, r2, #3
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	d007      	beq.n	800828c <__pow5mult+0x20>
 800827c:	4c25      	ldr	r4, [pc, #148]	; (8008314 <__pow5mult+0xa8>)
 800827e:	3a01      	subs	r2, #1
 8008280:	2300      	movs	r3, #0
 8008282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008286:	f7ff fe51 	bl	8007f2c <__multadd>
 800828a:	4607      	mov	r7, r0
 800828c:	10ad      	asrs	r5, r5, #2
 800828e:	d03d      	beq.n	800830c <__pow5mult+0xa0>
 8008290:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008292:	b97c      	cbnz	r4, 80082b4 <__pow5mult+0x48>
 8008294:	2010      	movs	r0, #16
 8008296:	f7ff fdcd 	bl	8007e34 <malloc>
 800829a:	4602      	mov	r2, r0
 800829c:	6270      	str	r0, [r6, #36]	; 0x24
 800829e:	b928      	cbnz	r0, 80082ac <__pow5mult+0x40>
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <__pow5mult+0xac>)
 80082a2:	481e      	ldr	r0, [pc, #120]	; (800831c <__pow5mult+0xb0>)
 80082a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082a8:	f7ff fa24 	bl	80076f4 <__assert_func>
 80082ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b0:	6004      	str	r4, [r0, #0]
 80082b2:	60c4      	str	r4, [r0, #12]
 80082b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082bc:	b94c      	cbnz	r4, 80082d2 <__pow5mult+0x66>
 80082be:	f240 2171 	movw	r1, #625	; 0x271
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff12 	bl	80080ec <__i2b>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ce:	4604      	mov	r4, r0
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	07eb      	lsls	r3, r5, #31
 80082d8:	d50a      	bpl.n	80082f0 <__pow5mult+0x84>
 80082da:	4639      	mov	r1, r7
 80082dc:	4622      	mov	r2, r4
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff ff1a 	bl	8008118 <__multiply>
 80082e4:	4639      	mov	r1, r7
 80082e6:	4680      	mov	r8, r0
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7ff fdfd 	bl	8007ee8 <_Bfree>
 80082ee:	4647      	mov	r7, r8
 80082f0:	106d      	asrs	r5, r5, #1
 80082f2:	d00b      	beq.n	800830c <__pow5mult+0xa0>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	b938      	cbnz	r0, 8008308 <__pow5mult+0x9c>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4621      	mov	r1, r4
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ff0b 	bl	8008118 <__multiply>
 8008302:	6020      	str	r0, [r4, #0]
 8008304:	f8c0 9000 	str.w	r9, [r0]
 8008308:	4604      	mov	r4, r0
 800830a:	e7e4      	b.n	80082d6 <__pow5mult+0x6a>
 800830c:	4638      	mov	r0, r7
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	0800ae48 	.word	0x0800ae48
 8008318:	0800aac0 	.word	0x0800aac0
 800831c:	0800acfc 	.word	0x0800acfc

08008320 <__lshift>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	4607      	mov	r7, r0
 8008332:	4691      	mov	r9, r2
 8008334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008338:	f108 0601 	add.w	r6, r8, #1
 800833c:	42b3      	cmp	r3, r6
 800833e:	db0b      	blt.n	8008358 <__lshift+0x38>
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fd91 	bl	8007e68 <_Balloc>
 8008346:	4605      	mov	r5, r0
 8008348:	b948      	cbnz	r0, 800835e <__lshift+0x3e>
 800834a:	4602      	mov	r2, r0
 800834c:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <__lshift+0xd8>)
 800834e:	482b      	ldr	r0, [pc, #172]	; (80083fc <__lshift+0xdc>)
 8008350:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008354:	f7ff f9ce 	bl	80076f4 <__assert_func>
 8008358:	3101      	adds	r1, #1
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	e7ee      	b.n	800833c <__lshift+0x1c>
 800835e:	2300      	movs	r3, #0
 8008360:	f100 0114 	add.w	r1, r0, #20
 8008364:	f100 0210 	add.w	r2, r0, #16
 8008368:	4618      	mov	r0, r3
 800836a:	4553      	cmp	r3, sl
 800836c:	db37      	blt.n	80083de <__lshift+0xbe>
 800836e:	6920      	ldr	r0, [r4, #16]
 8008370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008374:	f104 0314 	add.w	r3, r4, #20
 8008378:	f019 091f 	ands.w	r9, r9, #31
 800837c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008384:	d02f      	beq.n	80083e6 <__lshift+0xc6>
 8008386:	f1c9 0e20 	rsb	lr, r9, #32
 800838a:	468a      	mov	sl, r1
 800838c:	f04f 0c00 	mov.w	ip, #0
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	fa02 f209 	lsl.w	r2, r2, r9
 8008396:	ea42 020c 	orr.w	r2, r2, ip
 800839a:	f84a 2b04 	str.w	r2, [sl], #4
 800839e:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a2:	4298      	cmp	r0, r3
 80083a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083a8:	d8f2      	bhi.n	8008390 <__lshift+0x70>
 80083aa:	1b03      	subs	r3, r0, r4
 80083ac:	3b15      	subs	r3, #21
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	3304      	adds	r3, #4
 80083b4:	f104 0215 	add.w	r2, r4, #21
 80083b8:	4290      	cmp	r0, r2
 80083ba:	bf38      	it	cc
 80083bc:	2304      	movcc	r3, #4
 80083be:	f841 c003 	str.w	ip, [r1, r3]
 80083c2:	f1bc 0f00 	cmp.w	ip, #0
 80083c6:	d001      	beq.n	80083cc <__lshift+0xac>
 80083c8:	f108 0602 	add.w	r6, r8, #2
 80083cc:	3e01      	subs	r6, #1
 80083ce:	4638      	mov	r0, r7
 80083d0:	612e      	str	r6, [r5, #16]
 80083d2:	4621      	mov	r1, r4
 80083d4:	f7ff fd88 	bl	8007ee8 <_Bfree>
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	f842 0f04 	str.w	r0, [r2, #4]!
 80083e2:	3301      	adds	r3, #1
 80083e4:	e7c1      	b.n	800836a <__lshift+0x4a>
 80083e6:	3904      	subs	r1, #4
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80083f0:	4298      	cmp	r0, r3
 80083f2:	d8f9      	bhi.n	80083e8 <__lshift+0xc8>
 80083f4:	e7ea      	b.n	80083cc <__lshift+0xac>
 80083f6:	bf00      	nop
 80083f8:	0800ac71 	.word	0x0800ac71
 80083fc:	0800acfc 	.word	0x0800acfc

08008400 <__mcmp>:
 8008400:	b530      	push	{r4, r5, lr}
 8008402:	6902      	ldr	r2, [r0, #16]
 8008404:	690c      	ldr	r4, [r1, #16]
 8008406:	1b12      	subs	r2, r2, r4
 8008408:	d10e      	bne.n	8008428 <__mcmp+0x28>
 800840a:	f100 0314 	add.w	r3, r0, #20
 800840e:	3114      	adds	r1, #20
 8008410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800841c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008420:	42a5      	cmp	r5, r4
 8008422:	d003      	beq.n	800842c <__mcmp+0x2c>
 8008424:	d305      	bcc.n	8008432 <__mcmp+0x32>
 8008426:	2201      	movs	r2, #1
 8008428:	4610      	mov	r0, r2
 800842a:	bd30      	pop	{r4, r5, pc}
 800842c:	4283      	cmp	r3, r0
 800842e:	d3f3      	bcc.n	8008418 <__mcmp+0x18>
 8008430:	e7fa      	b.n	8008428 <__mcmp+0x28>
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	e7f7      	b.n	8008428 <__mcmp+0x28>

08008438 <__mdiff>:
 8008438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4606      	mov	r6, r0
 8008440:	4611      	mov	r1, r2
 8008442:	4620      	mov	r0, r4
 8008444:	4690      	mov	r8, r2
 8008446:	f7ff ffdb 	bl	8008400 <__mcmp>
 800844a:	1e05      	subs	r5, r0, #0
 800844c:	d110      	bne.n	8008470 <__mdiff+0x38>
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff fd09 	bl	8007e68 <_Balloc>
 8008456:	b930      	cbnz	r0, 8008466 <__mdiff+0x2e>
 8008458:	4b3a      	ldr	r3, [pc, #232]	; (8008544 <__mdiff+0x10c>)
 800845a:	4602      	mov	r2, r0
 800845c:	f240 2132 	movw	r1, #562	; 0x232
 8008460:	4839      	ldr	r0, [pc, #228]	; (8008548 <__mdiff+0x110>)
 8008462:	f7ff f947 	bl	80076f4 <__assert_func>
 8008466:	2301      	movs	r3, #1
 8008468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800846c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	bfa4      	itt	ge
 8008472:	4643      	movge	r3, r8
 8008474:	46a0      	movge	r8, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800847c:	bfa6      	itte	ge
 800847e:	461c      	movge	r4, r3
 8008480:	2500      	movge	r5, #0
 8008482:	2501      	movlt	r5, #1
 8008484:	f7ff fcf0 	bl	8007e68 <_Balloc>
 8008488:	b920      	cbnz	r0, 8008494 <__mdiff+0x5c>
 800848a:	4b2e      	ldr	r3, [pc, #184]	; (8008544 <__mdiff+0x10c>)
 800848c:	4602      	mov	r2, r0
 800848e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008492:	e7e5      	b.n	8008460 <__mdiff+0x28>
 8008494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008498:	6926      	ldr	r6, [r4, #16]
 800849a:	60c5      	str	r5, [r0, #12]
 800849c:	f104 0914 	add.w	r9, r4, #20
 80084a0:	f108 0514 	add.w	r5, r8, #20
 80084a4:	f100 0e14 	add.w	lr, r0, #20
 80084a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084b0:	f108 0210 	add.w	r2, r8, #16
 80084b4:	46f2      	mov	sl, lr
 80084b6:	2100      	movs	r1, #0
 80084b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80084bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084c0:	fa1f f883 	uxth.w	r8, r3
 80084c4:	fa11 f18b 	uxtah	r1, r1, fp
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	eba1 0808 	sub.w	r8, r1, r8
 80084ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084d6:	fa1f f888 	uxth.w	r8, r8
 80084da:	1419      	asrs	r1, r3, #16
 80084dc:	454e      	cmp	r6, r9
 80084de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084e2:	f84a 3b04 	str.w	r3, [sl], #4
 80084e6:	d8e7      	bhi.n	80084b8 <__mdiff+0x80>
 80084e8:	1b33      	subs	r3, r6, r4
 80084ea:	3b15      	subs	r3, #21
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	3304      	adds	r3, #4
 80084f2:	3415      	adds	r4, #21
 80084f4:	42a6      	cmp	r6, r4
 80084f6:	bf38      	it	cc
 80084f8:	2304      	movcc	r3, #4
 80084fa:	441d      	add	r5, r3
 80084fc:	4473      	add	r3, lr
 80084fe:	469e      	mov	lr, r3
 8008500:	462e      	mov	r6, r5
 8008502:	4566      	cmp	r6, ip
 8008504:	d30e      	bcc.n	8008524 <__mdiff+0xec>
 8008506:	f10c 0203 	add.w	r2, ip, #3
 800850a:	1b52      	subs	r2, r2, r5
 800850c:	f022 0203 	bic.w	r2, r2, #3
 8008510:	3d03      	subs	r5, #3
 8008512:	45ac      	cmp	ip, r5
 8008514:	bf38      	it	cc
 8008516:	2200      	movcc	r2, #0
 8008518:	441a      	add	r2, r3
 800851a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800851e:	b17b      	cbz	r3, 8008540 <__mdiff+0x108>
 8008520:	6107      	str	r7, [r0, #16]
 8008522:	e7a3      	b.n	800846c <__mdiff+0x34>
 8008524:	f856 8b04 	ldr.w	r8, [r6], #4
 8008528:	fa11 f288 	uxtah	r2, r1, r8
 800852c:	1414      	asrs	r4, r2, #16
 800852e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008532:	b292      	uxth	r2, r2
 8008534:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008538:	f84e 2b04 	str.w	r2, [lr], #4
 800853c:	1421      	asrs	r1, r4, #16
 800853e:	e7e0      	b.n	8008502 <__mdiff+0xca>
 8008540:	3f01      	subs	r7, #1
 8008542:	e7ea      	b.n	800851a <__mdiff+0xe2>
 8008544:	0800ac71 	.word	0x0800ac71
 8008548:	0800acfc 	.word	0x0800acfc

0800854c <__ulp>:
 800854c:	b082      	sub	sp, #8
 800854e:	ed8d 0b00 	vstr	d0, [sp]
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	4912      	ldr	r1, [pc, #72]	; (80085a0 <__ulp+0x54>)
 8008556:	4019      	ands	r1, r3
 8008558:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800855c:	2900      	cmp	r1, #0
 800855e:	dd05      	ble.n	800856c <__ulp+0x20>
 8008560:	2200      	movs	r2, #0
 8008562:	460b      	mov	r3, r1
 8008564:	ec43 2b10 	vmov	d0, r2, r3
 8008568:	b002      	add	sp, #8
 800856a:	4770      	bx	lr
 800856c:	4249      	negs	r1, r1
 800856e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008572:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	da04      	bge.n	800858a <__ulp+0x3e>
 8008580:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008584:	fa41 f300 	asr.w	r3, r1, r0
 8008588:	e7ec      	b.n	8008564 <__ulp+0x18>
 800858a:	f1a0 0114 	sub.w	r1, r0, #20
 800858e:	291e      	cmp	r1, #30
 8008590:	bfda      	itte	le
 8008592:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008596:	fa20 f101 	lsrle.w	r1, r0, r1
 800859a:	2101      	movgt	r1, #1
 800859c:	460a      	mov	r2, r1
 800859e:	e7e1      	b.n	8008564 <__ulp+0x18>
 80085a0:	7ff00000 	.word	0x7ff00000

080085a4 <__b2d>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	6905      	ldr	r5, [r0, #16]
 80085a8:	f100 0714 	add.w	r7, r0, #20
 80085ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80085b0:	1f2e      	subs	r6, r5, #4
 80085b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff fd48 	bl	800804c <__hi0bits>
 80085bc:	f1c0 0320 	rsb	r3, r0, #32
 80085c0:	280a      	cmp	r0, #10
 80085c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008640 <__b2d+0x9c>
 80085c6:	600b      	str	r3, [r1, #0]
 80085c8:	dc14      	bgt.n	80085f4 <__b2d+0x50>
 80085ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80085ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80085d2:	42b7      	cmp	r7, r6
 80085d4:	ea41 030c 	orr.w	r3, r1, ip
 80085d8:	bf34      	ite	cc
 80085da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085de:	2100      	movcs	r1, #0
 80085e0:	3015      	adds	r0, #21
 80085e2:	fa04 f000 	lsl.w	r0, r4, r0
 80085e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80085ea:	ea40 0201 	orr.w	r2, r0, r1
 80085ee:	ec43 2b10 	vmov	d0, r2, r3
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	42b7      	cmp	r7, r6
 80085f6:	bf3a      	itte	cc
 80085f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8008600:	2100      	movcs	r1, #0
 8008602:	380b      	subs	r0, #11
 8008604:	d017      	beq.n	8008636 <__b2d+0x92>
 8008606:	f1c0 0c20 	rsb	ip, r0, #32
 800860a:	fa04 f500 	lsl.w	r5, r4, r0
 800860e:	42be      	cmp	r6, r7
 8008610:	fa21 f40c 	lsr.w	r4, r1, ip
 8008614:	ea45 0504 	orr.w	r5, r5, r4
 8008618:	bf8c      	ite	hi
 800861a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800861e:	2400      	movls	r4, #0
 8008620:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008624:	fa01 f000 	lsl.w	r0, r1, r0
 8008628:	fa24 f40c 	lsr.w	r4, r4, ip
 800862c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008630:	ea40 0204 	orr.w	r2, r0, r4
 8008634:	e7db      	b.n	80085ee <__b2d+0x4a>
 8008636:	ea44 030c 	orr.w	r3, r4, ip
 800863a:	460a      	mov	r2, r1
 800863c:	e7d7      	b.n	80085ee <__b2d+0x4a>
 800863e:	bf00      	nop
 8008640:	3ff00000 	.word	0x3ff00000

08008644 <__d2b>:
 8008644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008648:	4689      	mov	r9, r1
 800864a:	2101      	movs	r1, #1
 800864c:	ec57 6b10 	vmov	r6, r7, d0
 8008650:	4690      	mov	r8, r2
 8008652:	f7ff fc09 	bl	8007e68 <_Balloc>
 8008656:	4604      	mov	r4, r0
 8008658:	b930      	cbnz	r0, 8008668 <__d2b+0x24>
 800865a:	4602      	mov	r2, r0
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <__d2b+0xb0>)
 800865e:	4826      	ldr	r0, [pc, #152]	; (80086f8 <__d2b+0xb4>)
 8008660:	f240 310a 	movw	r1, #778	; 0x30a
 8008664:	f7ff f846 	bl	80076f4 <__assert_func>
 8008668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800866c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008670:	bb35      	cbnz	r5, 80086c0 <__d2b+0x7c>
 8008672:	2e00      	cmp	r6, #0
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	d028      	beq.n	80086ca <__d2b+0x86>
 8008678:	4668      	mov	r0, sp
 800867a:	9600      	str	r6, [sp, #0]
 800867c:	f7ff fd06 	bl	800808c <__lo0bits>
 8008680:	9900      	ldr	r1, [sp, #0]
 8008682:	b300      	cbz	r0, 80086c6 <__d2b+0x82>
 8008684:	9a01      	ldr	r2, [sp, #4]
 8008686:	f1c0 0320 	rsb	r3, r0, #32
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	430b      	orrs	r3, r1
 8008690:	40c2      	lsrs	r2, r0
 8008692:	6163      	str	r3, [r4, #20]
 8008694:	9201      	str	r2, [sp, #4]
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	61a3      	str	r3, [r4, #24]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bf14      	ite	ne
 800869e:	2202      	movne	r2, #2
 80086a0:	2201      	moveq	r2, #1
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	b1d5      	cbz	r5, 80086dc <__d2b+0x98>
 80086a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086aa:	4405      	add	r5, r0
 80086ac:	f8c9 5000 	str.w	r5, [r9]
 80086b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086b4:	f8c8 0000 	str.w	r0, [r8]
 80086b8:	4620      	mov	r0, r4
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c4:	e7d5      	b.n	8008672 <__d2b+0x2e>
 80086c6:	6161      	str	r1, [r4, #20]
 80086c8:	e7e5      	b.n	8008696 <__d2b+0x52>
 80086ca:	a801      	add	r0, sp, #4
 80086cc:	f7ff fcde 	bl	800808c <__lo0bits>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	2201      	movs	r2, #1
 80086d6:	6122      	str	r2, [r4, #16]
 80086d8:	3020      	adds	r0, #32
 80086da:	e7e3      	b.n	80086a4 <__d2b+0x60>
 80086dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086e4:	f8c9 0000 	str.w	r0, [r9]
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	f7ff fcaf 	bl	800804c <__hi0bits>
 80086ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086f2:	e7df      	b.n	80086b4 <__d2b+0x70>
 80086f4:	0800ac71 	.word	0x0800ac71
 80086f8:	0800acfc 	.word	0x0800acfc

080086fc <__ratio>:
 80086fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4688      	mov	r8, r1
 8008702:	4669      	mov	r1, sp
 8008704:	4681      	mov	r9, r0
 8008706:	f7ff ff4d 	bl	80085a4 <__b2d>
 800870a:	a901      	add	r1, sp, #4
 800870c:	4640      	mov	r0, r8
 800870e:	ec55 4b10 	vmov	r4, r5, d0
 8008712:	f7ff ff47 	bl	80085a4 <__b2d>
 8008716:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800871a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800871e:	eba3 0c02 	sub.w	ip, r3, r2
 8008722:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800872c:	ec51 0b10 	vmov	r0, r1, d0
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfd6      	itet	le
 8008734:	460a      	movle	r2, r1
 8008736:	462a      	movgt	r2, r5
 8008738:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800873c:	468b      	mov	fp, r1
 800873e:	462f      	mov	r7, r5
 8008740:	bfd4      	ite	le
 8008742:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008746:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800874a:	4620      	mov	r0, r4
 800874c:	ee10 2a10 	vmov	r2, s0
 8008750:	465b      	mov	r3, fp
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f87a 	bl	800084c <__aeabi_ddiv>
 8008758:	ec41 0b10 	vmov	d0, r0, r1
 800875c:	b003      	add	sp, #12
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008762 <__copybits>:
 8008762:	3901      	subs	r1, #1
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	1149      	asrs	r1, r1, #5
 8008768:	6914      	ldr	r4, [r2, #16]
 800876a:	3101      	adds	r1, #1
 800876c:	f102 0314 	add.w	r3, r2, #20
 8008770:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008774:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008778:	1f05      	subs	r5, r0, #4
 800877a:	42a3      	cmp	r3, r4
 800877c:	d30c      	bcc.n	8008798 <__copybits+0x36>
 800877e:	1aa3      	subs	r3, r4, r2
 8008780:	3b11      	subs	r3, #17
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	3211      	adds	r2, #17
 8008788:	42a2      	cmp	r2, r4
 800878a:	bf88      	it	hi
 800878c:	2300      	movhi	r3, #0
 800878e:	4418      	add	r0, r3
 8008790:	2300      	movs	r3, #0
 8008792:	4288      	cmp	r0, r1
 8008794:	d305      	bcc.n	80087a2 <__copybits+0x40>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f853 6b04 	ldr.w	r6, [r3], #4
 800879c:	f845 6f04 	str.w	r6, [r5, #4]!
 80087a0:	e7eb      	b.n	800877a <__copybits+0x18>
 80087a2:	f840 3b04 	str.w	r3, [r0], #4
 80087a6:	e7f4      	b.n	8008792 <__copybits+0x30>

080087a8 <__any_on>:
 80087a8:	f100 0214 	add.w	r2, r0, #20
 80087ac:	6900      	ldr	r0, [r0, #16]
 80087ae:	114b      	asrs	r3, r1, #5
 80087b0:	4298      	cmp	r0, r3
 80087b2:	b510      	push	{r4, lr}
 80087b4:	db11      	blt.n	80087da <__any_on+0x32>
 80087b6:	dd0a      	ble.n	80087ce <__any_on+0x26>
 80087b8:	f011 011f 	ands.w	r1, r1, #31
 80087bc:	d007      	beq.n	80087ce <__any_on+0x26>
 80087be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087c2:	fa24 f001 	lsr.w	r0, r4, r1
 80087c6:	fa00 f101 	lsl.w	r1, r0, r1
 80087ca:	428c      	cmp	r4, r1
 80087cc:	d10b      	bne.n	80087e6 <__any_on+0x3e>
 80087ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d803      	bhi.n	80087de <__any_on+0x36>
 80087d6:	2000      	movs	r0, #0
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	4603      	mov	r3, r0
 80087dc:	e7f7      	b.n	80087ce <__any_on+0x26>
 80087de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d0f5      	beq.n	80087d2 <__any_on+0x2a>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7f6      	b.n	80087d8 <__any_on+0x30>

080087ea <_calloc_r>:
 80087ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ec:	fba1 2402 	umull	r2, r4, r1, r2
 80087f0:	b94c      	cbnz	r4, 8008806 <_calloc_r+0x1c>
 80087f2:	4611      	mov	r1, r2
 80087f4:	9201      	str	r2, [sp, #4]
 80087f6:	f000 f87b 	bl	80088f0 <_malloc_r>
 80087fa:	9a01      	ldr	r2, [sp, #4]
 80087fc:	4605      	mov	r5, r0
 80087fe:	b930      	cbnz	r0, 800880e <_calloc_r+0x24>
 8008800:	4628      	mov	r0, r5
 8008802:	b003      	add	sp, #12
 8008804:	bd30      	pop	{r4, r5, pc}
 8008806:	220c      	movs	r2, #12
 8008808:	6002      	str	r2, [r0, #0]
 800880a:	2500      	movs	r5, #0
 800880c:	e7f8      	b.n	8008800 <_calloc_r+0x16>
 800880e:	4621      	mov	r1, r4
 8008810:	f7fe f81a 	bl	8006848 <memset>
 8008814:	e7f4      	b.n	8008800 <_calloc_r+0x16>
	...

08008818 <_free_r>:
 8008818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	d044      	beq.n	80088a8 <_free_r+0x90>
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	9001      	str	r0, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f1a1 0404 	sub.w	r4, r1, #4
 800882a:	bfb8      	it	lt
 800882c:	18e4      	addlt	r4, r4, r3
 800882e:	f001 f85b 	bl	80098e8 <__malloc_lock>
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <_free_r+0x94>)
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	b933      	cbnz	r3, 8008848 <_free_r+0x30>
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	6014      	str	r4, [r2, #0]
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008844:	f001 b856 	b.w	80098f4 <__malloc_unlock>
 8008848:	42a3      	cmp	r3, r4
 800884a:	d908      	bls.n	800885e <_free_r+0x46>
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	1961      	adds	r1, r4, r5
 8008850:	428b      	cmp	r3, r1
 8008852:	bf01      	itttt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	e7ed      	b.n	800883a <_free_r+0x22>
 800885e:	461a      	mov	r2, r3
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b10b      	cbz	r3, 8008868 <_free_r+0x50>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d9fa      	bls.n	800885e <_free_r+0x46>
 8008868:	6811      	ldr	r1, [r2, #0]
 800886a:	1855      	adds	r5, r2, r1
 800886c:	42a5      	cmp	r5, r4
 800886e:	d10b      	bne.n	8008888 <_free_r+0x70>
 8008870:	6824      	ldr	r4, [r4, #0]
 8008872:	4421      	add	r1, r4
 8008874:	1854      	adds	r4, r2, r1
 8008876:	42a3      	cmp	r3, r4
 8008878:	6011      	str	r1, [r2, #0]
 800887a:	d1e0      	bne.n	800883e <_free_r+0x26>
 800887c:	681c      	ldr	r4, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	6053      	str	r3, [r2, #4]
 8008882:	4421      	add	r1, r4
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7da      	b.n	800883e <_free_r+0x26>
 8008888:	d902      	bls.n	8008890 <_free_r+0x78>
 800888a:	230c      	movs	r3, #12
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	e7d6      	b.n	800883e <_free_r+0x26>
 8008890:	6825      	ldr	r5, [r4, #0]
 8008892:	1961      	adds	r1, r4, r5
 8008894:	428b      	cmp	r3, r1
 8008896:	bf04      	itt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	bf04      	itt	eq
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6054      	str	r4, [r2, #4]
 80088a6:	e7ca      	b.n	800883e <_free_r+0x26>
 80088a8:	b003      	add	sp, #12
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	2000069c 	.word	0x2000069c

080088b0 <sbrk_aligned>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	4e0e      	ldr	r6, [pc, #56]	; (80088ec <sbrk_aligned+0x3c>)
 80088b4:	460c      	mov	r4, r1
 80088b6:	6831      	ldr	r1, [r6, #0]
 80088b8:	4605      	mov	r5, r0
 80088ba:	b911      	cbnz	r1, 80088c2 <sbrk_aligned+0x12>
 80088bc:	f000 fce0 	bl	8009280 <_sbrk_r>
 80088c0:	6030      	str	r0, [r6, #0]
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 fcdb 	bl	8009280 <_sbrk_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d00a      	beq.n	80088e4 <sbrk_aligned+0x34>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d007      	beq.n	80088e8 <sbrk_aligned+0x38>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 fcd0 	bl	8009280 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d101      	bne.n	80088e8 <sbrk_aligned+0x38>
 80088e4:	f04f 34ff 	mov.w	r4, #4294967295
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	200006a0 	.word	0x200006a0

080088f0 <_malloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4607      	mov	r7, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d905      	bls.n	8008918 <_malloc_r+0x28>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	2600      	movs	r6, #0
 8008912:	4630      	mov	r0, r6
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4e2e      	ldr	r6, [pc, #184]	; (80089d4 <_malloc_r+0xe4>)
 800891a:	f000 ffe5 	bl	80098e8 <__malloc_lock>
 800891e:	6833      	ldr	r3, [r6, #0]
 8008920:	461c      	mov	r4, r3
 8008922:	bb34      	cbnz	r4, 8008972 <_malloc_r+0x82>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc2 	bl	80088b0 <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d14d      	bne.n	80089ce <_malloc_r+0xde>
 8008932:	6834      	ldr	r4, [r6, #0]
 8008934:	4626      	mov	r6, r4
 8008936:	2e00      	cmp	r6, #0
 8008938:	d140      	bne.n	80089bc <_malloc_r+0xcc>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4631      	mov	r1, r6
 800893e:	4638      	mov	r0, r7
 8008940:	eb04 0803 	add.w	r8, r4, r3
 8008944:	f000 fc9c 	bl	8009280 <_sbrk_r>
 8008948:	4580      	cmp	r8, r0
 800894a:	d13a      	bne.n	80089c2 <_malloc_r+0xd2>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	3503      	adds	r5, #3
 8008950:	1a6d      	subs	r5, r5, r1
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ffa5 	bl	80088b0 <sbrk_aligned>
 8008966:	3001      	adds	r0, #1
 8008968:	d02b      	beq.n	80089c2 <_malloc_r+0xd2>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	442b      	add	r3, r5
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	e00e      	b.n	8008990 <_malloc_r+0xa0>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	1b52      	subs	r2, r2, r5
 8008976:	d41e      	bmi.n	80089b6 <_malloc_r+0xc6>
 8008978:	2a0b      	cmp	r2, #11
 800897a:	d916      	bls.n	80089aa <_malloc_r+0xba>
 800897c:	1961      	adds	r1, r4, r5
 800897e:	42a3      	cmp	r3, r4
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	bf18      	it	ne
 8008984:	6059      	strne	r1, [r3, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	bf08      	it	eq
 800898a:	6031      	streq	r1, [r6, #0]
 800898c:	5162      	str	r2, [r4, r5]
 800898e:	604b      	str	r3, [r1, #4]
 8008990:	4638      	mov	r0, r7
 8008992:	f104 060b 	add.w	r6, r4, #11
 8008996:	f000 ffad 	bl	80098f4 <__malloc_unlock>
 800899a:	f026 0607 	bic.w	r6, r6, #7
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	1af2      	subs	r2, r6, r3
 80089a2:	d0b6      	beq.n	8008912 <_malloc_r+0x22>
 80089a4:	1b9b      	subs	r3, r3, r6
 80089a6:	50a3      	str	r3, [r4, r2]
 80089a8:	e7b3      	b.n	8008912 <_malloc_r+0x22>
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bf0c      	ite	eq
 80089b0:	6032      	streq	r2, [r6, #0]
 80089b2:	605a      	strne	r2, [r3, #4]
 80089b4:	e7ec      	b.n	8008990 <_malloc_r+0xa0>
 80089b6:	4623      	mov	r3, r4
 80089b8:	6864      	ldr	r4, [r4, #4]
 80089ba:	e7b2      	b.n	8008922 <_malloc_r+0x32>
 80089bc:	4634      	mov	r4, r6
 80089be:	6876      	ldr	r6, [r6, #4]
 80089c0:	e7b9      	b.n	8008936 <_malloc_r+0x46>
 80089c2:	230c      	movs	r3, #12
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4638      	mov	r0, r7
 80089c8:	f000 ff94 	bl	80098f4 <__malloc_unlock>
 80089cc:	e7a1      	b.n	8008912 <_malloc_r+0x22>
 80089ce:	6025      	str	r5, [r4, #0]
 80089d0:	e7de      	b.n	8008990 <_malloc_r+0xa0>
 80089d2:	bf00      	nop
 80089d4:	2000069c 	.word	0x2000069c

080089d8 <__ssputs_r>:
 80089d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	688e      	ldr	r6, [r1, #8]
 80089de:	429e      	cmp	r6, r3
 80089e0:	4682      	mov	sl, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	4690      	mov	r8, r2
 80089e6:	461f      	mov	r7, r3
 80089e8:	d838      	bhi.n	8008a5c <__ssputs_r+0x84>
 80089ea:	898a      	ldrh	r2, [r1, #12]
 80089ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089f0:	d032      	beq.n	8008a58 <__ssputs_r+0x80>
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	6909      	ldr	r1, [r1, #16]
 80089f6:	eba5 0901 	sub.w	r9, r5, r1
 80089fa:	6965      	ldr	r5, [r4, #20]
 80089fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a04:	3301      	adds	r3, #1
 8008a06:	444b      	add	r3, r9
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	bf38      	it	cc
 8008a0e:	461d      	movcc	r5, r3
 8008a10:	0553      	lsls	r3, r2, #21
 8008a12:	d531      	bpl.n	8008a78 <__ssputs_r+0xa0>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7ff ff6b 	bl	80088f0 <_malloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b950      	cbnz	r0, 8008a34 <__ssputs_r+0x5c>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	f8ca 3000 	str.w	r3, [sl]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a34:	6921      	ldr	r1, [r4, #16]
 8008a36:	464a      	mov	r2, r9
 8008a38:	f7fd fef8 	bl	800682c <memcpy>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	6126      	str	r6, [r4, #16]
 8008a4a:	6165      	str	r5, [r4, #20]
 8008a4c:	444e      	add	r6, r9
 8008a4e:	eba5 0509 	sub.w	r5, r5, r9
 8008a52:	6026      	str	r6, [r4, #0]
 8008a54:	60a5      	str	r5, [r4, #8]
 8008a56:	463e      	mov	r6, r7
 8008a58:	42be      	cmp	r6, r7
 8008a5a:	d900      	bls.n	8008a5e <__ssputs_r+0x86>
 8008a5c:	463e      	mov	r6, r7
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	4632      	mov	r2, r6
 8008a62:	4641      	mov	r1, r8
 8008a64:	f000 ff26 	bl	80098b4 <memmove>
 8008a68:	68a3      	ldr	r3, [r4, #8]
 8008a6a:	1b9b      	subs	r3, r3, r6
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	4433      	add	r3, r6
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	2000      	movs	r0, #0
 8008a76:	e7db      	b.n	8008a30 <__ssputs_r+0x58>
 8008a78:	462a      	mov	r2, r5
 8008a7a:	f000 ff41 	bl	8009900 <_realloc_r>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d1e1      	bne.n	8008a48 <__ssputs_r+0x70>
 8008a84:	6921      	ldr	r1, [r4, #16]
 8008a86:	4650      	mov	r0, sl
 8008a88:	f7ff fec6 	bl	8008818 <_free_r>
 8008a8c:	e7c7      	b.n	8008a1e <__ssputs_r+0x46>
	...

08008a90 <_svfiprintf_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4698      	mov	r8, r3
 8008a96:	898b      	ldrh	r3, [r1, #12]
 8008a98:	061b      	lsls	r3, r3, #24
 8008a9a:	b09d      	sub	sp, #116	; 0x74
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	d50e      	bpl.n	8008ac2 <_svfiprintf_r+0x32>
 8008aa4:	690b      	ldr	r3, [r1, #16]
 8008aa6:	b963      	cbnz	r3, 8008ac2 <_svfiprintf_r+0x32>
 8008aa8:	2140      	movs	r1, #64	; 0x40
 8008aaa:	f7ff ff21 	bl	80088f0 <_malloc_r>
 8008aae:	6028      	str	r0, [r5, #0]
 8008ab0:	6128      	str	r0, [r5, #16]
 8008ab2:	b920      	cbnz	r0, 8008abe <_svfiprintf_r+0x2e>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e0d1      	b.n	8008c62 <_svfiprintf_r+0x1d2>
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	616b      	str	r3, [r5, #20]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac6:	2320      	movs	r3, #32
 8008ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad0:	2330      	movs	r3, #48	; 0x30
 8008ad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c7c <_svfiprintf_r+0x1ec>
 8008ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ada:	f04f 0901 	mov.w	r9, #1
 8008ade:	4623      	mov	r3, r4
 8008ae0:	469a      	mov	sl, r3
 8008ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ae6:	b10a      	cbz	r2, 8008aec <_svfiprintf_r+0x5c>
 8008ae8:	2a25      	cmp	r2, #37	; 0x25
 8008aea:	d1f9      	bne.n	8008ae0 <_svfiprintf_r+0x50>
 8008aec:	ebba 0b04 	subs.w	fp, sl, r4
 8008af0:	d00b      	beq.n	8008b0a <_svfiprintf_r+0x7a>
 8008af2:	465b      	mov	r3, fp
 8008af4:	4622      	mov	r2, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff ff6d 	bl	80089d8 <__ssputs_r>
 8008afe:	3001      	adds	r0, #1
 8008b00:	f000 80aa 	beq.w	8008c58 <_svfiprintf_r+0x1c8>
 8008b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b06:	445a      	add	r2, fp
 8008b08:	9209      	str	r2, [sp, #36]	; 0x24
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80a2 	beq.w	8008c58 <_svfiprintf_r+0x1c8>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b1e:	f10a 0a01 	add.w	sl, sl, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	9307      	str	r3, [sp, #28]
 8008b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b2c:	4654      	mov	r4, sl
 8008b2e:	2205      	movs	r2, #5
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	4851      	ldr	r0, [pc, #324]	; (8008c7c <_svfiprintf_r+0x1ec>)
 8008b36:	f7f7 fb53 	bl	80001e0 <memchr>
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	b9d8      	cbnz	r0, 8008b76 <_svfiprintf_r+0xe6>
 8008b3e:	06d0      	lsls	r0, r2, #27
 8008b40:	bf44      	itt	mi
 8008b42:	2320      	movmi	r3, #32
 8008b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b48:	0711      	lsls	r1, r2, #28
 8008b4a:	bf44      	itt	mi
 8008b4c:	232b      	movmi	r3, #43	; 0x2b
 8008b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b52:	f89a 3000 	ldrb.w	r3, [sl]
 8008b56:	2b2a      	cmp	r3, #42	; 0x2a
 8008b58:	d015      	beq.n	8008b86 <_svfiprintf_r+0xf6>
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	4654      	mov	r4, sl
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f04f 0c0a 	mov.w	ip, #10
 8008b64:	4621      	mov	r1, r4
 8008b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b6a:	3b30      	subs	r3, #48	; 0x30
 8008b6c:	2b09      	cmp	r3, #9
 8008b6e:	d94e      	bls.n	8008c0e <_svfiprintf_r+0x17e>
 8008b70:	b1b0      	cbz	r0, 8008ba0 <_svfiprintf_r+0x110>
 8008b72:	9207      	str	r2, [sp, #28]
 8008b74:	e014      	b.n	8008ba0 <_svfiprintf_r+0x110>
 8008b76:	eba0 0308 	sub.w	r3, r0, r8
 8008b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	46a2      	mov	sl, r4
 8008b84:	e7d2      	b.n	8008b2c <_svfiprintf_r+0x9c>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9103      	str	r1, [sp, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfbb      	ittet	lt
 8008b92:	425b      	neglt	r3, r3
 8008b94:	f042 0202 	orrlt.w	r2, r2, #2
 8008b98:	9307      	strge	r3, [sp, #28]
 8008b9a:	9307      	strlt	r3, [sp, #28]
 8008b9c:	bfb8      	it	lt
 8008b9e:	9204      	strlt	r2, [sp, #16]
 8008ba0:	7823      	ldrb	r3, [r4, #0]
 8008ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ba4:	d10c      	bne.n	8008bc0 <_svfiprintf_r+0x130>
 8008ba6:	7863      	ldrb	r3, [r4, #1]
 8008ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8008baa:	d135      	bne.n	8008c18 <_svfiprintf_r+0x188>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	9203      	str	r2, [sp, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfb8      	it	lt
 8008bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bbc:	3402      	adds	r4, #2
 8008bbe:	9305      	str	r3, [sp, #20]
 8008bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c8c <_svfiprintf_r+0x1fc>
 8008bc4:	7821      	ldrb	r1, [r4, #0]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	4650      	mov	r0, sl
 8008bca:	f7f7 fb09 	bl	80001e0 <memchr>
 8008bce:	b140      	cbz	r0, 8008be2 <_svfiprintf_r+0x152>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	eba0 000a 	sub.w	r0, r0, sl
 8008bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	4303      	orrs	r3, r0
 8008bde:	3401      	adds	r4, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4826      	ldr	r0, [pc, #152]	; (8008c80 <_svfiprintf_r+0x1f0>)
 8008be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bec:	2206      	movs	r2, #6
 8008bee:	f7f7 faf7 	bl	80001e0 <memchr>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d038      	beq.n	8008c68 <_svfiprintf_r+0x1d8>
 8008bf6:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <_svfiprintf_r+0x1f4>)
 8008bf8:	bb1b      	cbnz	r3, 8008c42 <_svfiprintf_r+0x1b2>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	3307      	adds	r3, #7
 8008bfe:	f023 0307 	bic.w	r3, r3, #7
 8008c02:	3308      	adds	r3, #8
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c08:	4433      	add	r3, r6
 8008c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0c:	e767      	b.n	8008ade <_svfiprintf_r+0x4e>
 8008c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c12:	460c      	mov	r4, r1
 8008c14:	2001      	movs	r0, #1
 8008c16:	e7a5      	b.n	8008b64 <_svfiprintf_r+0xd4>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f04f 0c0a 	mov.w	ip, #10
 8008c24:	4620      	mov	r0, r4
 8008c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2a:	3a30      	subs	r2, #48	; 0x30
 8008c2c:	2a09      	cmp	r2, #9
 8008c2e:	d903      	bls.n	8008c38 <_svfiprintf_r+0x1a8>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0c5      	beq.n	8008bc0 <_svfiprintf_r+0x130>
 8008c34:	9105      	str	r1, [sp, #20]
 8008c36:	e7c3      	b.n	8008bc0 <_svfiprintf_r+0x130>
 8008c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7f0      	b.n	8008c24 <_svfiprintf_r+0x194>
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <_svfiprintf_r+0x1f8>)
 8008c4a:	a904      	add	r1, sp, #16
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f3af 8000 	nop.w
 8008c52:	1c42      	adds	r2, r0, #1
 8008c54:	4606      	mov	r6, r0
 8008c56:	d1d6      	bne.n	8008c06 <_svfiprintf_r+0x176>
 8008c58:	89ab      	ldrh	r3, [r5, #12]
 8008c5a:	065b      	lsls	r3, r3, #25
 8008c5c:	f53f af2c 	bmi.w	8008ab8 <_svfiprintf_r+0x28>
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	b01d      	add	sp, #116	; 0x74
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	ab03      	add	r3, sp, #12
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <_svfiprintf_r+0x1f8>)
 8008c70:	a904      	add	r1, sp, #16
 8008c72:	4638      	mov	r0, r7
 8008c74:	f000 f9d4 	bl	8009020 <_printf_i>
 8008c78:	e7eb      	b.n	8008c52 <_svfiprintf_r+0x1c2>
 8008c7a:	bf00      	nop
 8008c7c:	0800ae54 	.word	0x0800ae54
 8008c80:	0800ae5e 	.word	0x0800ae5e
 8008c84:	00000000 	.word	0x00000000
 8008c88:	080089d9 	.word	0x080089d9
 8008c8c:	0800ae5a 	.word	0x0800ae5a

08008c90 <__sfputc_r>:
 8008c90:	6893      	ldr	r3, [r2, #8]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	b410      	push	{r4}
 8008c98:	6093      	str	r3, [r2, #8]
 8008c9a:	da08      	bge.n	8008cae <__sfputc_r+0x1e>
 8008c9c:	6994      	ldr	r4, [r2, #24]
 8008c9e:	42a3      	cmp	r3, r4
 8008ca0:	db01      	blt.n	8008ca6 <__sfputc_r+0x16>
 8008ca2:	290a      	cmp	r1, #10
 8008ca4:	d103      	bne.n	8008cae <__sfputc_r+0x1e>
 8008ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008caa:	f000 bb0d 	b.w	80092c8 <__swbuf_r>
 8008cae:	6813      	ldr	r3, [r2, #0]
 8008cb0:	1c58      	adds	r0, r3, #1
 8008cb2:	6010      	str	r0, [r2, #0]
 8008cb4:	7019      	strb	r1, [r3, #0]
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <__sfputs_r>:
 8008cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	460f      	mov	r7, r1
 8008cc4:	4614      	mov	r4, r2
 8008cc6:	18d5      	adds	r5, r2, r3
 8008cc8:	42ac      	cmp	r4, r5
 8008cca:	d101      	bne.n	8008cd0 <__sfputs_r+0x12>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e007      	b.n	8008ce0 <__sfputs_r+0x22>
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	463a      	mov	r2, r7
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7ff ffda 	bl	8008c90 <__sfputc_r>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	d1f3      	bne.n	8008cc8 <__sfputs_r+0xa>
 8008ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce4 <_vfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	460d      	mov	r5, r1
 8008cea:	b09d      	sub	sp, #116	; 0x74
 8008cec:	4614      	mov	r4, r2
 8008cee:	4698      	mov	r8, r3
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	b118      	cbz	r0, 8008cfc <_vfiprintf_r+0x18>
 8008cf4:	6983      	ldr	r3, [r0, #24]
 8008cf6:	b90b      	cbnz	r3, 8008cfc <_vfiprintf_r+0x18>
 8008cf8:	f000 fcd6 	bl	80096a8 <__sinit>
 8008cfc:	4b89      	ldr	r3, [pc, #548]	; (8008f24 <_vfiprintf_r+0x240>)
 8008cfe:	429d      	cmp	r5, r3
 8008d00:	d11b      	bne.n	8008d3a <_vfiprintf_r+0x56>
 8008d02:	6875      	ldr	r5, [r6, #4]
 8008d04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d06:	07d9      	lsls	r1, r3, #31
 8008d08:	d405      	bmi.n	8008d16 <_vfiprintf_r+0x32>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	059a      	lsls	r2, r3, #22
 8008d0e:	d402      	bmi.n	8008d16 <_vfiprintf_r+0x32>
 8008d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d12:	f000 fd67 	bl	80097e4 <__retarget_lock_acquire_recursive>
 8008d16:	89ab      	ldrh	r3, [r5, #12]
 8008d18:	071b      	lsls	r3, r3, #28
 8008d1a:	d501      	bpl.n	8008d20 <_vfiprintf_r+0x3c>
 8008d1c:	692b      	ldr	r3, [r5, #16]
 8008d1e:	b9eb      	cbnz	r3, 8008d5c <_vfiprintf_r+0x78>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4630      	mov	r0, r6
 8008d24:	f000 fb30 	bl	8009388 <__swsetup_r>
 8008d28:	b1c0      	cbz	r0, 8008d5c <_vfiprintf_r+0x78>
 8008d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d2c:	07dc      	lsls	r4, r3, #31
 8008d2e:	d50e      	bpl.n	8008d4e <_vfiprintf_r+0x6a>
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	b01d      	add	sp, #116	; 0x74
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	4b7b      	ldr	r3, [pc, #492]	; (8008f28 <_vfiprintf_r+0x244>)
 8008d3c:	429d      	cmp	r5, r3
 8008d3e:	d101      	bne.n	8008d44 <_vfiprintf_r+0x60>
 8008d40:	68b5      	ldr	r5, [r6, #8]
 8008d42:	e7df      	b.n	8008d04 <_vfiprintf_r+0x20>
 8008d44:	4b79      	ldr	r3, [pc, #484]	; (8008f2c <_vfiprintf_r+0x248>)
 8008d46:	429d      	cmp	r5, r3
 8008d48:	bf08      	it	eq
 8008d4a:	68f5      	ldreq	r5, [r6, #12]
 8008d4c:	e7da      	b.n	8008d04 <_vfiprintf_r+0x20>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	0598      	lsls	r0, r3, #22
 8008d52:	d4ed      	bmi.n	8008d30 <_vfiprintf_r+0x4c>
 8008d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d56:	f000 fd46 	bl	80097e6 <__retarget_lock_release_recursive>
 8008d5a:	e7e9      	b.n	8008d30 <_vfiprintf_r+0x4c>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d60:	2320      	movs	r3, #32
 8008d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6a:	2330      	movs	r3, #48	; 0x30
 8008d6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008f30 <_vfiprintf_r+0x24c>
 8008d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d74:	f04f 0901 	mov.w	r9, #1
 8008d78:	4623      	mov	r3, r4
 8008d7a:	469a      	mov	sl, r3
 8008d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d80:	b10a      	cbz	r2, 8008d86 <_vfiprintf_r+0xa2>
 8008d82:	2a25      	cmp	r2, #37	; 0x25
 8008d84:	d1f9      	bne.n	8008d7a <_vfiprintf_r+0x96>
 8008d86:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8a:	d00b      	beq.n	8008da4 <_vfiprintf_r+0xc0>
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7ff ff93 	bl	8008cbe <__sfputs_r>
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f000 80aa 	beq.w	8008ef2 <_vfiprintf_r+0x20e>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da0:	445a      	add	r2, fp
 8008da2:	9209      	str	r2, [sp, #36]	; 0x24
 8008da4:	f89a 3000 	ldrb.w	r3, [sl]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 80a2 	beq.w	8008ef2 <_vfiprintf_r+0x20e>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db8:	f10a 0a01 	add.w	sl, sl, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2205      	movs	r2, #5
 8008dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dce:	4858      	ldr	r0, [pc, #352]	; (8008f30 <_vfiprintf_r+0x24c>)
 8008dd0:	f7f7 fa06 	bl	80001e0 <memchr>
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	b9d8      	cbnz	r0, 8008e10 <_vfiprintf_r+0x12c>
 8008dd8:	06d1      	lsls	r1, r2, #27
 8008dda:	bf44      	itt	mi
 8008ddc:	2320      	movmi	r3, #32
 8008dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de2:	0713      	lsls	r3, r2, #28
 8008de4:	bf44      	itt	mi
 8008de6:	232b      	movmi	r3, #43	; 0x2b
 8008de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dec:	f89a 3000 	ldrb.w	r3, [sl]
 8008df0:	2b2a      	cmp	r3, #42	; 0x2a
 8008df2:	d015      	beq.n	8008e20 <_vfiprintf_r+0x13c>
 8008df4:	9a07      	ldr	r2, [sp, #28]
 8008df6:	4654      	mov	r4, sl
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f04f 0c0a 	mov.w	ip, #10
 8008dfe:	4621      	mov	r1, r4
 8008e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e04:	3b30      	subs	r3, #48	; 0x30
 8008e06:	2b09      	cmp	r3, #9
 8008e08:	d94e      	bls.n	8008ea8 <_vfiprintf_r+0x1c4>
 8008e0a:	b1b0      	cbz	r0, 8008e3a <_vfiprintf_r+0x156>
 8008e0c:	9207      	str	r2, [sp, #28]
 8008e0e:	e014      	b.n	8008e3a <_vfiprintf_r+0x156>
 8008e10:	eba0 0308 	sub.w	r3, r0, r8
 8008e14:	fa09 f303 	lsl.w	r3, r9, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	46a2      	mov	sl, r4
 8008e1e:	e7d2      	b.n	8008dc6 <_vfiprintf_r+0xe2>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	1d19      	adds	r1, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	9103      	str	r1, [sp, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfbb      	ittet	lt
 8008e2c:	425b      	neglt	r3, r3
 8008e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e32:	9307      	strge	r3, [sp, #28]
 8008e34:	9307      	strlt	r3, [sp, #28]
 8008e36:	bfb8      	it	lt
 8008e38:	9204      	strlt	r2, [sp, #16]
 8008e3a:	7823      	ldrb	r3, [r4, #0]
 8008e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008e3e:	d10c      	bne.n	8008e5a <_vfiprintf_r+0x176>
 8008e40:	7863      	ldrb	r3, [r4, #1]
 8008e42:	2b2a      	cmp	r3, #42	; 0x2a
 8008e44:	d135      	bne.n	8008eb2 <_vfiprintf_r+0x1ce>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	9203      	str	r2, [sp, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	bfb8      	it	lt
 8008e52:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e56:	3402      	adds	r4, #2
 8008e58:	9305      	str	r3, [sp, #20]
 8008e5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008f40 <_vfiprintf_r+0x25c>
 8008e5e:	7821      	ldrb	r1, [r4, #0]
 8008e60:	2203      	movs	r2, #3
 8008e62:	4650      	mov	r0, sl
 8008e64:	f7f7 f9bc 	bl	80001e0 <memchr>
 8008e68:	b140      	cbz	r0, 8008e7c <_vfiprintf_r+0x198>
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	eba0 000a 	sub.w	r0, r0, sl
 8008e70:	fa03 f000 	lsl.w	r0, r3, r0
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	4303      	orrs	r3, r0
 8008e78:	3401      	adds	r4, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e80:	482c      	ldr	r0, [pc, #176]	; (8008f34 <_vfiprintf_r+0x250>)
 8008e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e86:	2206      	movs	r2, #6
 8008e88:	f7f7 f9aa 	bl	80001e0 <memchr>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d03f      	beq.n	8008f10 <_vfiprintf_r+0x22c>
 8008e90:	4b29      	ldr	r3, [pc, #164]	; (8008f38 <_vfiprintf_r+0x254>)
 8008e92:	bb1b      	cbnz	r3, 8008edc <_vfiprintf_r+0x1f8>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	3307      	adds	r3, #7
 8008e98:	f023 0307 	bic.w	r3, r3, #7
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	443b      	add	r3, r7
 8008ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea6:	e767      	b.n	8008d78 <_vfiprintf_r+0x94>
 8008ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eac:	460c      	mov	r4, r1
 8008eae:	2001      	movs	r0, #1
 8008eb0:	e7a5      	b.n	8008dfe <_vfiprintf_r+0x11a>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	3401      	adds	r4, #1
 8008eb6:	9305      	str	r3, [sp, #20]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f04f 0c0a 	mov.w	ip, #10
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec4:	3a30      	subs	r2, #48	; 0x30
 8008ec6:	2a09      	cmp	r2, #9
 8008ec8:	d903      	bls.n	8008ed2 <_vfiprintf_r+0x1ee>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c5      	beq.n	8008e5a <_vfiprintf_r+0x176>
 8008ece:	9105      	str	r1, [sp, #20]
 8008ed0:	e7c3      	b.n	8008e5a <_vfiprintf_r+0x176>
 8008ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e7f0      	b.n	8008ebe <_vfiprintf_r+0x1da>
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <_vfiprintf_r+0x258>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f3af 8000 	nop.w
 8008eec:	4607      	mov	r7, r0
 8008eee:	1c78      	adds	r0, r7, #1
 8008ef0:	d1d6      	bne.n	8008ea0 <_vfiprintf_r+0x1bc>
 8008ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef4:	07d9      	lsls	r1, r3, #31
 8008ef6:	d405      	bmi.n	8008f04 <_vfiprintf_r+0x220>
 8008ef8:	89ab      	ldrh	r3, [r5, #12]
 8008efa:	059a      	lsls	r2, r3, #22
 8008efc:	d402      	bmi.n	8008f04 <_vfiprintf_r+0x220>
 8008efe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f00:	f000 fc71 	bl	80097e6 <__retarget_lock_release_recursive>
 8008f04:	89ab      	ldrh	r3, [r5, #12]
 8008f06:	065b      	lsls	r3, r3, #25
 8008f08:	f53f af12 	bmi.w	8008d30 <_vfiprintf_r+0x4c>
 8008f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f0e:	e711      	b.n	8008d34 <_vfiprintf_r+0x50>
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	462a      	mov	r2, r5
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <_vfiprintf_r+0x258>)
 8008f18:	a904      	add	r1, sp, #16
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 f880 	bl	8009020 <_printf_i>
 8008f20:	e7e4      	b.n	8008eec <_vfiprintf_r+0x208>
 8008f22:	bf00      	nop
 8008f24:	0800aea8 	.word	0x0800aea8
 8008f28:	0800aec8 	.word	0x0800aec8
 8008f2c:	0800ae88 	.word	0x0800ae88
 8008f30:	0800ae54 	.word	0x0800ae54
 8008f34:	0800ae5e 	.word	0x0800ae5e
 8008f38:	00000000 	.word	0x00000000
 8008f3c:	08008cbf 	.word	0x08008cbf
 8008f40:	0800ae5a 	.word	0x0800ae5a

08008f44 <_printf_common>:
 8008f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f48:	4616      	mov	r6, r2
 8008f4a:	4699      	mov	r9, r3
 8008f4c:	688a      	ldr	r2, [r1, #8]
 8008f4e:	690b      	ldr	r3, [r1, #16]
 8008f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	bfb8      	it	lt
 8008f58:	4613      	movlt	r3, r2
 8008f5a:	6033      	str	r3, [r6, #0]
 8008f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f60:	4607      	mov	r7, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	b10a      	cbz	r2, 8008f6a <_printf_common+0x26>
 8008f66:	3301      	adds	r3, #1
 8008f68:	6033      	str	r3, [r6, #0]
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	0699      	lsls	r1, r3, #26
 8008f6e:	bf42      	ittt	mi
 8008f70:	6833      	ldrmi	r3, [r6, #0]
 8008f72:	3302      	addmi	r3, #2
 8008f74:	6033      	strmi	r3, [r6, #0]
 8008f76:	6825      	ldr	r5, [r4, #0]
 8008f78:	f015 0506 	ands.w	r5, r5, #6
 8008f7c:	d106      	bne.n	8008f8c <_printf_common+0x48>
 8008f7e:	f104 0a19 	add.w	sl, r4, #25
 8008f82:	68e3      	ldr	r3, [r4, #12]
 8008f84:	6832      	ldr	r2, [r6, #0]
 8008f86:	1a9b      	subs	r3, r3, r2
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	dc26      	bgt.n	8008fda <_printf_common+0x96>
 8008f8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f90:	1e13      	subs	r3, r2, #0
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	bf18      	it	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	0692      	lsls	r2, r2, #26
 8008f9a:	d42b      	bmi.n	8008ff4 <_printf_common+0xb0>
 8008f9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	47c0      	blx	r8
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d01e      	beq.n	8008fe8 <_printf_common+0xa4>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	68e5      	ldr	r5, [r4, #12]
 8008fae:	6832      	ldr	r2, [r6, #0]
 8008fb0:	f003 0306 	and.w	r3, r3, #6
 8008fb4:	2b04      	cmp	r3, #4
 8008fb6:	bf08      	it	eq
 8008fb8:	1aad      	subeq	r5, r5, r2
 8008fba:	68a3      	ldr	r3, [r4, #8]
 8008fbc:	6922      	ldr	r2, [r4, #16]
 8008fbe:	bf0c      	ite	eq
 8008fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc4:	2500      	movne	r5, #0
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	bfc4      	itt	gt
 8008fca:	1a9b      	subgt	r3, r3, r2
 8008fcc:	18ed      	addgt	r5, r5, r3
 8008fce:	2600      	movs	r6, #0
 8008fd0:	341a      	adds	r4, #26
 8008fd2:	42b5      	cmp	r5, r6
 8008fd4:	d11a      	bne.n	800900c <_printf_common+0xc8>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e008      	b.n	8008fec <_printf_common+0xa8>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4649      	mov	r1, r9
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	47c0      	blx	r8
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d103      	bne.n	8008ff0 <_printf_common+0xac>
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	3501      	adds	r5, #1
 8008ff2:	e7c6      	b.n	8008f82 <_printf_common+0x3e>
 8008ff4:	18e1      	adds	r1, r4, r3
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	2030      	movs	r0, #48	; 0x30
 8008ffa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ffe:	4422      	add	r2, r4
 8009000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009008:	3302      	adds	r3, #2
 800900a:	e7c7      	b.n	8008f9c <_printf_common+0x58>
 800900c:	2301      	movs	r3, #1
 800900e:	4622      	mov	r2, r4
 8009010:	4649      	mov	r1, r9
 8009012:	4638      	mov	r0, r7
 8009014:	47c0      	blx	r8
 8009016:	3001      	adds	r0, #1
 8009018:	d0e6      	beq.n	8008fe8 <_printf_common+0xa4>
 800901a:	3601      	adds	r6, #1
 800901c:	e7d9      	b.n	8008fd2 <_printf_common+0x8e>
	...

08009020 <_printf_i>:
 8009020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	7e0f      	ldrb	r7, [r1, #24]
 8009026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009028:	2f78      	cmp	r7, #120	; 0x78
 800902a:	4691      	mov	r9, r2
 800902c:	4680      	mov	r8, r0
 800902e:	460c      	mov	r4, r1
 8009030:	469a      	mov	sl, r3
 8009032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009036:	d807      	bhi.n	8009048 <_printf_i+0x28>
 8009038:	2f62      	cmp	r7, #98	; 0x62
 800903a:	d80a      	bhi.n	8009052 <_printf_i+0x32>
 800903c:	2f00      	cmp	r7, #0
 800903e:	f000 80d8 	beq.w	80091f2 <_printf_i+0x1d2>
 8009042:	2f58      	cmp	r7, #88	; 0x58
 8009044:	f000 80a3 	beq.w	800918e <_printf_i+0x16e>
 8009048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800904c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009050:	e03a      	b.n	80090c8 <_printf_i+0xa8>
 8009052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009056:	2b15      	cmp	r3, #21
 8009058:	d8f6      	bhi.n	8009048 <_printf_i+0x28>
 800905a:	a101      	add	r1, pc, #4	; (adr r1, 8009060 <_printf_i+0x40>)
 800905c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009060:	080090b9 	.word	0x080090b9
 8009064:	080090cd 	.word	0x080090cd
 8009068:	08009049 	.word	0x08009049
 800906c:	08009049 	.word	0x08009049
 8009070:	08009049 	.word	0x08009049
 8009074:	08009049 	.word	0x08009049
 8009078:	080090cd 	.word	0x080090cd
 800907c:	08009049 	.word	0x08009049
 8009080:	08009049 	.word	0x08009049
 8009084:	08009049 	.word	0x08009049
 8009088:	08009049 	.word	0x08009049
 800908c:	080091d9 	.word	0x080091d9
 8009090:	080090fd 	.word	0x080090fd
 8009094:	080091bb 	.word	0x080091bb
 8009098:	08009049 	.word	0x08009049
 800909c:	08009049 	.word	0x08009049
 80090a0:	080091fb 	.word	0x080091fb
 80090a4:	08009049 	.word	0x08009049
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009049 	.word	0x08009049
 80090b0:	08009049 	.word	0x08009049
 80090b4:	080091c3 	.word	0x080091c3
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	602a      	str	r2, [r5, #0]
 80090c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c8:	2301      	movs	r3, #1
 80090ca:	e0a3      	b.n	8009214 <_printf_i+0x1f4>
 80090cc:	6820      	ldr	r0, [r4, #0]
 80090ce:	6829      	ldr	r1, [r5, #0]
 80090d0:	0606      	lsls	r6, r0, #24
 80090d2:	f101 0304 	add.w	r3, r1, #4
 80090d6:	d50a      	bpl.n	80090ee <_printf_i+0xce>
 80090d8:	680e      	ldr	r6, [r1, #0]
 80090da:	602b      	str	r3, [r5, #0]
 80090dc:	2e00      	cmp	r6, #0
 80090de:	da03      	bge.n	80090e8 <_printf_i+0xc8>
 80090e0:	232d      	movs	r3, #45	; 0x2d
 80090e2:	4276      	negs	r6, r6
 80090e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e8:	485e      	ldr	r0, [pc, #376]	; (8009264 <_printf_i+0x244>)
 80090ea:	230a      	movs	r3, #10
 80090ec:	e019      	b.n	8009122 <_printf_i+0x102>
 80090ee:	680e      	ldr	r6, [r1, #0]
 80090f0:	602b      	str	r3, [r5, #0]
 80090f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090f6:	bf18      	it	ne
 80090f8:	b236      	sxthne	r6, r6
 80090fa:	e7ef      	b.n	80090dc <_printf_i+0xbc>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	6820      	ldr	r0, [r4, #0]
 8009100:	1d19      	adds	r1, r3, #4
 8009102:	6029      	str	r1, [r5, #0]
 8009104:	0601      	lsls	r1, r0, #24
 8009106:	d501      	bpl.n	800910c <_printf_i+0xec>
 8009108:	681e      	ldr	r6, [r3, #0]
 800910a:	e002      	b.n	8009112 <_printf_i+0xf2>
 800910c:	0646      	lsls	r6, r0, #25
 800910e:	d5fb      	bpl.n	8009108 <_printf_i+0xe8>
 8009110:	881e      	ldrh	r6, [r3, #0]
 8009112:	4854      	ldr	r0, [pc, #336]	; (8009264 <_printf_i+0x244>)
 8009114:	2f6f      	cmp	r7, #111	; 0x6f
 8009116:	bf0c      	ite	eq
 8009118:	2308      	moveq	r3, #8
 800911a:	230a      	movne	r3, #10
 800911c:	2100      	movs	r1, #0
 800911e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009122:	6865      	ldr	r5, [r4, #4]
 8009124:	60a5      	str	r5, [r4, #8]
 8009126:	2d00      	cmp	r5, #0
 8009128:	bfa2      	ittt	ge
 800912a:	6821      	ldrge	r1, [r4, #0]
 800912c:	f021 0104 	bicge.w	r1, r1, #4
 8009130:	6021      	strge	r1, [r4, #0]
 8009132:	b90e      	cbnz	r6, 8009138 <_printf_i+0x118>
 8009134:	2d00      	cmp	r5, #0
 8009136:	d04d      	beq.n	80091d4 <_printf_i+0x1b4>
 8009138:	4615      	mov	r5, r2
 800913a:	fbb6 f1f3 	udiv	r1, r6, r3
 800913e:	fb03 6711 	mls	r7, r3, r1, r6
 8009142:	5dc7      	ldrb	r7, [r0, r7]
 8009144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009148:	4637      	mov	r7, r6
 800914a:	42bb      	cmp	r3, r7
 800914c:	460e      	mov	r6, r1
 800914e:	d9f4      	bls.n	800913a <_printf_i+0x11a>
 8009150:	2b08      	cmp	r3, #8
 8009152:	d10b      	bne.n	800916c <_printf_i+0x14c>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	07de      	lsls	r6, r3, #31
 8009158:	d508      	bpl.n	800916c <_printf_i+0x14c>
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	6861      	ldr	r1, [r4, #4]
 800915e:	4299      	cmp	r1, r3
 8009160:	bfde      	ittt	le
 8009162:	2330      	movle	r3, #48	; 0x30
 8009164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800916c:	1b52      	subs	r2, r2, r5
 800916e:	6122      	str	r2, [r4, #16]
 8009170:	f8cd a000 	str.w	sl, [sp]
 8009174:	464b      	mov	r3, r9
 8009176:	aa03      	add	r2, sp, #12
 8009178:	4621      	mov	r1, r4
 800917a:	4640      	mov	r0, r8
 800917c:	f7ff fee2 	bl	8008f44 <_printf_common>
 8009180:	3001      	adds	r0, #1
 8009182:	d14c      	bne.n	800921e <_printf_i+0x1fe>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	b004      	add	sp, #16
 800918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918e:	4835      	ldr	r0, [pc, #212]	; (8009264 <_printf_i+0x244>)
 8009190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009194:	6829      	ldr	r1, [r5, #0]
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	f851 6b04 	ldr.w	r6, [r1], #4
 800919c:	6029      	str	r1, [r5, #0]
 800919e:	061d      	lsls	r5, r3, #24
 80091a0:	d514      	bpl.n	80091cc <_printf_i+0x1ac>
 80091a2:	07df      	lsls	r7, r3, #31
 80091a4:	bf44      	itt	mi
 80091a6:	f043 0320 	orrmi.w	r3, r3, #32
 80091aa:	6023      	strmi	r3, [r4, #0]
 80091ac:	b91e      	cbnz	r6, 80091b6 <_printf_i+0x196>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	f023 0320 	bic.w	r3, r3, #32
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	2310      	movs	r3, #16
 80091b8:	e7b0      	b.n	800911c <_printf_i+0xfc>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f043 0320 	orr.w	r3, r3, #32
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	2378      	movs	r3, #120	; 0x78
 80091c4:	4828      	ldr	r0, [pc, #160]	; (8009268 <_printf_i+0x248>)
 80091c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091ca:	e7e3      	b.n	8009194 <_printf_i+0x174>
 80091cc:	0659      	lsls	r1, r3, #25
 80091ce:	bf48      	it	mi
 80091d0:	b2b6      	uxthmi	r6, r6
 80091d2:	e7e6      	b.n	80091a2 <_printf_i+0x182>
 80091d4:	4615      	mov	r5, r2
 80091d6:	e7bb      	b.n	8009150 <_printf_i+0x130>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	6826      	ldr	r6, [r4, #0]
 80091dc:	6961      	ldr	r1, [r4, #20]
 80091de:	1d18      	adds	r0, r3, #4
 80091e0:	6028      	str	r0, [r5, #0]
 80091e2:	0635      	lsls	r5, r6, #24
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	d501      	bpl.n	80091ec <_printf_i+0x1cc>
 80091e8:	6019      	str	r1, [r3, #0]
 80091ea:	e002      	b.n	80091f2 <_printf_i+0x1d2>
 80091ec:	0670      	lsls	r0, r6, #25
 80091ee:	d5fb      	bpl.n	80091e8 <_printf_i+0x1c8>
 80091f0:	8019      	strh	r1, [r3, #0]
 80091f2:	2300      	movs	r3, #0
 80091f4:	6123      	str	r3, [r4, #16]
 80091f6:	4615      	mov	r5, r2
 80091f8:	e7ba      	b.n	8009170 <_printf_i+0x150>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	1d1a      	adds	r2, r3, #4
 80091fe:	602a      	str	r2, [r5, #0]
 8009200:	681d      	ldr	r5, [r3, #0]
 8009202:	6862      	ldr	r2, [r4, #4]
 8009204:	2100      	movs	r1, #0
 8009206:	4628      	mov	r0, r5
 8009208:	f7f6 ffea 	bl	80001e0 <memchr>
 800920c:	b108      	cbz	r0, 8009212 <_printf_i+0x1f2>
 800920e:	1b40      	subs	r0, r0, r5
 8009210:	6060      	str	r0, [r4, #4]
 8009212:	6863      	ldr	r3, [r4, #4]
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	2300      	movs	r3, #0
 8009218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921c:	e7a8      	b.n	8009170 <_printf_i+0x150>
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	462a      	mov	r2, r5
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	47d0      	blx	sl
 8009228:	3001      	adds	r0, #1
 800922a:	d0ab      	beq.n	8009184 <_printf_i+0x164>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	079b      	lsls	r3, r3, #30
 8009230:	d413      	bmi.n	800925a <_printf_i+0x23a>
 8009232:	68e0      	ldr	r0, [r4, #12]
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	4298      	cmp	r0, r3
 8009238:	bfb8      	it	lt
 800923a:	4618      	movlt	r0, r3
 800923c:	e7a4      	b.n	8009188 <_printf_i+0x168>
 800923e:	2301      	movs	r3, #1
 8009240:	4632      	mov	r2, r6
 8009242:	4649      	mov	r1, r9
 8009244:	4640      	mov	r0, r8
 8009246:	47d0      	blx	sl
 8009248:	3001      	adds	r0, #1
 800924a:	d09b      	beq.n	8009184 <_printf_i+0x164>
 800924c:	3501      	adds	r5, #1
 800924e:	68e3      	ldr	r3, [r4, #12]
 8009250:	9903      	ldr	r1, [sp, #12]
 8009252:	1a5b      	subs	r3, r3, r1
 8009254:	42ab      	cmp	r3, r5
 8009256:	dcf2      	bgt.n	800923e <_printf_i+0x21e>
 8009258:	e7eb      	b.n	8009232 <_printf_i+0x212>
 800925a:	2500      	movs	r5, #0
 800925c:	f104 0619 	add.w	r6, r4, #25
 8009260:	e7f5      	b.n	800924e <_printf_i+0x22e>
 8009262:	bf00      	nop
 8009264:	0800ae65 	.word	0x0800ae65
 8009268:	0800ae76 	.word	0x0800ae76
 800926c:	00000000 	.word	0x00000000

08009270 <nan>:
 8009270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009278 <nan+0x8>
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	00000000 	.word	0x00000000
 800927c:	7ff80000 	.word	0x7ff80000

08009280 <_sbrk_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	; (800929c <_sbrk_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f7f8 fe36 	bl	8001efc <_sbrk>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_sbrk_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_sbrk_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	200006a8 	.word	0x200006a8

080092a0 <strncmp>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	b17a      	cbz	r2, 80092c4 <strncmp+0x24>
 80092a4:	4603      	mov	r3, r0
 80092a6:	3901      	subs	r1, #1
 80092a8:	1884      	adds	r4, r0, r2
 80092aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80092b2:	4290      	cmp	r0, r2
 80092b4:	d101      	bne.n	80092ba <strncmp+0x1a>
 80092b6:	42a3      	cmp	r3, r4
 80092b8:	d101      	bne.n	80092be <strncmp+0x1e>
 80092ba:	1a80      	subs	r0, r0, r2
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1f3      	bne.n	80092aa <strncmp+0xa>
 80092c2:	e7fa      	b.n	80092ba <strncmp+0x1a>
 80092c4:	4610      	mov	r0, r2
 80092c6:	e7f9      	b.n	80092bc <strncmp+0x1c>

080092c8 <__swbuf_r>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	460e      	mov	r6, r1
 80092cc:	4614      	mov	r4, r2
 80092ce:	4605      	mov	r5, r0
 80092d0:	b118      	cbz	r0, 80092da <__swbuf_r+0x12>
 80092d2:	6983      	ldr	r3, [r0, #24]
 80092d4:	b90b      	cbnz	r3, 80092da <__swbuf_r+0x12>
 80092d6:	f000 f9e7 	bl	80096a8 <__sinit>
 80092da:	4b21      	ldr	r3, [pc, #132]	; (8009360 <__swbuf_r+0x98>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	d12b      	bne.n	8009338 <__swbuf_r+0x70>
 80092e0:	686c      	ldr	r4, [r5, #4]
 80092e2:	69a3      	ldr	r3, [r4, #24]
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	071a      	lsls	r2, r3, #28
 80092ea:	d52f      	bpl.n	800934c <__swbuf_r+0x84>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	b36b      	cbz	r3, 800934c <__swbuf_r+0x84>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	1ac0      	subs	r0, r0, r3
 80092f6:	6963      	ldr	r3, [r4, #20]
 80092f8:	b2f6      	uxtb	r6, r6
 80092fa:	4283      	cmp	r3, r0
 80092fc:	4637      	mov	r7, r6
 80092fe:	dc04      	bgt.n	800930a <__swbuf_r+0x42>
 8009300:	4621      	mov	r1, r4
 8009302:	4628      	mov	r0, r5
 8009304:	f000 f93c 	bl	8009580 <_fflush_r>
 8009308:	bb30      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	3b01      	subs	r3, #1
 800930e:	60a3      	str	r3, [r4, #8]
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	701e      	strb	r6, [r3, #0]
 8009318:	6963      	ldr	r3, [r4, #20]
 800931a:	3001      	adds	r0, #1
 800931c:	4283      	cmp	r3, r0
 800931e:	d004      	beq.n	800932a <__swbuf_r+0x62>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	07db      	lsls	r3, r3, #31
 8009324:	d506      	bpl.n	8009334 <__swbuf_r+0x6c>
 8009326:	2e0a      	cmp	r6, #10
 8009328:	d104      	bne.n	8009334 <__swbuf_r+0x6c>
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f927 	bl	8009580 <_fflush_r>
 8009332:	b988      	cbnz	r0, 8009358 <__swbuf_r+0x90>
 8009334:	4638      	mov	r0, r7
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009338:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <__swbuf_r+0x9c>)
 800933a:	429c      	cmp	r4, r3
 800933c:	d101      	bne.n	8009342 <__swbuf_r+0x7a>
 800933e:	68ac      	ldr	r4, [r5, #8]
 8009340:	e7cf      	b.n	80092e2 <__swbuf_r+0x1a>
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <__swbuf_r+0xa0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	bf08      	it	eq
 8009348:	68ec      	ldreq	r4, [r5, #12]
 800934a:	e7ca      	b.n	80092e2 <__swbuf_r+0x1a>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f81a 	bl	8009388 <__swsetup_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0cb      	beq.n	80092f0 <__swbuf_r+0x28>
 8009358:	f04f 37ff 	mov.w	r7, #4294967295
 800935c:	e7ea      	b.n	8009334 <__swbuf_r+0x6c>
 800935e:	bf00      	nop
 8009360:	0800aea8 	.word	0x0800aea8
 8009364:	0800aec8 	.word	0x0800aec8
 8009368:	0800ae88 	.word	0x0800ae88

0800936c <__ascii_wctomb>:
 800936c:	b149      	cbz	r1, 8009382 <__ascii_wctomb+0x16>
 800936e:	2aff      	cmp	r2, #255	; 0xff
 8009370:	bf85      	ittet	hi
 8009372:	238a      	movhi	r3, #138	; 0x8a
 8009374:	6003      	strhi	r3, [r0, #0]
 8009376:	700a      	strbls	r2, [r1, #0]
 8009378:	f04f 30ff 	movhi.w	r0, #4294967295
 800937c:	bf98      	it	ls
 800937e:	2001      	movls	r0, #1
 8009380:	4770      	bx	lr
 8009382:	4608      	mov	r0, r1
 8009384:	4770      	bx	lr
	...

08009388 <__swsetup_r>:
 8009388:	4b32      	ldr	r3, [pc, #200]	; (8009454 <__swsetup_r+0xcc>)
 800938a:	b570      	push	{r4, r5, r6, lr}
 800938c:	681d      	ldr	r5, [r3, #0]
 800938e:	4606      	mov	r6, r0
 8009390:	460c      	mov	r4, r1
 8009392:	b125      	cbz	r5, 800939e <__swsetup_r+0x16>
 8009394:	69ab      	ldr	r3, [r5, #24]
 8009396:	b913      	cbnz	r3, 800939e <__swsetup_r+0x16>
 8009398:	4628      	mov	r0, r5
 800939a:	f000 f985 	bl	80096a8 <__sinit>
 800939e:	4b2e      	ldr	r3, [pc, #184]	; (8009458 <__swsetup_r+0xd0>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	d10f      	bne.n	80093c4 <__swsetup_r+0x3c>
 80093a4:	686c      	ldr	r4, [r5, #4]
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ac:	0719      	lsls	r1, r3, #28
 80093ae:	d42c      	bmi.n	800940a <__swsetup_r+0x82>
 80093b0:	06dd      	lsls	r5, r3, #27
 80093b2:	d411      	bmi.n	80093d8 <__swsetup_r+0x50>
 80093b4:	2309      	movs	r3, #9
 80093b6:	6033      	str	r3, [r6, #0]
 80093b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093bc:	81a3      	strh	r3, [r4, #12]
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	e03e      	b.n	8009442 <__swsetup_r+0xba>
 80093c4:	4b25      	ldr	r3, [pc, #148]	; (800945c <__swsetup_r+0xd4>)
 80093c6:	429c      	cmp	r4, r3
 80093c8:	d101      	bne.n	80093ce <__swsetup_r+0x46>
 80093ca:	68ac      	ldr	r4, [r5, #8]
 80093cc:	e7eb      	b.n	80093a6 <__swsetup_r+0x1e>
 80093ce:	4b24      	ldr	r3, [pc, #144]	; (8009460 <__swsetup_r+0xd8>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	bf08      	it	eq
 80093d4:	68ec      	ldreq	r4, [r5, #12]
 80093d6:	e7e6      	b.n	80093a6 <__swsetup_r+0x1e>
 80093d8:	0758      	lsls	r0, r3, #29
 80093da:	d512      	bpl.n	8009402 <__swsetup_r+0x7a>
 80093dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093de:	b141      	cbz	r1, 80093f2 <__swsetup_r+0x6a>
 80093e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e4:	4299      	cmp	r1, r3
 80093e6:	d002      	beq.n	80093ee <__swsetup_r+0x66>
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff fa15 	bl	8008818 <_free_r>
 80093ee:	2300      	movs	r3, #0
 80093f0:	6363      	str	r3, [r4, #52]	; 0x34
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	2300      	movs	r3, #0
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f043 0308 	orr.w	r3, r3, #8
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	b94b      	cbnz	r3, 8009422 <__swsetup_r+0x9a>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009418:	d003      	beq.n	8009422 <__swsetup_r+0x9a>
 800941a:	4621      	mov	r1, r4
 800941c:	4630      	mov	r0, r6
 800941e:	f000 fa09 	bl	8009834 <__smakebuf_r>
 8009422:	89a0      	ldrh	r0, [r4, #12]
 8009424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009428:	f010 0301 	ands.w	r3, r0, #1
 800942c:	d00a      	beq.n	8009444 <__swsetup_r+0xbc>
 800942e:	2300      	movs	r3, #0
 8009430:	60a3      	str	r3, [r4, #8]
 8009432:	6963      	ldr	r3, [r4, #20]
 8009434:	425b      	negs	r3, r3
 8009436:	61a3      	str	r3, [r4, #24]
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	b943      	cbnz	r3, 800944e <__swsetup_r+0xc6>
 800943c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009440:	d1ba      	bne.n	80093b8 <__swsetup_r+0x30>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	0781      	lsls	r1, r0, #30
 8009446:	bf58      	it	pl
 8009448:	6963      	ldrpl	r3, [r4, #20]
 800944a:	60a3      	str	r3, [r4, #8]
 800944c:	e7f4      	b.n	8009438 <__swsetup_r+0xb0>
 800944e:	2000      	movs	r0, #0
 8009450:	e7f7      	b.n	8009442 <__swsetup_r+0xba>
 8009452:	bf00      	nop
 8009454:	2000004c 	.word	0x2000004c
 8009458:	0800aea8 	.word	0x0800aea8
 800945c:	0800aec8 	.word	0x0800aec8
 8009460:	0800ae88 	.word	0x0800ae88

08009464 <abort>:
 8009464:	b508      	push	{r3, lr}
 8009466:	2006      	movs	r0, #6
 8009468:	f000 faa2 	bl	80099b0 <raise>
 800946c:	2001      	movs	r0, #1
 800946e:	f7f8 fccd 	bl	8001e0c <_exit>
	...

08009474 <__sflush_r>:
 8009474:	898a      	ldrh	r2, [r1, #12]
 8009476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	4605      	mov	r5, r0
 800947c:	0710      	lsls	r0, r2, #28
 800947e:	460c      	mov	r4, r1
 8009480:	d458      	bmi.n	8009534 <__sflush_r+0xc0>
 8009482:	684b      	ldr	r3, [r1, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	dc05      	bgt.n	8009494 <__sflush_r+0x20>
 8009488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	dc02      	bgt.n	8009494 <__sflush_r+0x20>
 800948e:	2000      	movs	r0, #0
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009496:	2e00      	cmp	r6, #0
 8009498:	d0f9      	beq.n	800948e <__sflush_r+0x1a>
 800949a:	2300      	movs	r3, #0
 800949c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094a0:	682f      	ldr	r7, [r5, #0]
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	d032      	beq.n	800950c <__sflush_r+0x98>
 80094a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	075a      	lsls	r2, r3, #29
 80094ac:	d505      	bpl.n	80094ba <__sflush_r+0x46>
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	1ac0      	subs	r0, r0, r3
 80094b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094b4:	b10b      	cbz	r3, 80094ba <__sflush_r+0x46>
 80094b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094b8:	1ac0      	subs	r0, r0, r3
 80094ba:	2300      	movs	r3, #0
 80094bc:	4602      	mov	r2, r0
 80094be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094c0:	6a21      	ldr	r1, [r4, #32]
 80094c2:	4628      	mov	r0, r5
 80094c4:	47b0      	blx	r6
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	d106      	bne.n	80094da <__sflush_r+0x66>
 80094cc:	6829      	ldr	r1, [r5, #0]
 80094ce:	291d      	cmp	r1, #29
 80094d0:	d82c      	bhi.n	800952c <__sflush_r+0xb8>
 80094d2:	4a2a      	ldr	r2, [pc, #168]	; (800957c <__sflush_r+0x108>)
 80094d4:	40ca      	lsrs	r2, r1
 80094d6:	07d6      	lsls	r6, r2, #31
 80094d8:	d528      	bpl.n	800952c <__sflush_r+0xb8>
 80094da:	2200      	movs	r2, #0
 80094dc:	6062      	str	r2, [r4, #4]
 80094de:	04d9      	lsls	r1, r3, #19
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	6022      	str	r2, [r4, #0]
 80094e4:	d504      	bpl.n	80094f0 <__sflush_r+0x7c>
 80094e6:	1c42      	adds	r2, r0, #1
 80094e8:	d101      	bne.n	80094ee <__sflush_r+0x7a>
 80094ea:	682b      	ldr	r3, [r5, #0]
 80094ec:	b903      	cbnz	r3, 80094f0 <__sflush_r+0x7c>
 80094ee:	6560      	str	r0, [r4, #84]	; 0x54
 80094f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f2:	602f      	str	r7, [r5, #0]
 80094f4:	2900      	cmp	r1, #0
 80094f6:	d0ca      	beq.n	800948e <__sflush_r+0x1a>
 80094f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094fc:	4299      	cmp	r1, r3
 80094fe:	d002      	beq.n	8009506 <__sflush_r+0x92>
 8009500:	4628      	mov	r0, r5
 8009502:	f7ff f989 	bl	8008818 <_free_r>
 8009506:	2000      	movs	r0, #0
 8009508:	6360      	str	r0, [r4, #52]	; 0x34
 800950a:	e7c1      	b.n	8009490 <__sflush_r+0x1c>
 800950c:	6a21      	ldr	r1, [r4, #32]
 800950e:	2301      	movs	r3, #1
 8009510:	4628      	mov	r0, r5
 8009512:	47b0      	blx	r6
 8009514:	1c41      	adds	r1, r0, #1
 8009516:	d1c7      	bne.n	80094a8 <__sflush_r+0x34>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0c4      	beq.n	80094a8 <__sflush_r+0x34>
 800951e:	2b1d      	cmp	r3, #29
 8009520:	d001      	beq.n	8009526 <__sflush_r+0xb2>
 8009522:	2b16      	cmp	r3, #22
 8009524:	d101      	bne.n	800952a <__sflush_r+0xb6>
 8009526:	602f      	str	r7, [r5, #0]
 8009528:	e7b1      	b.n	800948e <__sflush_r+0x1a>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	e7ad      	b.n	8009490 <__sflush_r+0x1c>
 8009534:	690f      	ldr	r7, [r1, #16]
 8009536:	2f00      	cmp	r7, #0
 8009538:	d0a9      	beq.n	800948e <__sflush_r+0x1a>
 800953a:	0793      	lsls	r3, r2, #30
 800953c:	680e      	ldr	r6, [r1, #0]
 800953e:	bf08      	it	eq
 8009540:	694b      	ldreq	r3, [r1, #20]
 8009542:	600f      	str	r7, [r1, #0]
 8009544:	bf18      	it	ne
 8009546:	2300      	movne	r3, #0
 8009548:	eba6 0807 	sub.w	r8, r6, r7
 800954c:	608b      	str	r3, [r1, #8]
 800954e:	f1b8 0f00 	cmp.w	r8, #0
 8009552:	dd9c      	ble.n	800948e <__sflush_r+0x1a>
 8009554:	6a21      	ldr	r1, [r4, #32]
 8009556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009558:	4643      	mov	r3, r8
 800955a:	463a      	mov	r2, r7
 800955c:	4628      	mov	r0, r5
 800955e:	47b0      	blx	r6
 8009560:	2800      	cmp	r0, #0
 8009562:	dc06      	bgt.n	8009572 <__sflush_r+0xfe>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956a:	81a3      	strh	r3, [r4, #12]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	e78e      	b.n	8009490 <__sflush_r+0x1c>
 8009572:	4407      	add	r7, r0
 8009574:	eba8 0800 	sub.w	r8, r8, r0
 8009578:	e7e9      	b.n	800954e <__sflush_r+0xda>
 800957a:	bf00      	nop
 800957c:	20400001 	.word	0x20400001

08009580 <_fflush_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	4605      	mov	r5, r0
 8009586:	460c      	mov	r4, r1
 8009588:	b913      	cbnz	r3, 8009590 <_fflush_r+0x10>
 800958a:	2500      	movs	r5, #0
 800958c:	4628      	mov	r0, r5
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	b118      	cbz	r0, 800959a <_fflush_r+0x1a>
 8009592:	6983      	ldr	r3, [r0, #24]
 8009594:	b90b      	cbnz	r3, 800959a <_fflush_r+0x1a>
 8009596:	f000 f887 	bl	80096a8 <__sinit>
 800959a:	4b14      	ldr	r3, [pc, #80]	; (80095ec <_fflush_r+0x6c>)
 800959c:	429c      	cmp	r4, r3
 800959e:	d11b      	bne.n	80095d8 <_fflush_r+0x58>
 80095a0:	686c      	ldr	r4, [r5, #4]
 80095a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0ef      	beq.n	800958a <_fflush_r+0xa>
 80095aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095ac:	07d0      	lsls	r0, r2, #31
 80095ae:	d404      	bmi.n	80095ba <_fflush_r+0x3a>
 80095b0:	0599      	lsls	r1, r3, #22
 80095b2:	d402      	bmi.n	80095ba <_fflush_r+0x3a>
 80095b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b6:	f000 f915 	bl	80097e4 <__retarget_lock_acquire_recursive>
 80095ba:	4628      	mov	r0, r5
 80095bc:	4621      	mov	r1, r4
 80095be:	f7ff ff59 	bl	8009474 <__sflush_r>
 80095c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095c4:	07da      	lsls	r2, r3, #31
 80095c6:	4605      	mov	r5, r0
 80095c8:	d4e0      	bmi.n	800958c <_fflush_r+0xc>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	059b      	lsls	r3, r3, #22
 80095ce:	d4dd      	bmi.n	800958c <_fflush_r+0xc>
 80095d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095d2:	f000 f908 	bl	80097e6 <__retarget_lock_release_recursive>
 80095d6:	e7d9      	b.n	800958c <_fflush_r+0xc>
 80095d8:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <_fflush_r+0x70>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	d101      	bne.n	80095e2 <_fflush_r+0x62>
 80095de:	68ac      	ldr	r4, [r5, #8]
 80095e0:	e7df      	b.n	80095a2 <_fflush_r+0x22>
 80095e2:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <_fflush_r+0x74>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	bf08      	it	eq
 80095e8:	68ec      	ldreq	r4, [r5, #12]
 80095ea:	e7da      	b.n	80095a2 <_fflush_r+0x22>
 80095ec:	0800aea8 	.word	0x0800aea8
 80095f0:	0800aec8 	.word	0x0800aec8
 80095f4:	0800ae88 	.word	0x0800ae88

080095f8 <std>:
 80095f8:	2300      	movs	r3, #0
 80095fa:	b510      	push	{r4, lr}
 80095fc:	4604      	mov	r4, r0
 80095fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009606:	6083      	str	r3, [r0, #8]
 8009608:	8181      	strh	r1, [r0, #12]
 800960a:	6643      	str	r3, [r0, #100]	; 0x64
 800960c:	81c2      	strh	r2, [r0, #14]
 800960e:	6183      	str	r3, [r0, #24]
 8009610:	4619      	mov	r1, r3
 8009612:	2208      	movs	r2, #8
 8009614:	305c      	adds	r0, #92	; 0x5c
 8009616:	f7fd f917 	bl	8006848 <memset>
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <std+0x38>)
 800961c:	6263      	str	r3, [r4, #36]	; 0x24
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x3c>)
 8009620:	62a3      	str	r3, [r4, #40]	; 0x28
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x40>)
 8009624:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <std+0x44>)
 8009628:	6224      	str	r4, [r4, #32]
 800962a:	6323      	str	r3, [r4, #48]	; 0x30
 800962c:	bd10      	pop	{r4, pc}
 800962e:	bf00      	nop
 8009630:	080099e9 	.word	0x080099e9
 8009634:	08009a0b 	.word	0x08009a0b
 8009638:	08009a43 	.word	0x08009a43
 800963c:	08009a67 	.word	0x08009a67

08009640 <_cleanup_r>:
 8009640:	4901      	ldr	r1, [pc, #4]	; (8009648 <_cleanup_r+0x8>)
 8009642:	f000 b8af 	b.w	80097a4 <_fwalk_reent>
 8009646:	bf00      	nop
 8009648:	08009581 	.word	0x08009581

0800964c <__sfmoreglue>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	2268      	movs	r2, #104	; 0x68
 8009650:	1e4d      	subs	r5, r1, #1
 8009652:	4355      	muls	r5, r2
 8009654:	460e      	mov	r6, r1
 8009656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800965a:	f7ff f949 	bl	80088f0 <_malloc_r>
 800965e:	4604      	mov	r4, r0
 8009660:	b140      	cbz	r0, 8009674 <__sfmoreglue+0x28>
 8009662:	2100      	movs	r1, #0
 8009664:	e9c0 1600 	strd	r1, r6, [r0]
 8009668:	300c      	adds	r0, #12
 800966a:	60a0      	str	r0, [r4, #8]
 800966c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009670:	f7fd f8ea 	bl	8006848 <memset>
 8009674:	4620      	mov	r0, r4
 8009676:	bd70      	pop	{r4, r5, r6, pc}

08009678 <__sfp_lock_acquire>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__sfp_lock_acquire+0x8>)
 800967a:	f000 b8b3 	b.w	80097e4 <__retarget_lock_acquire_recursive>
 800967e:	bf00      	nop
 8009680:	200006a5 	.word	0x200006a5

08009684 <__sfp_lock_release>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__sfp_lock_release+0x8>)
 8009686:	f000 b8ae 	b.w	80097e6 <__retarget_lock_release_recursive>
 800968a:	bf00      	nop
 800968c:	200006a5 	.word	0x200006a5

08009690 <__sinit_lock_acquire>:
 8009690:	4801      	ldr	r0, [pc, #4]	; (8009698 <__sinit_lock_acquire+0x8>)
 8009692:	f000 b8a7 	b.w	80097e4 <__retarget_lock_acquire_recursive>
 8009696:	bf00      	nop
 8009698:	200006a6 	.word	0x200006a6

0800969c <__sinit_lock_release>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__sinit_lock_release+0x8>)
 800969e:	f000 b8a2 	b.w	80097e6 <__retarget_lock_release_recursive>
 80096a2:	bf00      	nop
 80096a4:	200006a6 	.word	0x200006a6

080096a8 <__sinit>:
 80096a8:	b510      	push	{r4, lr}
 80096aa:	4604      	mov	r4, r0
 80096ac:	f7ff fff0 	bl	8009690 <__sinit_lock_acquire>
 80096b0:	69a3      	ldr	r3, [r4, #24]
 80096b2:	b11b      	cbz	r3, 80096bc <__sinit+0x14>
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b8:	f7ff bff0 	b.w	800969c <__sinit_lock_release>
 80096bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096c0:	6523      	str	r3, [r4, #80]	; 0x50
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <__sinit+0x68>)
 80096c4:	4a13      	ldr	r2, [pc, #76]	; (8009714 <__sinit+0x6c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	bf04      	itt	eq
 80096ce:	2301      	moveq	r3, #1
 80096d0:	61a3      	streq	r3, [r4, #24]
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f820 	bl	8009718 <__sfp>
 80096d8:	6060      	str	r0, [r4, #4]
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 f81c 	bl	8009718 <__sfp>
 80096e0:	60a0      	str	r0, [r4, #8]
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 f818 	bl	8009718 <__sfp>
 80096e8:	2200      	movs	r2, #0
 80096ea:	60e0      	str	r0, [r4, #12]
 80096ec:	2104      	movs	r1, #4
 80096ee:	6860      	ldr	r0, [r4, #4]
 80096f0:	f7ff ff82 	bl	80095f8 <std>
 80096f4:	68a0      	ldr	r0, [r4, #8]
 80096f6:	2201      	movs	r2, #1
 80096f8:	2109      	movs	r1, #9
 80096fa:	f7ff ff7d 	bl	80095f8 <std>
 80096fe:	68e0      	ldr	r0, [r4, #12]
 8009700:	2202      	movs	r2, #2
 8009702:	2112      	movs	r1, #18
 8009704:	f7ff ff78 	bl	80095f8 <std>
 8009708:	2301      	movs	r3, #1
 800970a:	61a3      	str	r3, [r4, #24]
 800970c:	e7d2      	b.n	80096b4 <__sinit+0xc>
 800970e:	bf00      	nop
 8009710:	0800aa5c 	.word	0x0800aa5c
 8009714:	08009641 	.word	0x08009641

08009718 <__sfp>:
 8009718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971a:	4607      	mov	r7, r0
 800971c:	f7ff ffac 	bl	8009678 <__sfp_lock_acquire>
 8009720:	4b1e      	ldr	r3, [pc, #120]	; (800979c <__sfp+0x84>)
 8009722:	681e      	ldr	r6, [r3, #0]
 8009724:	69b3      	ldr	r3, [r6, #24]
 8009726:	b913      	cbnz	r3, 800972e <__sfp+0x16>
 8009728:	4630      	mov	r0, r6
 800972a:	f7ff ffbd 	bl	80096a8 <__sinit>
 800972e:	3648      	adds	r6, #72	; 0x48
 8009730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009734:	3b01      	subs	r3, #1
 8009736:	d503      	bpl.n	8009740 <__sfp+0x28>
 8009738:	6833      	ldr	r3, [r6, #0]
 800973a:	b30b      	cbz	r3, 8009780 <__sfp+0x68>
 800973c:	6836      	ldr	r6, [r6, #0]
 800973e:	e7f7      	b.n	8009730 <__sfp+0x18>
 8009740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009744:	b9d5      	cbnz	r5, 800977c <__sfp+0x64>
 8009746:	4b16      	ldr	r3, [pc, #88]	; (80097a0 <__sfp+0x88>)
 8009748:	60e3      	str	r3, [r4, #12]
 800974a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800974e:	6665      	str	r5, [r4, #100]	; 0x64
 8009750:	f000 f847 	bl	80097e2 <__retarget_lock_init_recursive>
 8009754:	f7ff ff96 	bl	8009684 <__sfp_lock_release>
 8009758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800975c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009760:	6025      	str	r5, [r4, #0]
 8009762:	61a5      	str	r5, [r4, #24]
 8009764:	2208      	movs	r2, #8
 8009766:	4629      	mov	r1, r5
 8009768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800976c:	f7fd f86c 	bl	8006848 <memset>
 8009770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009778:	4620      	mov	r0, r4
 800977a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800977c:	3468      	adds	r4, #104	; 0x68
 800977e:	e7d9      	b.n	8009734 <__sfp+0x1c>
 8009780:	2104      	movs	r1, #4
 8009782:	4638      	mov	r0, r7
 8009784:	f7ff ff62 	bl	800964c <__sfmoreglue>
 8009788:	4604      	mov	r4, r0
 800978a:	6030      	str	r0, [r6, #0]
 800978c:	2800      	cmp	r0, #0
 800978e:	d1d5      	bne.n	800973c <__sfp+0x24>
 8009790:	f7ff ff78 	bl	8009684 <__sfp_lock_release>
 8009794:	230c      	movs	r3, #12
 8009796:	603b      	str	r3, [r7, #0]
 8009798:	e7ee      	b.n	8009778 <__sfp+0x60>
 800979a:	bf00      	nop
 800979c:	0800aa5c 	.word	0x0800aa5c
 80097a0:	ffff0001 	.word	0xffff0001

080097a4 <_fwalk_reent>:
 80097a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a8:	4606      	mov	r6, r0
 80097aa:	4688      	mov	r8, r1
 80097ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097b0:	2700      	movs	r7, #0
 80097b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097b6:	f1b9 0901 	subs.w	r9, r9, #1
 80097ba:	d505      	bpl.n	80097c8 <_fwalk_reent+0x24>
 80097bc:	6824      	ldr	r4, [r4, #0]
 80097be:	2c00      	cmp	r4, #0
 80097c0:	d1f7      	bne.n	80097b2 <_fwalk_reent+0xe>
 80097c2:	4638      	mov	r0, r7
 80097c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c8:	89ab      	ldrh	r3, [r5, #12]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d907      	bls.n	80097de <_fwalk_reent+0x3a>
 80097ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d2:	3301      	adds	r3, #1
 80097d4:	d003      	beq.n	80097de <_fwalk_reent+0x3a>
 80097d6:	4629      	mov	r1, r5
 80097d8:	4630      	mov	r0, r6
 80097da:	47c0      	blx	r8
 80097dc:	4307      	orrs	r7, r0
 80097de:	3568      	adds	r5, #104	; 0x68
 80097e0:	e7e9      	b.n	80097b6 <_fwalk_reent+0x12>

080097e2 <__retarget_lock_init_recursive>:
 80097e2:	4770      	bx	lr

080097e4 <__retarget_lock_acquire_recursive>:
 80097e4:	4770      	bx	lr

080097e6 <__retarget_lock_release_recursive>:
 80097e6:	4770      	bx	lr

080097e8 <__swhatbuf_r>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	460e      	mov	r6, r1
 80097ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f0:	2900      	cmp	r1, #0
 80097f2:	b096      	sub	sp, #88	; 0x58
 80097f4:	4614      	mov	r4, r2
 80097f6:	461d      	mov	r5, r3
 80097f8:	da08      	bge.n	800980c <__swhatbuf_r+0x24>
 80097fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	602a      	str	r2, [r5, #0]
 8009802:	061a      	lsls	r2, r3, #24
 8009804:	d410      	bmi.n	8009828 <__swhatbuf_r+0x40>
 8009806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980a:	e00e      	b.n	800982a <__swhatbuf_r+0x42>
 800980c:	466a      	mov	r2, sp
 800980e:	f000 f951 	bl	8009ab4 <_fstat_r>
 8009812:	2800      	cmp	r0, #0
 8009814:	dbf1      	blt.n	80097fa <__swhatbuf_r+0x12>
 8009816:	9a01      	ldr	r2, [sp, #4]
 8009818:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800981c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009820:	425a      	negs	r2, r3
 8009822:	415a      	adcs	r2, r3
 8009824:	602a      	str	r2, [r5, #0]
 8009826:	e7ee      	b.n	8009806 <__swhatbuf_r+0x1e>
 8009828:	2340      	movs	r3, #64	; 0x40
 800982a:	2000      	movs	r0, #0
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	b016      	add	sp, #88	; 0x58
 8009830:	bd70      	pop	{r4, r5, r6, pc}
	...

08009834 <__smakebuf_r>:
 8009834:	898b      	ldrh	r3, [r1, #12]
 8009836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009838:	079d      	lsls	r5, r3, #30
 800983a:	4606      	mov	r6, r0
 800983c:	460c      	mov	r4, r1
 800983e:	d507      	bpl.n	8009850 <__smakebuf_r+0x1c>
 8009840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	2301      	movs	r3, #1
 800984a:	6163      	str	r3, [r4, #20]
 800984c:	b002      	add	sp, #8
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	ab01      	add	r3, sp, #4
 8009852:	466a      	mov	r2, sp
 8009854:	f7ff ffc8 	bl	80097e8 <__swhatbuf_r>
 8009858:	9900      	ldr	r1, [sp, #0]
 800985a:	4605      	mov	r5, r0
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff f847 	bl	80088f0 <_malloc_r>
 8009862:	b948      	cbnz	r0, 8009878 <__smakebuf_r+0x44>
 8009864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009868:	059a      	lsls	r2, r3, #22
 800986a:	d4ef      	bmi.n	800984c <__smakebuf_r+0x18>
 800986c:	f023 0303 	bic.w	r3, r3, #3
 8009870:	f043 0302 	orr.w	r3, r3, #2
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	e7e3      	b.n	8009840 <__smakebuf_r+0xc>
 8009878:	4b0d      	ldr	r3, [pc, #52]	; (80098b0 <__smakebuf_r+0x7c>)
 800987a:	62b3      	str	r3, [r6, #40]	; 0x28
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	6020      	str	r0, [r4, #0]
 8009880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	9b00      	ldr	r3, [sp, #0]
 8009888:	6163      	str	r3, [r4, #20]
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	6120      	str	r0, [r4, #16]
 800988e:	b15b      	cbz	r3, 80098a8 <__smakebuf_r+0x74>
 8009890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009894:	4630      	mov	r0, r6
 8009896:	f000 f91f 	bl	8009ad8 <_isatty_r>
 800989a:	b128      	cbz	r0, 80098a8 <__smakebuf_r+0x74>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f023 0303 	bic.w	r3, r3, #3
 80098a2:	f043 0301 	orr.w	r3, r3, #1
 80098a6:	81a3      	strh	r3, [r4, #12]
 80098a8:	89a0      	ldrh	r0, [r4, #12]
 80098aa:	4305      	orrs	r5, r0
 80098ac:	81a5      	strh	r5, [r4, #12]
 80098ae:	e7cd      	b.n	800984c <__smakebuf_r+0x18>
 80098b0:	08009641 	.word	0x08009641

080098b4 <memmove>:
 80098b4:	4288      	cmp	r0, r1
 80098b6:	b510      	push	{r4, lr}
 80098b8:	eb01 0402 	add.w	r4, r1, r2
 80098bc:	d902      	bls.n	80098c4 <memmove+0x10>
 80098be:	4284      	cmp	r4, r0
 80098c0:	4623      	mov	r3, r4
 80098c2:	d807      	bhi.n	80098d4 <memmove+0x20>
 80098c4:	1e43      	subs	r3, r0, #1
 80098c6:	42a1      	cmp	r1, r4
 80098c8:	d008      	beq.n	80098dc <memmove+0x28>
 80098ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098d2:	e7f8      	b.n	80098c6 <memmove+0x12>
 80098d4:	4402      	add	r2, r0
 80098d6:	4601      	mov	r1, r0
 80098d8:	428a      	cmp	r2, r1
 80098da:	d100      	bne.n	80098de <memmove+0x2a>
 80098dc:	bd10      	pop	{r4, pc}
 80098de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e6:	e7f7      	b.n	80098d8 <memmove+0x24>

080098e8 <__malloc_lock>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__malloc_lock+0x8>)
 80098ea:	f7ff bf7b 	b.w	80097e4 <__retarget_lock_acquire_recursive>
 80098ee:	bf00      	nop
 80098f0:	200006a4 	.word	0x200006a4

080098f4 <__malloc_unlock>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__malloc_unlock+0x8>)
 80098f6:	f7ff bf76 	b.w	80097e6 <__retarget_lock_release_recursive>
 80098fa:	bf00      	nop
 80098fc:	200006a4 	.word	0x200006a4

08009900 <_realloc_r>:
 8009900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	4680      	mov	r8, r0
 8009906:	4614      	mov	r4, r2
 8009908:	460e      	mov	r6, r1
 800990a:	b921      	cbnz	r1, 8009916 <_realloc_r+0x16>
 800990c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	4611      	mov	r1, r2
 8009912:	f7fe bfed 	b.w	80088f0 <_malloc_r>
 8009916:	b92a      	cbnz	r2, 8009924 <_realloc_r+0x24>
 8009918:	f7fe ff7e 	bl	8008818 <_free_r>
 800991c:	4625      	mov	r5, r4
 800991e:	4628      	mov	r0, r5
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	f000 f8fa 	bl	8009b1c <_malloc_usable_size_r>
 8009928:	4284      	cmp	r4, r0
 800992a:	4607      	mov	r7, r0
 800992c:	d802      	bhi.n	8009934 <_realloc_r+0x34>
 800992e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009932:	d812      	bhi.n	800995a <_realloc_r+0x5a>
 8009934:	4621      	mov	r1, r4
 8009936:	4640      	mov	r0, r8
 8009938:	f7fe ffda 	bl	80088f0 <_malloc_r>
 800993c:	4605      	mov	r5, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	d0ed      	beq.n	800991e <_realloc_r+0x1e>
 8009942:	42bc      	cmp	r4, r7
 8009944:	4622      	mov	r2, r4
 8009946:	4631      	mov	r1, r6
 8009948:	bf28      	it	cs
 800994a:	463a      	movcs	r2, r7
 800994c:	f7fc ff6e 	bl	800682c <memcpy>
 8009950:	4631      	mov	r1, r6
 8009952:	4640      	mov	r0, r8
 8009954:	f7fe ff60 	bl	8008818 <_free_r>
 8009958:	e7e1      	b.n	800991e <_realloc_r+0x1e>
 800995a:	4635      	mov	r5, r6
 800995c:	e7df      	b.n	800991e <_realloc_r+0x1e>

0800995e <_raise_r>:
 800995e:	291f      	cmp	r1, #31
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4604      	mov	r4, r0
 8009964:	460d      	mov	r5, r1
 8009966:	d904      	bls.n	8009972 <_raise_r+0x14>
 8009968:	2316      	movs	r3, #22
 800996a:	6003      	str	r3, [r0, #0]
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009974:	b112      	cbz	r2, 800997c <_raise_r+0x1e>
 8009976:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800997a:	b94b      	cbnz	r3, 8009990 <_raise_r+0x32>
 800997c:	4620      	mov	r0, r4
 800997e:	f000 f831 	bl	80099e4 <_getpid_r>
 8009982:	462a      	mov	r2, r5
 8009984:	4601      	mov	r1, r0
 8009986:	4620      	mov	r0, r4
 8009988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800998c:	f000 b818 	b.w	80099c0 <_kill_r>
 8009990:	2b01      	cmp	r3, #1
 8009992:	d00a      	beq.n	80099aa <_raise_r+0x4c>
 8009994:	1c59      	adds	r1, r3, #1
 8009996:	d103      	bne.n	80099a0 <_raise_r+0x42>
 8009998:	2316      	movs	r3, #22
 800999a:	6003      	str	r3, [r0, #0]
 800999c:	2001      	movs	r0, #1
 800999e:	e7e7      	b.n	8009970 <_raise_r+0x12>
 80099a0:	2400      	movs	r4, #0
 80099a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099a6:	4628      	mov	r0, r5
 80099a8:	4798      	blx	r3
 80099aa:	2000      	movs	r0, #0
 80099ac:	e7e0      	b.n	8009970 <_raise_r+0x12>
	...

080099b0 <raise>:
 80099b0:	4b02      	ldr	r3, [pc, #8]	; (80099bc <raise+0xc>)
 80099b2:	4601      	mov	r1, r0
 80099b4:	6818      	ldr	r0, [r3, #0]
 80099b6:	f7ff bfd2 	b.w	800995e <_raise_r>
 80099ba:	bf00      	nop
 80099bc:	2000004c 	.word	0x2000004c

080099c0 <_kill_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_kill_r+0x20>)
 80099c4:	2300      	movs	r3, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	602b      	str	r3, [r5, #0]
 80099ce:	f7f8 fa0d 	bl	8001dec <_kill>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d102      	bne.n	80099dc <_kill_r+0x1c>
 80099d6:	682b      	ldr	r3, [r5, #0]
 80099d8:	b103      	cbz	r3, 80099dc <_kill_r+0x1c>
 80099da:	6023      	str	r3, [r4, #0]
 80099dc:	bd38      	pop	{r3, r4, r5, pc}
 80099de:	bf00      	nop
 80099e0:	200006a8 	.word	0x200006a8

080099e4 <_getpid_r>:
 80099e4:	f7f8 b9fa 	b.w	8001ddc <_getpid>

080099e8 <__sread>:
 80099e8:	b510      	push	{r4, lr}
 80099ea:	460c      	mov	r4, r1
 80099ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f0:	f000 f89c 	bl	8009b2c <_read_r>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	bfab      	itete	ge
 80099f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099fa:	89a3      	ldrhlt	r3, [r4, #12]
 80099fc:	181b      	addge	r3, r3, r0
 80099fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a02:	bfac      	ite	ge
 8009a04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a06:	81a3      	strhlt	r3, [r4, #12]
 8009a08:	bd10      	pop	{r4, pc}

08009a0a <__swrite>:
 8009a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0e:	461f      	mov	r7, r3
 8009a10:	898b      	ldrh	r3, [r1, #12]
 8009a12:	05db      	lsls	r3, r3, #23
 8009a14:	4605      	mov	r5, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	4616      	mov	r6, r2
 8009a1a:	d505      	bpl.n	8009a28 <__swrite+0x1e>
 8009a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a20:	2302      	movs	r3, #2
 8009a22:	2200      	movs	r2, #0
 8009a24:	f000 f868 	bl	8009af8 <_lseek_r>
 8009a28:	89a3      	ldrh	r3, [r4, #12]
 8009a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	4632      	mov	r2, r6
 8009a36:	463b      	mov	r3, r7
 8009a38:	4628      	mov	r0, r5
 8009a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a3e:	f000 b817 	b.w	8009a70 <_write_r>

08009a42 <__sseek>:
 8009a42:	b510      	push	{r4, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4a:	f000 f855 	bl	8009af8 <_lseek_r>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	bf15      	itete	ne
 8009a54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a5e:	81a3      	strheq	r3, [r4, #12]
 8009a60:	bf18      	it	ne
 8009a62:	81a3      	strhne	r3, [r4, #12]
 8009a64:	bd10      	pop	{r4, pc}

08009a66 <__sclose>:
 8009a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6a:	f000 b813 	b.w	8009a94 <_close_r>
	...

08009a70 <_write_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	; (8009a90 <_write_r+0x20>)
 8009a74:	4604      	mov	r4, r0
 8009a76:	4608      	mov	r0, r1
 8009a78:	4611      	mov	r1, r2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f7f8 f9eb 	bl	8001e5a <_write>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_write_r+0x1e>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_write_r+0x1e>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200006a8 	.word	0x200006a8

08009a94 <_close_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	; (8009ab0 <_close_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f8 f9f7 	bl	8001e92 <_close>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_close_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_close_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	200006a8 	.word	0x200006a8

08009ab4 <_fstat_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	; (8009ad4 <_fstat_r+0x20>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f7f8 f9f2 	bl	8001eaa <_fstat>
 8009ac6:	1c43      	adds	r3, r0, #1
 8009ac8:	d102      	bne.n	8009ad0 <_fstat_r+0x1c>
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	b103      	cbz	r3, 8009ad0 <_fstat_r+0x1c>
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200006a8 	.word	0x200006a8

08009ad8 <_isatty_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d06      	ldr	r5, [pc, #24]	; (8009af4 <_isatty_r+0x1c>)
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	602b      	str	r3, [r5, #0]
 8009ae4:	f7f8 f9f1 	bl	8001eca <_isatty>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_isatty_r+0x1a>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_isatty_r+0x1a>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200006a8 	.word	0x200006a8

08009af8 <_lseek_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d07      	ldr	r5, [pc, #28]	; (8009b18 <_lseek_r+0x20>)
 8009afc:	4604      	mov	r4, r0
 8009afe:	4608      	mov	r0, r1
 8009b00:	4611      	mov	r1, r2
 8009b02:	2200      	movs	r2, #0
 8009b04:	602a      	str	r2, [r5, #0]
 8009b06:	461a      	mov	r2, r3
 8009b08:	f7f8 f9ea 	bl	8001ee0 <_lseek>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_lseek_r+0x1e>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_lseek_r+0x1e>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	200006a8 	.word	0x200006a8

08009b1c <_malloc_usable_size_r>:
 8009b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b20:	1f18      	subs	r0, r3, #4
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	bfbc      	itt	lt
 8009b26:	580b      	ldrlt	r3, [r1, r0]
 8009b28:	18c0      	addlt	r0, r0, r3
 8009b2a:	4770      	bx	lr

08009b2c <_read_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_read_r+0x20>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f8 f970 	bl	8001e20 <_read>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_read_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_read_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200006a8 	.word	0x200006a8

08009b50 <pow>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	ed2d 8b02 	vpush	{d8}
 8009b56:	eeb0 8a40 	vmov.f32	s16, s0
 8009b5a:	eef0 8a60 	vmov.f32	s17, s1
 8009b5e:	ec55 4b11 	vmov	r4, r5, d1
 8009b62:	f000 f865 	bl	8009c30 <__ieee754_pow>
 8009b66:	4622      	mov	r2, r4
 8009b68:	462b      	mov	r3, r5
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	ec57 6b10 	vmov	r6, r7, d0
 8009b72:	f7f6 ffdb 	bl	8000b2c <__aeabi_dcmpun>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d13b      	bne.n	8009bf2 <pow+0xa2>
 8009b7a:	ec51 0b18 	vmov	r0, r1, d8
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2300      	movs	r3, #0
 8009b82:	f7f6 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b86:	b1b8      	cbz	r0, 8009bb8 <pow+0x68>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d146      	bne.n	8009c26 <pow+0xd6>
 8009b98:	ec45 4b10 	vmov	d0, r4, r5
 8009b9c:	f000 fe61 	bl	800a862 <finite>
 8009ba0:	b338      	cbz	r0, 8009bf2 <pow+0xa2>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 ff97 	bl	8000adc <__aeabi_dcmplt>
 8009bae:	b300      	cbz	r0, 8009bf2 <pow+0xa2>
 8009bb0:	f7fc fe12 	bl	80067d8 <__errno>
 8009bb4:	2322      	movs	r3, #34	; 0x22
 8009bb6:	e01b      	b.n	8009bf0 <pow+0xa0>
 8009bb8:	ec47 6b10 	vmov	d0, r6, r7
 8009bbc:	f000 fe51 	bl	800a862 <finite>
 8009bc0:	b9e0      	cbnz	r0, 8009bfc <pow+0xac>
 8009bc2:	eeb0 0a48 	vmov.f32	s0, s16
 8009bc6:	eef0 0a68 	vmov.f32	s1, s17
 8009bca:	f000 fe4a 	bl	800a862 <finite>
 8009bce:	b1a8      	cbz	r0, 8009bfc <pow+0xac>
 8009bd0:	ec45 4b10 	vmov	d0, r4, r5
 8009bd4:	f000 fe45 	bl	800a862 <finite>
 8009bd8:	b180      	cbz	r0, 8009bfc <pow+0xac>
 8009bda:	4632      	mov	r2, r6
 8009bdc:	463b      	mov	r3, r7
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	f7f6 ffa3 	bl	8000b2c <__aeabi_dcmpun>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0e2      	beq.n	8009bb0 <pow+0x60>
 8009bea:	f7fc fdf5 	bl	80067d8 <__errno>
 8009bee:	2321      	movs	r3, #33	; 0x21
 8009bf0:	6003      	str	r3, [r0, #0]
 8009bf2:	ecbd 8b02 	vpop	{d8}
 8009bf6:	ec47 6b10 	vmov	d0, r6, r7
 8009bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0f2      	beq.n	8009bf2 <pow+0xa2>
 8009c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c10:	eef0 0a68 	vmov.f32	s1, s17
 8009c14:	f000 fe25 	bl	800a862 <finite>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0ea      	beq.n	8009bf2 <pow+0xa2>
 8009c1c:	ec45 4b10 	vmov	d0, r4, r5
 8009c20:	f000 fe1f 	bl	800a862 <finite>
 8009c24:	e7c3      	b.n	8009bae <pow+0x5e>
 8009c26:	4f01      	ldr	r7, [pc, #4]	; (8009c2c <pow+0xdc>)
 8009c28:	2600      	movs	r6, #0
 8009c2a:	e7e2      	b.n	8009bf2 <pow+0xa2>
 8009c2c:	3ff00000 	.word	0x3ff00000

08009c30 <__ieee754_pow>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	ed2d 8b06 	vpush	{d8-d10}
 8009c38:	b089      	sub	sp, #36	; 0x24
 8009c3a:	ed8d 1b00 	vstr	d1, [sp]
 8009c3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009c42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009c46:	ea58 0102 	orrs.w	r1, r8, r2
 8009c4a:	ec57 6b10 	vmov	r6, r7, d0
 8009c4e:	d115      	bne.n	8009c7c <__ieee754_pow+0x4c>
 8009c50:	19b3      	adds	r3, r6, r6
 8009c52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009c56:	4152      	adcs	r2, r2
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	4b89      	ldr	r3, [pc, #548]	; (8009e80 <__ieee754_pow+0x250>)
 8009c5c:	4193      	sbcs	r3, r2
 8009c5e:	f080 84d2 	bcs.w	800a606 <__ieee754_pow+0x9d6>
 8009c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c66:	4630      	mov	r0, r6
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 fb0f 	bl	800028c <__adddf3>
 8009c6e:	ec41 0b10 	vmov	d0, r0, r1
 8009c72:	b009      	add	sp, #36	; 0x24
 8009c74:	ecbd 8b06 	vpop	{d8-d10}
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	4b81      	ldr	r3, [pc, #516]	; (8009e84 <__ieee754_pow+0x254>)
 8009c7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009c82:	429c      	cmp	r4, r3
 8009c84:	ee10 aa10 	vmov	sl, s0
 8009c88:	463d      	mov	r5, r7
 8009c8a:	dc06      	bgt.n	8009c9a <__ieee754_pow+0x6a>
 8009c8c:	d101      	bne.n	8009c92 <__ieee754_pow+0x62>
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	d1e7      	bne.n	8009c62 <__ieee754_pow+0x32>
 8009c92:	4598      	cmp	r8, r3
 8009c94:	dc01      	bgt.n	8009c9a <__ieee754_pow+0x6a>
 8009c96:	d10f      	bne.n	8009cb8 <__ieee754_pow+0x88>
 8009c98:	b172      	cbz	r2, 8009cb8 <__ieee754_pow+0x88>
 8009c9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009c9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009ca2:	ea55 050a 	orrs.w	r5, r5, sl
 8009ca6:	d1dc      	bne.n	8009c62 <__ieee754_pow+0x32>
 8009ca8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cac:	18db      	adds	r3, r3, r3
 8009cae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009cb2:	4152      	adcs	r2, r2
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	e7d0      	b.n	8009c5a <__ieee754_pow+0x2a>
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	da3b      	bge.n	8009d34 <__ieee754_pow+0x104>
 8009cbc:	4b72      	ldr	r3, [pc, #456]	; (8009e88 <__ieee754_pow+0x258>)
 8009cbe:	4598      	cmp	r8, r3
 8009cc0:	dc51      	bgt.n	8009d66 <__ieee754_pow+0x136>
 8009cc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009cc6:	4598      	cmp	r8, r3
 8009cc8:	f340 84ac 	ble.w	800a624 <__ieee754_pow+0x9f4>
 8009ccc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009cd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009cd4:	2b14      	cmp	r3, #20
 8009cd6:	dd0f      	ble.n	8009cf8 <__ieee754_pow+0xc8>
 8009cd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009cdc:	fa22 f103 	lsr.w	r1, r2, r3
 8009ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	f040 849d 	bne.w	800a624 <__ieee754_pow+0x9f4>
 8009cea:	f001 0101 	and.w	r1, r1, #1
 8009cee:	f1c1 0302 	rsb	r3, r1, #2
 8009cf2:	9304      	str	r3, [sp, #16]
 8009cf4:	b182      	cbz	r2, 8009d18 <__ieee754_pow+0xe8>
 8009cf6:	e05f      	b.n	8009db8 <__ieee754_pow+0x188>
 8009cf8:	2a00      	cmp	r2, #0
 8009cfa:	d15b      	bne.n	8009db4 <__ieee754_pow+0x184>
 8009cfc:	f1c3 0314 	rsb	r3, r3, #20
 8009d00:	fa48 f103 	asr.w	r1, r8, r3
 8009d04:	fa01 f303 	lsl.w	r3, r1, r3
 8009d08:	4543      	cmp	r3, r8
 8009d0a:	f040 8488 	bne.w	800a61e <__ieee754_pow+0x9ee>
 8009d0e:	f001 0101 	and.w	r1, r1, #1
 8009d12:	f1c1 0302 	rsb	r3, r1, #2
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	4b5c      	ldr	r3, [pc, #368]	; (8009e8c <__ieee754_pow+0x25c>)
 8009d1a:	4598      	cmp	r8, r3
 8009d1c:	d132      	bne.n	8009d84 <__ieee754_pow+0x154>
 8009d1e:	f1b9 0f00 	cmp.w	r9, #0
 8009d22:	f280 8478 	bge.w	800a616 <__ieee754_pow+0x9e6>
 8009d26:	4959      	ldr	r1, [pc, #356]	; (8009e8c <__ieee754_pow+0x25c>)
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	e79c      	b.n	8009c6e <__ieee754_pow+0x3e>
 8009d34:	2300      	movs	r3, #0
 8009d36:	9304      	str	r3, [sp, #16]
 8009d38:	2a00      	cmp	r2, #0
 8009d3a:	d13d      	bne.n	8009db8 <__ieee754_pow+0x188>
 8009d3c:	4b51      	ldr	r3, [pc, #324]	; (8009e84 <__ieee754_pow+0x254>)
 8009d3e:	4598      	cmp	r8, r3
 8009d40:	d1ea      	bne.n	8009d18 <__ieee754_pow+0xe8>
 8009d42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009d46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d4e:	f000 845a 	beq.w	800a606 <__ieee754_pow+0x9d6>
 8009d52:	4b4f      	ldr	r3, [pc, #316]	; (8009e90 <__ieee754_pow+0x260>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	dd08      	ble.n	8009d6a <__ieee754_pow+0x13a>
 8009d58:	f1b9 0f00 	cmp.w	r9, #0
 8009d5c:	f2c0 8457 	blt.w	800a60e <__ieee754_pow+0x9de>
 8009d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d64:	e783      	b.n	8009c6e <__ieee754_pow+0x3e>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e7e5      	b.n	8009d36 <__ieee754_pow+0x106>
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	f04f 0000 	mov.w	r0, #0
 8009d72:	f04f 0100 	mov.w	r1, #0
 8009d76:	f6bf af7a 	bge.w	8009c6e <__ieee754_pow+0x3e>
 8009d7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009d7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d82:	e774      	b.n	8009c6e <__ieee754_pow+0x3e>
 8009d84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009d88:	d106      	bne.n	8009d98 <__ieee754_pow+0x168>
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	463b      	mov	r3, r7
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fc31 	bl	80005f8 <__aeabi_dmul>
 8009d96:	e76a      	b.n	8009c6e <__ieee754_pow+0x3e>
 8009d98:	4b3e      	ldr	r3, [pc, #248]	; (8009e94 <__ieee754_pow+0x264>)
 8009d9a:	4599      	cmp	r9, r3
 8009d9c:	d10c      	bne.n	8009db8 <__ieee754_pow+0x188>
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	db0a      	blt.n	8009db8 <__ieee754_pow+0x188>
 8009da2:	ec47 6b10 	vmov	d0, r6, r7
 8009da6:	b009      	add	sp, #36	; 0x24
 8009da8:	ecbd 8b06 	vpop	{d8-d10}
 8009dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	f000 bc6c 	b.w	800a68c <__ieee754_sqrt>
 8009db4:	2300      	movs	r3, #0
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	ec47 6b10 	vmov	d0, r6, r7
 8009dbc:	f000 fd48 	bl	800a850 <fabs>
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	f1ba 0f00 	cmp.w	sl, #0
 8009dc8:	d129      	bne.n	8009e1e <__ieee754_pow+0x1ee>
 8009dca:	b124      	cbz	r4, 8009dd6 <__ieee754_pow+0x1a6>
 8009dcc:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <__ieee754_pow+0x25c>)
 8009dce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d123      	bne.n	8009e1e <__ieee754_pow+0x1ee>
 8009dd6:	f1b9 0f00 	cmp.w	r9, #0
 8009dda:	da05      	bge.n	8009de8 <__ieee754_pow+0x1b8>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	2000      	movs	r0, #0
 8009de2:	492a      	ldr	r1, [pc, #168]	; (8009e8c <__ieee754_pow+0x25c>)
 8009de4:	f7f6 fd32 	bl	800084c <__aeabi_ddiv>
 8009de8:	2d00      	cmp	r5, #0
 8009dea:	f6bf af40 	bge.w	8009c6e <__ieee754_pow+0x3e>
 8009dee:	9b04      	ldr	r3, [sp, #16]
 8009df0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009df4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009df8:	4323      	orrs	r3, r4
 8009dfa:	d108      	bne.n	8009e0e <__ieee754_pow+0x1de>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4610      	mov	r0, r2
 8009e02:	4619      	mov	r1, r3
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	e78f      	b.n	8009d2e <__ieee754_pow+0xfe>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	f47f af2c 	bne.w	8009c6e <__ieee754_pow+0x3e>
 8009e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	e727      	b.n	8009c6e <__ieee754_pow+0x3e>
 8009e1e:	0feb      	lsrs	r3, r5, #31
 8009e20:	3b01      	subs	r3, #1
 8009e22:	9306      	str	r3, [sp, #24]
 8009e24:	9a06      	ldr	r2, [sp, #24]
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	d102      	bne.n	8009e32 <__ieee754_pow+0x202>
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	e7e6      	b.n	8009e00 <__ieee754_pow+0x1d0>
 8009e32:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <__ieee754_pow+0x268>)
 8009e34:	4598      	cmp	r8, r3
 8009e36:	f340 80fb 	ble.w	800a030 <__ieee754_pow+0x400>
 8009e3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e3e:	4598      	cmp	r8, r3
 8009e40:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <__ieee754_pow+0x260>)
 8009e42:	dd0c      	ble.n	8009e5e <__ieee754_pow+0x22e>
 8009e44:	429c      	cmp	r4, r3
 8009e46:	dc0f      	bgt.n	8009e68 <__ieee754_pow+0x238>
 8009e48:	f1b9 0f00 	cmp.w	r9, #0
 8009e4c:	da0f      	bge.n	8009e6e <__ieee754_pow+0x23e>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	b009      	add	sp, #36	; 0x24
 8009e52:	ecbd 8b06 	vpop	{d8-d10}
 8009e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f000 bcf0 	b.w	800a83e <__math_oflow>
 8009e5e:	429c      	cmp	r4, r3
 8009e60:	dbf2      	blt.n	8009e48 <__ieee754_pow+0x218>
 8009e62:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <__ieee754_pow+0x25c>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	dd19      	ble.n	8009e9c <__ieee754_pow+0x26c>
 8009e68:	f1b9 0f00 	cmp.w	r9, #0
 8009e6c:	dcef      	bgt.n	8009e4e <__ieee754_pow+0x21e>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	b009      	add	sp, #36	; 0x24
 8009e72:	ecbd 8b06 	vpop	{d8-d10}
 8009e76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	f000 bcd7 	b.w	800a82c <__math_uflow>
 8009e7e:	bf00      	nop
 8009e80:	fff00000 	.word	0xfff00000
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	433fffff 	.word	0x433fffff
 8009e8c:	3ff00000 	.word	0x3ff00000
 8009e90:	3fefffff 	.word	0x3fefffff
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	41e00000 	.word	0x41e00000
 8009e9c:	4b60      	ldr	r3, [pc, #384]	; (800a020 <__ieee754_pow+0x3f0>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f7f6 f9f2 	bl	8000288 <__aeabi_dsub>
 8009ea4:	a354      	add	r3, pc, #336	; (adr r3, 8009ff8 <__ieee754_pow+0x3c8>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	4604      	mov	r4, r0
 8009eac:	460d      	mov	r5, r1
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	a353      	add	r3, pc, #332	; (adr r3, 800a000 <__ieee754_pow+0x3d0>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	4606      	mov	r6, r0
 8009eba:	460f      	mov	r7, r1
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f7f6 fb9a 	bl	80005f8 <__aeabi_dmul>
 8009ec4:	4b57      	ldr	r3, [pc, #348]	; (800a024 <__ieee754_pow+0x3f4>)
 8009ec6:	4682      	mov	sl, r0
 8009ec8:	468b      	mov	fp, r1
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7f6 fb92 	bl	80005f8 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	a14b      	add	r1, pc, #300	; (adr r1, 800a008 <__ieee754_pow+0x3d8>)
 8009eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ede:	f7f6 f9d3 	bl	8000288 <__aeabi_dsub>
 8009ee2:	4622      	mov	r2, r4
 8009ee4:	462b      	mov	r3, r5
 8009ee6:	f7f6 fb87 	bl	80005f8 <__aeabi_dmul>
 8009eea:	4602      	mov	r2, r0
 8009eec:	460b      	mov	r3, r1
 8009eee:	2000      	movs	r0, #0
 8009ef0:	494d      	ldr	r1, [pc, #308]	; (800a028 <__ieee754_pow+0x3f8>)
 8009ef2:	f7f6 f9c9 	bl	8000288 <__aeabi_dsub>
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	4680      	mov	r8, r0
 8009efa:	4689      	mov	r9, r1
 8009efc:	462b      	mov	r3, r5
 8009efe:	4620      	mov	r0, r4
 8009f00:	4629      	mov	r1, r5
 8009f02:	f7f6 fb79 	bl	80005f8 <__aeabi_dmul>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	a33f      	add	r3, pc, #252	; (adr r3, 800a010 <__ieee754_pow+0x3e0>)
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f7f6 fb6e 	bl	80005f8 <__aeabi_dmul>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4650      	mov	r0, sl
 8009f22:	4659      	mov	r1, fp
 8009f24:	f7f6 f9b0 	bl	8000288 <__aeabi_dsub>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4689      	mov	r9, r1
 8009f30:	4630      	mov	r0, r6
 8009f32:	4639      	mov	r1, r7
 8009f34:	f7f6 f9aa 	bl	800028c <__adddf3>
 8009f38:	2000      	movs	r0, #0
 8009f3a:	4632      	mov	r2, r6
 8009f3c:	463b      	mov	r3, r7
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f99b 	bl	8000288 <__aeabi_dsub>
 8009f52:	9b04      	ldr	r3, [sp, #16]
 8009f54:	9a06      	ldr	r2, [sp, #24]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	4682      	mov	sl, r0
 8009f5c:	468b      	mov	fp, r1
 8009f5e:	f040 81e7 	bne.w	800a330 <__ieee754_pow+0x700>
 8009f62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a018 <__ieee754_pow+0x3e8>
 8009f66:	eeb0 8a47 	vmov.f32	s16, s14
 8009f6a:	eef0 8a67 	vmov.f32	s17, s15
 8009f6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f72:	2600      	movs	r6, #0
 8009f74:	4632      	mov	r2, r6
 8009f76:	463b      	mov	r3, r7
 8009f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f7c:	f7f6 f984 	bl	8000288 <__aeabi_dsub>
 8009f80:	4622      	mov	r2, r4
 8009f82:	462b      	mov	r3, r5
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	4689      	mov	r9, r1
 8009f90:	4650      	mov	r0, sl
 8009f92:	4659      	mov	r1, fp
 8009f94:	f7f6 fb30 	bl	80005f8 <__aeabi_dmul>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 f974 	bl	800028c <__adddf3>
 8009fa4:	4632      	mov	r2, r6
 8009fa6:	463b      	mov	r3, r7
 8009fa8:	4680      	mov	r8, r0
 8009faa:	4689      	mov	r9, r1
 8009fac:	4620      	mov	r0, r4
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7f6 fb22 	bl	80005f8 <__aeabi_dmul>
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	f7f6 f964 	bl	800028c <__adddf3>
 8009fc4:	4b19      	ldr	r3, [pc, #100]	; (800a02c <__ieee754_pow+0x3fc>)
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	ec45 4b19 	vmov	d9, r4, r5
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	468b      	mov	fp, r1
 8009fd2:	f340 82f1 	ble.w	800a5b8 <__ieee754_pow+0x988>
 8009fd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009fda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009fde:	4303      	orrs	r3, r0
 8009fe0:	f000 81e4 	beq.w	800a3ac <__ieee754_pow+0x77c>
 8009fe4:	ec51 0b18 	vmov	r0, r1, d8
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2300      	movs	r3, #0
 8009fec:	f7f6 fd76 	bl	8000adc <__aeabi_dcmplt>
 8009ff0:	3800      	subs	r0, #0
 8009ff2:	bf18      	it	ne
 8009ff4:	2001      	movne	r0, #1
 8009ff6:	e72b      	b.n	8009e50 <__ieee754_pow+0x220>
 8009ff8:	60000000 	.word	0x60000000
 8009ffc:	3ff71547 	.word	0x3ff71547
 800a000:	f85ddf44 	.word	0xf85ddf44
 800a004:	3e54ae0b 	.word	0x3e54ae0b
 800a008:	55555555 	.word	0x55555555
 800a00c:	3fd55555 	.word	0x3fd55555
 800a010:	652b82fe 	.word	0x652b82fe
 800a014:	3ff71547 	.word	0x3ff71547
 800a018:	00000000 	.word	0x00000000
 800a01c:	bff00000 	.word	0xbff00000
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	3fd00000 	.word	0x3fd00000
 800a028:	3fe00000 	.word	0x3fe00000
 800a02c:	408fffff 	.word	0x408fffff
 800a030:	4bd5      	ldr	r3, [pc, #852]	; (800a388 <__ieee754_pow+0x758>)
 800a032:	402b      	ands	r3, r5
 800a034:	2200      	movs	r2, #0
 800a036:	b92b      	cbnz	r3, 800a044 <__ieee754_pow+0x414>
 800a038:	4bd4      	ldr	r3, [pc, #848]	; (800a38c <__ieee754_pow+0x75c>)
 800a03a:	f7f6 fadd 	bl	80005f8 <__aeabi_dmul>
 800a03e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a042:	460c      	mov	r4, r1
 800a044:	1523      	asrs	r3, r4, #20
 800a046:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a04a:	4413      	add	r3, r2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	4bd0      	ldr	r3, [pc, #832]	; (800a390 <__ieee754_pow+0x760>)
 800a050:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a054:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a058:	429c      	cmp	r4, r3
 800a05a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a05e:	dd08      	ble.n	800a072 <__ieee754_pow+0x442>
 800a060:	4bcc      	ldr	r3, [pc, #816]	; (800a394 <__ieee754_pow+0x764>)
 800a062:	429c      	cmp	r4, r3
 800a064:	f340 8162 	ble.w	800a32c <__ieee754_pow+0x6fc>
 800a068:	9b05      	ldr	r3, [sp, #20]
 800a06a:	3301      	adds	r3, #1
 800a06c:	9305      	str	r3, [sp, #20]
 800a06e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a072:	2400      	movs	r4, #0
 800a074:	00e3      	lsls	r3, r4, #3
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	4bc7      	ldr	r3, [pc, #796]	; (800a398 <__ieee754_pow+0x768>)
 800a07a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a07e:	ed93 7b00 	vldr	d7, [r3]
 800a082:	4629      	mov	r1, r5
 800a084:	ec53 2b17 	vmov	r2, r3, d7
 800a088:	eeb0 9a47 	vmov.f32	s18, s14
 800a08c:	eef0 9a67 	vmov.f32	s19, s15
 800a090:	4682      	mov	sl, r0
 800a092:	f7f6 f8f9 	bl	8000288 <__aeabi_dsub>
 800a096:	4652      	mov	r2, sl
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	462b      	mov	r3, r5
 800a09e:	ec51 0b19 	vmov	r0, r1, d9
 800a0a2:	f7f6 f8f3 	bl	800028c <__adddf3>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	49bb      	ldr	r1, [pc, #748]	; (800a39c <__ieee754_pow+0x76c>)
 800a0ae:	f7f6 fbcd 	bl	800084c <__aeabi_ddiv>
 800a0b2:	ec41 0b1a 	vmov	d10, r0, r1
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 fa9b 	bl	80005f8 <__aeabi_dmul>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0ce:	46ab      	mov	fp, r5
 800a0d0:	106d      	asrs	r5, r5, #1
 800a0d2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0d6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a0da:	ec41 0b18 	vmov	d8, r0, r1
 800a0de:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	461d      	mov	r5, r3
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	4639      	mov	r1, r7
 800a0f8:	f7f6 f8c6 	bl	8000288 <__aeabi_dsub>
 800a0fc:	ec53 2b19 	vmov	r2, r3, d9
 800a100:	4606      	mov	r6, r0
 800a102:	460f      	mov	r7, r1
 800a104:	4620      	mov	r0, r4
 800a106:	4629      	mov	r1, r5
 800a108:	f7f6 f8be 	bl	8000288 <__aeabi_dsub>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	f7f6 f8b8 	bl	8000288 <__aeabi_dsub>
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	f7f6 fa6c 	bl	80005f8 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 f8ae 	bl	8000288 <__aeabi_dsub>
 800a12c:	ec53 2b1a 	vmov	r2, r3, d10
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	ec53 2b18 	vmov	r2, r3, d8
 800a138:	ec41 0b19 	vmov	d9, r0, r1
 800a13c:	ec51 0b18 	vmov	r0, r1, d8
 800a140:	f7f6 fa5a 	bl	80005f8 <__aeabi_dmul>
 800a144:	a37c      	add	r3, pc, #496	; (adr r3, 800a338 <__ieee754_pow+0x708>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	4604      	mov	r4, r0
 800a14c:	460d      	mov	r5, r1
 800a14e:	f7f6 fa53 	bl	80005f8 <__aeabi_dmul>
 800a152:	a37b      	add	r3, pc, #492	; (adr r3, 800a340 <__ieee754_pow+0x710>)
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	4622      	mov	r2, r4
 800a15e:	462b      	mov	r3, r5
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	a378      	add	r3, pc, #480	; (adr r3, 800a348 <__ieee754_pow+0x718>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 f88f 	bl	800028c <__adddf3>
 800a16e:	4622      	mov	r2, r4
 800a170:	462b      	mov	r3, r5
 800a172:	f7f6 fa41 	bl	80005f8 <__aeabi_dmul>
 800a176:	a376      	add	r3, pc, #472	; (adr r3, 800a350 <__ieee754_pow+0x720>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	f7f6 f886 	bl	800028c <__adddf3>
 800a180:	4622      	mov	r2, r4
 800a182:	462b      	mov	r3, r5
 800a184:	f7f6 fa38 	bl	80005f8 <__aeabi_dmul>
 800a188:	a373      	add	r3, pc, #460	; (adr r3, 800a358 <__ieee754_pow+0x728>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f87d 	bl	800028c <__adddf3>
 800a192:	4622      	mov	r2, r4
 800a194:	462b      	mov	r3, r5
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	a371      	add	r3, pc, #452	; (adr r3, 800a360 <__ieee754_pow+0x730>)
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	f7f6 f874 	bl	800028c <__adddf3>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	460f      	mov	r7, r1
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f7f6 fa22 	bl	80005f8 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 fa1c 	bl	80005f8 <__aeabi_dmul>
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	ec51 0b18 	vmov	r0, r1, d8
 800a1cc:	f7f6 f85e 	bl	800028c <__adddf3>
 800a1d0:	ec53 2b19 	vmov	r2, r3, d9
 800a1d4:	f7f6 fa10 	bl	80005f8 <__aeabi_dmul>
 800a1d8:	4622      	mov	r2, r4
 800a1da:	462b      	mov	r3, r5
 800a1dc:	f7f6 f856 	bl	800028c <__adddf3>
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	4682      	mov	sl, r0
 800a1e4:	468b      	mov	fp, r1
 800a1e6:	464b      	mov	r3, r9
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f7f6 fa04 	bl	80005f8 <__aeabi_dmul>
 800a1f0:	4b6b      	ldr	r3, [pc, #428]	; (800a3a0 <__ieee754_pow+0x770>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	f7f6 f848 	bl	800028c <__adddf3>
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	465b      	mov	r3, fp
 800a200:	f7f6 f844 	bl	800028c <__adddf3>
 800a204:	2000      	movs	r0, #0
 800a206:	4604      	mov	r4, r0
 800a208:	460d      	mov	r5, r1
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	4b62      	ldr	r3, [pc, #392]	; (800a3a0 <__ieee754_pow+0x770>)
 800a218:	4680      	mov	r8, r0
 800a21a:	4689      	mov	r9, r1
 800a21c:	2200      	movs	r2, #0
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 f831 	bl	8000288 <__aeabi_dsub>
 800a226:	4632      	mov	r2, r6
 800a228:	463b      	mov	r3, r7
 800a22a:	f7f6 f82d 	bl	8000288 <__aeabi_dsub>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4650      	mov	r0, sl
 800a234:	4659      	mov	r1, fp
 800a236:	f7f6 f827 	bl	8000288 <__aeabi_dsub>
 800a23a:	ec53 2b18 	vmov	r2, r3, d8
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	4622      	mov	r2, r4
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	462b      	mov	r3, r5
 800a24a:	ec51 0b19 	vmov	r0, r1, d9
 800a24e:	f7f6 f9d3 	bl	80005f8 <__aeabi_dmul>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	f7f6 f817 	bl	800028c <__adddf3>
 800a25e:	4606      	mov	r6, r0
 800a260:	460f      	mov	r7, r1
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	f7f6 f80f 	bl	800028c <__adddf3>
 800a26e:	a33e      	add	r3, pc, #248	; (adr r3, 800a368 <__ieee754_pow+0x738>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	2000      	movs	r0, #0
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	f7f6 f9bd 	bl	80005f8 <__aeabi_dmul>
 800a27e:	4642      	mov	r2, r8
 800a280:	ec41 0b18 	vmov	d8, r0, r1
 800a284:	464b      	mov	r3, r9
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f5 fffd 	bl	8000288 <__aeabi_dsub>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f5 fff7 	bl	8000288 <__aeabi_dsub>
 800a29a:	a335      	add	r3, pc, #212	; (adr r3, 800a370 <__ieee754_pow+0x740>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f7f6 f9aa 	bl	80005f8 <__aeabi_dmul>
 800a2a4:	a334      	add	r3, pc, #208	; (adr r3, 800a378 <__ieee754_pow+0x748>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f6 f9a1 	bl	80005f8 <__aeabi_dmul>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 ffe5 	bl	800028c <__adddf3>
 800a2c2:	9a07      	ldr	r2, [sp, #28]
 800a2c4:	4b37      	ldr	r3, [pc, #220]	; (800a3a4 <__ieee754_pow+0x774>)
 800a2c6:	4413      	add	r3, r2
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	f7f5 ffde 	bl	800028c <__adddf3>
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	9805      	ldr	r0, [sp, #20]
 800a2d4:	468b      	mov	fp, r1
 800a2d6:	f7f6 f925 	bl	8000524 <__aeabi_i2d>
 800a2da:	9a07      	ldr	r2, [sp, #28]
 800a2dc:	4b32      	ldr	r3, [pc, #200]	; (800a3a8 <__ieee754_pow+0x778>)
 800a2de:	4413      	add	r3, r2
 800a2e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	4652      	mov	r2, sl
 800a2ea:	465b      	mov	r3, fp
 800a2ec:	ec51 0b18 	vmov	r0, r1, d8
 800a2f0:	f7f5 ffcc 	bl	800028c <__adddf3>
 800a2f4:	4642      	mov	r2, r8
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	f7f5 ffc8 	bl	800028c <__adddf3>
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	f7f5 ffc4 	bl	800028c <__adddf3>
 800a304:	2000      	movs	r0, #0
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	4604      	mov	r4, r0
 800a30c:	460d      	mov	r5, r1
 800a30e:	f7f5 ffbb 	bl	8000288 <__aeabi_dsub>
 800a312:	4642      	mov	r2, r8
 800a314:	464b      	mov	r3, r9
 800a316:	f7f5 ffb7 	bl	8000288 <__aeabi_dsub>
 800a31a:	ec53 2b18 	vmov	r2, r3, d8
 800a31e:	f7f5 ffb3 	bl	8000288 <__aeabi_dsub>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	4650      	mov	r0, sl
 800a328:	4659      	mov	r1, fp
 800a32a:	e610      	b.n	8009f4e <__ieee754_pow+0x31e>
 800a32c:	2401      	movs	r4, #1
 800a32e:	e6a1      	b.n	800a074 <__ieee754_pow+0x444>
 800a330:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a380 <__ieee754_pow+0x750>
 800a334:	e617      	b.n	8009f66 <__ieee754_pow+0x336>
 800a336:	bf00      	nop
 800a338:	4a454eef 	.word	0x4a454eef
 800a33c:	3fca7e28 	.word	0x3fca7e28
 800a340:	93c9db65 	.word	0x93c9db65
 800a344:	3fcd864a 	.word	0x3fcd864a
 800a348:	a91d4101 	.word	0xa91d4101
 800a34c:	3fd17460 	.word	0x3fd17460
 800a350:	518f264d 	.word	0x518f264d
 800a354:	3fd55555 	.word	0x3fd55555
 800a358:	db6fabff 	.word	0xdb6fabff
 800a35c:	3fdb6db6 	.word	0x3fdb6db6
 800a360:	33333303 	.word	0x33333303
 800a364:	3fe33333 	.word	0x3fe33333
 800a368:	e0000000 	.word	0xe0000000
 800a36c:	3feec709 	.word	0x3feec709
 800a370:	dc3a03fd 	.word	0xdc3a03fd
 800a374:	3feec709 	.word	0x3feec709
 800a378:	145b01f5 	.word	0x145b01f5
 800a37c:	be3e2fe0 	.word	0xbe3e2fe0
 800a380:	00000000 	.word	0x00000000
 800a384:	3ff00000 	.word	0x3ff00000
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	43400000 	.word	0x43400000
 800a390:	0003988e 	.word	0x0003988e
 800a394:	000bb679 	.word	0x000bb679
 800a398:	0800aee8 	.word	0x0800aee8
 800a39c:	3ff00000 	.word	0x3ff00000
 800a3a0:	40080000 	.word	0x40080000
 800a3a4:	0800af08 	.word	0x0800af08
 800a3a8:	0800aef8 	.word	0x0800aef8
 800a3ac:	a3b5      	add	r3, pc, #724	; (adr r3, 800a684 <__ieee754_pow+0xa54>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	f7f5 ff69 	bl	800028c <__adddf3>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	ec41 0b1a 	vmov	d10, r0, r1
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f5 ff5f 	bl	8000288 <__aeabi_dsub>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	ec51 0b1a 	vmov	r0, r1, d10
 800a3d2:	f7f6 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f47f ae04 	bne.w	8009fe4 <__ieee754_pow+0x3b4>
 800a3dc:	4aa4      	ldr	r2, [pc, #656]	; (800a670 <__ieee754_pow+0xa40>)
 800a3de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	f340 8108 	ble.w	800a5f8 <__ieee754_pow+0x9c8>
 800a3e8:	151b      	asrs	r3, r3, #20
 800a3ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a3ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a3f2:	fa4a f303 	asr.w	r3, sl, r3
 800a3f6:	445b      	add	r3, fp
 800a3f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3fc:	4e9d      	ldr	r6, [pc, #628]	; (800a674 <__ieee754_pow+0xa44>)
 800a3fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a402:	4116      	asrs	r6, r2
 800a404:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a408:	2000      	movs	r0, #0
 800a40a:	ea23 0106 	bic.w	r1, r3, r6
 800a40e:	f1c2 0214 	rsb	r2, r2, #20
 800a412:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a416:	fa4a fa02 	asr.w	sl, sl, r2
 800a41a:	f1bb 0f00 	cmp.w	fp, #0
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	bfb8      	it	lt
 800a428:	f1ca 0a00 	rsblt	sl, sl, #0
 800a42c:	f7f5 ff2c 	bl	8000288 <__aeabi_dsub>
 800a430:	ec41 0b19 	vmov	d9, r0, r1
 800a434:	4642      	mov	r2, r8
 800a436:	464b      	mov	r3, r9
 800a438:	ec51 0b19 	vmov	r0, r1, d9
 800a43c:	f7f5 ff26 	bl	800028c <__adddf3>
 800a440:	a37b      	add	r3, pc, #492	; (adr r3, 800a630 <__ieee754_pow+0xa00>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	2000      	movs	r0, #0
 800a448:	4604      	mov	r4, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	f7f6 f8d4 	bl	80005f8 <__aeabi_dmul>
 800a450:	ec53 2b19 	vmov	r2, r3, d9
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 ff14 	bl	8000288 <__aeabi_dsub>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4640      	mov	r0, r8
 800a466:	4649      	mov	r1, r9
 800a468:	f7f5 ff0e 	bl	8000288 <__aeabi_dsub>
 800a46c:	a372      	add	r3, pc, #456	; (adr r3, 800a638 <__ieee754_pow+0xa08>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	f7f6 f8c1 	bl	80005f8 <__aeabi_dmul>
 800a476:	a372      	add	r3, pc, #456	; (adr r3, 800a640 <__ieee754_pow+0xa10>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	4680      	mov	r8, r0
 800a47e:	4689      	mov	r9, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f6 f8b8 	bl	80005f8 <__aeabi_dmul>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f5 fefc 	bl	800028c <__adddf3>
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f5 fef4 	bl	800028c <__adddf3>
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	4689      	mov	r9, r1
 800a4ac:	f7f5 feec 	bl	8000288 <__aeabi_dsub>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	f7f5 fee6 	bl	8000288 <__aeabi_dsub>
 800a4bc:	4642      	mov	r2, r8
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460f      	mov	r7, r1
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	f7f6 f896 	bl	80005f8 <__aeabi_dmul>
 800a4cc:	a35e      	add	r3, pc, #376	; (adr r3, 800a648 <__ieee754_pow+0xa18>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	a35d      	add	r3, pc, #372	; (adr r3, 800a650 <__ieee754_pow+0xa20>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	a35a      	add	r3, pc, #360	; (adr r3, 800a658 <__ieee754_pow+0xa28>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f5 fecb 	bl	800028c <__adddf3>
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	462b      	mov	r3, r5
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	a358      	add	r3, pc, #352	; (adr r3, 800a660 <__ieee754_pow+0xa30>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fec0 	bl	8000288 <__aeabi_dsub>
 800a508:	4622      	mov	r2, r4
 800a50a:	462b      	mov	r3, r5
 800a50c:	f7f6 f874 	bl	80005f8 <__aeabi_dmul>
 800a510:	a355      	add	r3, pc, #340	; (adr r3, 800a668 <__ieee754_pow+0xa38>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 feb9 	bl	800028c <__adddf3>
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	4640      	mov	r0, r8
 800a528:	4649      	mov	r1, r9
 800a52a:	f7f5 fead 	bl	8000288 <__aeabi_dsub>
 800a52e:	4604      	mov	r4, r0
 800a530:	460d      	mov	r5, r1
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	2200      	movs	r2, #0
 800a540:	ec41 0b19 	vmov	d9, r0, r1
 800a544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a548:	4620      	mov	r0, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f5 fe9c 	bl	8000288 <__aeabi_dsub>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	ec51 0b19 	vmov	r0, r1, d9
 800a558:	f7f6 f978 	bl	800084c <__aeabi_ddiv>
 800a55c:	4632      	mov	r2, r6
 800a55e:	4604      	mov	r4, r0
 800a560:	460d      	mov	r5, r1
 800a562:	463b      	mov	r3, r7
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	4632      	mov	r2, r6
 800a56e:	463b      	mov	r3, r7
 800a570:	f7f5 fe8c 	bl	800028c <__adddf3>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	f7f5 fe80 	bl	8000288 <__aeabi_dsub>
 800a588:	460b      	mov	r3, r1
 800a58a:	4602      	mov	r2, r0
 800a58c:	493a      	ldr	r1, [pc, #232]	; (800a678 <__ieee754_pow+0xa48>)
 800a58e:	2000      	movs	r0, #0
 800a590:	f7f5 fe7a 	bl	8000288 <__aeabi_dsub>
 800a594:	ec41 0b10 	vmov	d0, r0, r1
 800a598:	ee10 3a90 	vmov	r3, s1
 800a59c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a5a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a4:	da2b      	bge.n	800a5fe <__ieee754_pow+0x9ce>
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	f000 f966 	bl	800a878 <scalbn>
 800a5ac:	ec51 0b10 	vmov	r0, r1, d0
 800a5b0:	ec53 2b18 	vmov	r2, r3, d8
 800a5b4:	f7ff bbed 	b.w	8009d92 <__ieee754_pow+0x162>
 800a5b8:	4b30      	ldr	r3, [pc, #192]	; (800a67c <__ieee754_pow+0xa4c>)
 800a5ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a5be:	429e      	cmp	r6, r3
 800a5c0:	f77f af0c 	ble.w	800a3dc <__ieee754_pow+0x7ac>
 800a5c4:	4b2e      	ldr	r3, [pc, #184]	; (800a680 <__ieee754_pow+0xa50>)
 800a5c6:	440b      	add	r3, r1
 800a5c8:	4303      	orrs	r3, r0
 800a5ca:	d009      	beq.n	800a5e0 <__ieee754_pow+0x9b0>
 800a5cc:	ec51 0b18 	vmov	r0, r1, d8
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f7f6 fa82 	bl	8000adc <__aeabi_dcmplt>
 800a5d8:	3800      	subs	r0, #0
 800a5da:	bf18      	it	ne
 800a5dc:	2001      	movne	r0, #1
 800a5de:	e447      	b.n	8009e70 <__ieee754_pow+0x240>
 800a5e0:	4622      	mov	r2, r4
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f7f5 fe50 	bl	8000288 <__aeabi_dsub>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	f7f6 fa8a 	bl	8000b04 <__aeabi_dcmpge>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	f43f aef3 	beq.w	800a3dc <__ieee754_pow+0x7ac>
 800a5f6:	e7e9      	b.n	800a5cc <__ieee754_pow+0x99c>
 800a5f8:	f04f 0a00 	mov.w	sl, #0
 800a5fc:	e71a      	b.n	800a434 <__ieee754_pow+0x804>
 800a5fe:	ec51 0b10 	vmov	r0, r1, d0
 800a602:	4619      	mov	r1, r3
 800a604:	e7d4      	b.n	800a5b0 <__ieee754_pow+0x980>
 800a606:	491c      	ldr	r1, [pc, #112]	; (800a678 <__ieee754_pow+0xa48>)
 800a608:	2000      	movs	r0, #0
 800a60a:	f7ff bb30 	b.w	8009c6e <__ieee754_pow+0x3e>
 800a60e:	2000      	movs	r0, #0
 800a610:	2100      	movs	r1, #0
 800a612:	f7ff bb2c 	b.w	8009c6e <__ieee754_pow+0x3e>
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7ff bb28 	b.w	8009c6e <__ieee754_pow+0x3e>
 800a61e:	9204      	str	r2, [sp, #16]
 800a620:	f7ff bb7a 	b.w	8009d18 <__ieee754_pow+0xe8>
 800a624:	2300      	movs	r3, #0
 800a626:	f7ff bb64 	b.w	8009cf2 <__ieee754_pow+0xc2>
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w
 800a630:	00000000 	.word	0x00000000
 800a634:	3fe62e43 	.word	0x3fe62e43
 800a638:	fefa39ef 	.word	0xfefa39ef
 800a63c:	3fe62e42 	.word	0x3fe62e42
 800a640:	0ca86c39 	.word	0x0ca86c39
 800a644:	be205c61 	.word	0xbe205c61
 800a648:	72bea4d0 	.word	0x72bea4d0
 800a64c:	3e663769 	.word	0x3e663769
 800a650:	c5d26bf1 	.word	0xc5d26bf1
 800a654:	3ebbbd41 	.word	0x3ebbbd41
 800a658:	af25de2c 	.word	0xaf25de2c
 800a65c:	3f11566a 	.word	0x3f11566a
 800a660:	16bebd93 	.word	0x16bebd93
 800a664:	3f66c16c 	.word	0x3f66c16c
 800a668:	5555553e 	.word	0x5555553e
 800a66c:	3fc55555 	.word	0x3fc55555
 800a670:	3fe00000 	.word	0x3fe00000
 800a674:	000fffff 	.word	0x000fffff
 800a678:	3ff00000 	.word	0x3ff00000
 800a67c:	4090cbff 	.word	0x4090cbff
 800a680:	3f6f3400 	.word	0x3f6f3400
 800a684:	652b82fe 	.word	0x652b82fe
 800a688:	3c971547 	.word	0x3c971547

0800a68c <__ieee754_sqrt>:
 800a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	ec55 4b10 	vmov	r4, r5, d0
 800a694:	4e55      	ldr	r6, [pc, #340]	; (800a7ec <__ieee754_sqrt+0x160>)
 800a696:	43ae      	bics	r6, r5
 800a698:	ee10 0a10 	vmov	r0, s0
 800a69c:	ee10 3a10 	vmov	r3, s0
 800a6a0:	462a      	mov	r2, r5
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	d110      	bne.n	800a6c8 <__ieee754_sqrt+0x3c>
 800a6a6:	ee10 2a10 	vmov	r2, s0
 800a6aa:	462b      	mov	r3, r5
 800a6ac:	f7f5 ffa4 	bl	80005f8 <__aeabi_dmul>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	f7f5 fde8 	bl	800028c <__adddf3>
 800a6bc:	4604      	mov	r4, r0
 800a6be:	460d      	mov	r5, r1
 800a6c0:	ec45 4b10 	vmov	d0, r4, r5
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	2d00      	cmp	r5, #0
 800a6ca:	dc10      	bgt.n	800a6ee <__ieee754_sqrt+0x62>
 800a6cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6d0:	4330      	orrs	r0, r6
 800a6d2:	d0f5      	beq.n	800a6c0 <__ieee754_sqrt+0x34>
 800a6d4:	b15d      	cbz	r5, 800a6ee <__ieee754_sqrt+0x62>
 800a6d6:	ee10 2a10 	vmov	r2, s0
 800a6da:	462b      	mov	r3, r5
 800a6dc:	ee10 0a10 	vmov	r0, s0
 800a6e0:	f7f5 fdd2 	bl	8000288 <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	f7f6 f8b0 	bl	800084c <__aeabi_ddiv>
 800a6ec:	e7e6      	b.n	800a6bc <__ieee754_sqrt+0x30>
 800a6ee:	1512      	asrs	r2, r2, #20
 800a6f0:	d074      	beq.n	800a7dc <__ieee754_sqrt+0x150>
 800a6f2:	07d4      	lsls	r4, r2, #31
 800a6f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a6f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a6fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a700:	bf5e      	ittt	pl
 800a702:	0fda      	lsrpl	r2, r3, #31
 800a704:	005b      	lslpl	r3, r3, #1
 800a706:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a70a:	2400      	movs	r4, #0
 800a70c:	0fda      	lsrs	r2, r3, #31
 800a70e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a712:	107f      	asrs	r7, r7, #1
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	2516      	movs	r5, #22
 800a718:	4620      	mov	r0, r4
 800a71a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a71e:	1886      	adds	r6, r0, r2
 800a720:	428e      	cmp	r6, r1
 800a722:	bfde      	ittt	le
 800a724:	1b89      	suble	r1, r1, r6
 800a726:	18b0      	addle	r0, r6, r2
 800a728:	18a4      	addle	r4, r4, r2
 800a72a:	0049      	lsls	r1, r1, #1
 800a72c:	3d01      	subs	r5, #1
 800a72e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a732:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a736:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a73a:	d1f0      	bne.n	800a71e <__ieee754_sqrt+0x92>
 800a73c:	462a      	mov	r2, r5
 800a73e:	f04f 0e20 	mov.w	lr, #32
 800a742:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a746:	4281      	cmp	r1, r0
 800a748:	eb06 0c05 	add.w	ip, r6, r5
 800a74c:	dc02      	bgt.n	800a754 <__ieee754_sqrt+0xc8>
 800a74e:	d113      	bne.n	800a778 <__ieee754_sqrt+0xec>
 800a750:	459c      	cmp	ip, r3
 800a752:	d811      	bhi.n	800a778 <__ieee754_sqrt+0xec>
 800a754:	f1bc 0f00 	cmp.w	ip, #0
 800a758:	eb0c 0506 	add.w	r5, ip, r6
 800a75c:	da43      	bge.n	800a7e6 <__ieee754_sqrt+0x15a>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	db41      	blt.n	800a7e6 <__ieee754_sqrt+0x15a>
 800a762:	f100 0801 	add.w	r8, r0, #1
 800a766:	1a09      	subs	r1, r1, r0
 800a768:	459c      	cmp	ip, r3
 800a76a:	bf88      	it	hi
 800a76c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a770:	eba3 030c 	sub.w	r3, r3, ip
 800a774:	4432      	add	r2, r6
 800a776:	4640      	mov	r0, r8
 800a778:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a77c:	f1be 0e01 	subs.w	lr, lr, #1
 800a780:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a784:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a788:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a78c:	d1db      	bne.n	800a746 <__ieee754_sqrt+0xba>
 800a78e:	430b      	orrs	r3, r1
 800a790:	d006      	beq.n	800a7a0 <__ieee754_sqrt+0x114>
 800a792:	1c50      	adds	r0, r2, #1
 800a794:	bf13      	iteet	ne
 800a796:	3201      	addne	r2, #1
 800a798:	3401      	addeq	r4, #1
 800a79a:	4672      	moveq	r2, lr
 800a79c:	f022 0201 	bicne.w	r2, r2, #1
 800a7a0:	1063      	asrs	r3, r4, #1
 800a7a2:	0852      	lsrs	r2, r2, #1
 800a7a4:	07e1      	lsls	r1, r4, #31
 800a7a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7ae:	bf48      	it	mi
 800a7b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	e781      	b.n	800a6c0 <__ieee754_sqrt+0x34>
 800a7bc:	0ad9      	lsrs	r1, r3, #11
 800a7be:	3815      	subs	r0, #21
 800a7c0:	055b      	lsls	r3, r3, #21
 800a7c2:	2900      	cmp	r1, #0
 800a7c4:	d0fa      	beq.n	800a7bc <__ieee754_sqrt+0x130>
 800a7c6:	02cd      	lsls	r5, r1, #11
 800a7c8:	d50a      	bpl.n	800a7e0 <__ieee754_sqrt+0x154>
 800a7ca:	f1c2 0420 	rsb	r4, r2, #32
 800a7ce:	fa23 f404 	lsr.w	r4, r3, r4
 800a7d2:	1e55      	subs	r5, r2, #1
 800a7d4:	4093      	lsls	r3, r2
 800a7d6:	4321      	orrs	r1, r4
 800a7d8:	1b42      	subs	r2, r0, r5
 800a7da:	e78a      	b.n	800a6f2 <__ieee754_sqrt+0x66>
 800a7dc:	4610      	mov	r0, r2
 800a7de:	e7f0      	b.n	800a7c2 <__ieee754_sqrt+0x136>
 800a7e0:	0049      	lsls	r1, r1, #1
 800a7e2:	3201      	adds	r2, #1
 800a7e4:	e7ef      	b.n	800a7c6 <__ieee754_sqrt+0x13a>
 800a7e6:	4680      	mov	r8, r0
 800a7e8:	e7bd      	b.n	800a766 <__ieee754_sqrt+0xda>
 800a7ea:	bf00      	nop
 800a7ec:	7ff00000 	.word	0x7ff00000

0800a7f0 <with_errno>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	460d      	mov	r5, r1
 800a7f6:	4616      	mov	r6, r2
 800a7f8:	f7fb ffee 	bl	80067d8 <__errno>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	6006      	str	r6, [r0, #0]
 800a800:	4620      	mov	r0, r4
 800a802:	bd70      	pop	{r4, r5, r6, pc}

0800a804 <xflow>:
 800a804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a806:	4614      	mov	r4, r2
 800a808:	461d      	mov	r5, r3
 800a80a:	b108      	cbz	r0, 800a810 <xflow+0xc>
 800a80c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a810:	e9cd 2300 	strd	r2, r3, [sp]
 800a814:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f5 feec 	bl	80005f8 <__aeabi_dmul>
 800a820:	2222      	movs	r2, #34	; 0x22
 800a822:	b003      	add	sp, #12
 800a824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a828:	f7ff bfe2 	b.w	800a7f0 <with_errno>

0800a82c <__math_uflow>:
 800a82c:	b508      	push	{r3, lr}
 800a82e:	2200      	movs	r2, #0
 800a830:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a834:	f7ff ffe6 	bl	800a804 <xflow>
 800a838:	ec41 0b10 	vmov	d0, r0, r1
 800a83c:	bd08      	pop	{r3, pc}

0800a83e <__math_oflow>:
 800a83e:	b508      	push	{r3, lr}
 800a840:	2200      	movs	r2, #0
 800a842:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a846:	f7ff ffdd 	bl	800a804 <xflow>
 800a84a:	ec41 0b10 	vmov	d0, r0, r1
 800a84e:	bd08      	pop	{r3, pc}

0800a850 <fabs>:
 800a850:	ec51 0b10 	vmov	r0, r1, d0
 800a854:	ee10 2a10 	vmov	r2, s0
 800a858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a85c:	ec43 2b10 	vmov	d0, r2, r3
 800a860:	4770      	bx	lr

0800a862 <finite>:
 800a862:	b082      	sub	sp, #8
 800a864:	ed8d 0b00 	vstr	d0, [sp]
 800a868:	9801      	ldr	r0, [sp, #4]
 800a86a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a86e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a872:	0fc0      	lsrs	r0, r0, #31
 800a874:	b002      	add	sp, #8
 800a876:	4770      	bx	lr

0800a878 <scalbn>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	ec55 4b10 	vmov	r4, r5, d0
 800a87e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a882:	4606      	mov	r6, r0
 800a884:	462b      	mov	r3, r5
 800a886:	b99a      	cbnz	r2, 800a8b0 <scalbn+0x38>
 800a888:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a88c:	4323      	orrs	r3, r4
 800a88e:	d036      	beq.n	800a8fe <scalbn+0x86>
 800a890:	4b39      	ldr	r3, [pc, #228]	; (800a978 <scalbn+0x100>)
 800a892:	4629      	mov	r1, r5
 800a894:	ee10 0a10 	vmov	r0, s0
 800a898:	2200      	movs	r2, #0
 800a89a:	f7f5 fead 	bl	80005f8 <__aeabi_dmul>
 800a89e:	4b37      	ldr	r3, [pc, #220]	; (800a97c <scalbn+0x104>)
 800a8a0:	429e      	cmp	r6, r3
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	da10      	bge.n	800a8ca <scalbn+0x52>
 800a8a8:	a32b      	add	r3, pc, #172	; (adr r3, 800a958 <scalbn+0xe0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	e03a      	b.n	800a926 <scalbn+0xae>
 800a8b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8b4:	428a      	cmp	r2, r1
 800a8b6:	d10c      	bne.n	800a8d2 <scalbn+0x5a>
 800a8b8:	ee10 2a10 	vmov	r2, s0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	f7f5 fce4 	bl	800028c <__adddf3>
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	460d      	mov	r5, r1
 800a8c8:	e019      	b.n	800a8fe <scalbn+0x86>
 800a8ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	3a36      	subs	r2, #54	; 0x36
 800a8d2:	4432      	add	r2, r6
 800a8d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8d8:	428a      	cmp	r2, r1
 800a8da:	dd08      	ble.n	800a8ee <scalbn+0x76>
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	a120      	add	r1, pc, #128	; (adr r1, 800a960 <scalbn+0xe8>)
 800a8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e4:	da1c      	bge.n	800a920 <scalbn+0xa8>
 800a8e6:	a120      	add	r1, pc, #128	; (adr r1, 800a968 <scalbn+0xf0>)
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	e018      	b.n	800a920 <scalbn+0xa8>
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	dd08      	ble.n	800a904 <scalbn+0x8c>
 800a8f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a8fe:	ec45 4b10 	vmov	d0, r4, r5
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a908:	da19      	bge.n	800a93e <scalbn+0xc6>
 800a90a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a90e:	429e      	cmp	r6, r3
 800a910:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a914:	dd0a      	ble.n	800a92c <scalbn+0xb4>
 800a916:	a112      	add	r1, pc, #72	; (adr r1, 800a960 <scalbn+0xe8>)
 800a918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e2      	bne.n	800a8e6 <scalbn+0x6e>
 800a920:	a30f      	add	r3, pc, #60	; (adr r3, 800a960 <scalbn+0xe8>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fe67 	bl	80005f8 <__aeabi_dmul>
 800a92a:	e7cb      	b.n	800a8c4 <scalbn+0x4c>
 800a92c:	a10a      	add	r1, pc, #40	; (adr r1, 800a958 <scalbn+0xe0>)
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0b8      	beq.n	800a8a8 <scalbn+0x30>
 800a936:	a10e      	add	r1, pc, #56	; (adr r1, 800a970 <scalbn+0xf8>)
 800a938:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a93c:	e7b4      	b.n	800a8a8 <scalbn+0x30>
 800a93e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a942:	3236      	adds	r2, #54	; 0x36
 800a944:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a948:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a94c:	4620      	mov	r0, r4
 800a94e:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <scalbn+0x108>)
 800a950:	2200      	movs	r2, #0
 800a952:	e7e8      	b.n	800a926 <scalbn+0xae>
 800a954:	f3af 8000 	nop.w
 800a958:	c2f8f359 	.word	0xc2f8f359
 800a95c:	01a56e1f 	.word	0x01a56e1f
 800a960:	8800759c 	.word	0x8800759c
 800a964:	7e37e43c 	.word	0x7e37e43c
 800a968:	8800759c 	.word	0x8800759c
 800a96c:	fe37e43c 	.word	0xfe37e43c
 800a970:	c2f8f359 	.word	0xc2f8f359
 800a974:	81a56e1f 	.word	0x81a56e1f
 800a978:	43500000 	.word	0x43500000
 800a97c:	ffff3cb0 	.word	0xffff3cb0
 800a980:	3c900000 	.word	0x3c900000

0800a984 <_init>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr

0800a990 <_fini>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	bf00      	nop
 800a994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a996:	bc08      	pop	{r3}
 800a998:	469e      	mov	lr, r3
 800a99a:	4770      	bx	lr
